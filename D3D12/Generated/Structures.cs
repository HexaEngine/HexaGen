// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;
using HexaEngine.DXGI;
using HexaEngine.D3DCommon;

namespace HexaEngine.D3D12
{
	[Guid("c4fec28f-7966-4e95-9f94-f431cb56c3b8")]
	[NativeName("ID3D12Object")]
	public partial struct ID3D12Object : IComObject, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c4fec28f-7966-4e95-9f94-f431cb56c3b8");

		public unsafe ID3D12Object (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(*LpVtbl))(ptr, guid, pDataSize, pData);
			return ret;
		}

		public readonly unsafe HResult GetPrivateData(ref Guid guid, uint* pDataSize, void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(*LpVtbl))(ptr, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult GetPrivateData(Guid* guid, ref uint pDataSize, void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(*LpVtbl))(ptr, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult GetPrivateData(ref Guid guid, ref uint pDataSize, void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(*LpVtbl))(ptr, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		public readonly unsafe HResult SetPrivateData(Guid* guid, uint dataSize, void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint, void*, HResult>)(LpVtbl[1]))(ptr, guid, dataSize, pData);
			return ret;
		}

		public readonly unsafe HResult SetPrivateData(ref Guid guid, uint dataSize, void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint, void*, HResult>)(LpVtbl[1]))(ptr, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, IUnknown* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(LpVtbl[2]))(ptr, guid, pData);
			return ret;
		}

		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, IUnknown* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(LpVtbl[2]))(ptr, (Guid*)pguid, pData);
				return ret;
			}
		}

		public readonly unsafe HResult SetPrivateDataInterface(Guid* guid, ref IUnknown pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(LpVtbl[2]))(ptr, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		public readonly unsafe HResult SetPrivateDataInterface(ref Guid guid, ref IUnknown pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(LpVtbl[2]))(ptr, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		public readonly unsafe HResult SetName(char* name)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, char*, HResult>)(LpVtbl[3]))(ptr, name);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12Object value)
		{
			return Unsafe.As<ID3D12Object, IUnknown>(ref value);
		}

	}

	[Guid("905db94b-a00c-4140-9df5-2b64ca9ea357")]
	[NativeName("ID3D12DeviceChild")]
	public partial struct ID3D12DeviceChild : IComObject, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("905db94b-a00c-4140-9df5-2b64ca9ea357");

		public unsafe ID3D12DeviceChild (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetDevice(Guid* riid, void** ppvDevice)
		{
			ID3D12DeviceChild* ptr = (ID3D12DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, riid, ppvDevice);
			return ret;
		}

		public readonly unsafe HResult GetDevice(ref Guid riid, void** ppvDevice)
		{
			ID3D12DeviceChild* ptr = (ID3D12DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Object (ID3D12DeviceChild value)
		{
			return Unsafe.As<ID3D12DeviceChild, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12DeviceChild value)
		{
			return Unsafe.As<ID3D12DeviceChild, IUnknown>(ref value);
		}

	}

	[Guid("c54a6b66-72df-4ee8-8be5-a946a1429214")]
	[NativeName("ID3D12RootSignature")]
	public partial struct ID3D12RootSignature : IComObject, IComObject<ID3D12RootSignature>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c54a6b66-72df-4ee8-8be5-a946a1429214");

		public unsafe ID3D12RootSignature (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12RootSignature value)
		{
			return Unsafe.As<ID3D12RootSignature, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12RootSignature value)
		{
			return Unsafe.As<ID3D12RootSignature, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12RootSignature value)
		{
			return Unsafe.As<ID3D12RootSignature, IUnknown>(ref value);
		}

	}

	[Guid("34ab647b-3cc8-46ac-841b-c0965645c046")]
	[NativeName("ID3D12RootSignatureDeserializer")]
	public partial struct ID3D12RootSignatureDeserializer : IComObject, IComObject<ID3D12RootSignatureDeserializer>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("34ab647b-3cc8-46ac-841b-c0965645c046");

		public unsafe ID3D12RootSignatureDeserializer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe D3D12RootSignatureDesc* GetRootSignatureDesc()
		{
			ID3D12RootSignatureDeserializer* ptr = (ID3D12RootSignatureDeserializer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12RootSignatureDesc* ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, D3D12RootSignatureDesc*>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12RootSignatureDeserializer value)
		{
			return Unsafe.As<ID3D12RootSignatureDeserializer, IUnknown>(ref value);
		}

	}

	[NativeName("D3D12_ROOT_SIGNATURE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootSignatureDesc
	{
		[NativeName("NumParameters")]
		public uint NumParameters;
		[NativeName("pParameters")]
		public unsafe D3D12RootParameter* PParameters;
		[NativeName("NumStaticSamplers")]
		public uint NumStaticSamplers;
		[NativeName("pStaticSamplers")]
		public unsafe D3D12StaticSamplerDesc* PStaticSamplers;
		[NativeName("Flags")]
		public D3D12RootSignatureFlags Flags;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12RootParameterUnion
	{
		[NativeName("DescriptorTable")]
		[FieldOffset(0)]
		public D3D12RootDescriptorTable DescriptorTable;
		[NativeName("Constants")]
		[FieldOffset(0)]
		public D3D12RootConstants Constants;
		[NativeName("Descriptor")]
		[FieldOffset(0)]
		public D3D12RootDescriptor Descriptor;


	}

	[NativeName("D3D12_ROOT_PARAMETER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootParameter
	{
		[NativeName("ParameterType")]
		public D3D12RootParameterType ParameterType;
		[NativeName("")]
		public D3D12RootParameterUnion D3D12RootParameterUnion;
		[NativeName("ShaderVisibility")]
		public D3D12ShaderVisibility ShaderVisibility;


	}

	[NativeName("D3D12_ROOT_DESCRIPTOR_TABLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootDescriptorTable
	{
		[NativeName("NumDescriptorRanges")]
		public uint NumDescriptorRanges;
		[NativeName("pDescriptorRanges")]
		public unsafe D3D12DescriptorRange* PDescriptorRanges;


	}

	[NativeName("D3D12_DESCRIPTOR_RANGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DescriptorRange
	{
		[NativeName("RangeType")]
		public D3D12DescriptorRangeType RangeType;
		[NativeName("NumDescriptors")]
		public uint NumDescriptors;
		[NativeName("BaseShaderRegister")]
		public uint BaseShaderRegister;
		[NativeName("RegisterSpace")]
		public uint RegisterSpace;
		[NativeName("OffsetInDescriptorsFromTableStart")]
		public uint OffsetInDescriptorsFromTableStart;


	}

	[NativeName("D3D12_ROOT_CONSTANTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootConstants
	{
		[NativeName("ShaderRegister")]
		public uint ShaderRegister;
		[NativeName("RegisterSpace")]
		public uint RegisterSpace;
		[NativeName("Num32BitValues")]
		public uint Num32BitValues;


	}

	[NativeName("D3D12_ROOT_DESCRIPTOR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootDescriptor
	{
		[NativeName("ShaderRegister")]
		public uint ShaderRegister;
		[NativeName("RegisterSpace")]
		public uint RegisterSpace;


	}

	[NativeName("D3D12_STATIC_SAMPLER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12StaticSamplerDesc
	{
		[NativeName("Filter")]
		public D3D12Filter Filter;
		[NativeName("AddressU")]
		public D3D12TextureAddressMode AddressU;
		[NativeName("AddressV")]
		public D3D12TextureAddressMode AddressV;
		[NativeName("AddressW")]
		public D3D12TextureAddressMode AddressW;
		[NativeName("MipLODBias")]
		public float MipLODBias;
		[NativeName("MaxAnisotropy")]
		public uint MaxAnisotropy;
		[NativeName("ComparisonFunc")]
		public D3D12ComparisonFunc ComparisonFunc;
		[NativeName("BorderColor")]
		public D3D12StaticBorderColor BorderColor;
		[NativeName("MinLOD")]
		public float MinLOD;
		[NativeName("MaxLOD")]
		public float MaxLOD;
		[NativeName("ShaderRegister")]
		public uint ShaderRegister;
		[NativeName("RegisterSpace")]
		public uint RegisterSpace;
		[NativeName("ShaderVisibility")]
		public D3D12ShaderVisibility ShaderVisibility;


	}

	[Guid("7f91ce67-090c-4bb7-b78e-ed8ff2e31da0")]
	[NativeName("ID3D12VersionedRootSignatureDeserializer")]
	public partial struct ID3D12VersionedRootSignatureDeserializer : IComObject, IComObject<ID3D12VersionedRootSignatureDeserializer>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("7f91ce67-090c-4bb7-b78e-ed8ff2e31da0");

		public unsafe ID3D12VersionedRootSignatureDeserializer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetRootSignatureDescAtVersion(D3DRootSignatureVersion convertToVersion, D3D12VersionedRootSignatureDesc** ppDesc)
		{
			ID3D12VersionedRootSignatureDeserializer* ptr = (ID3D12VersionedRootSignatureDeserializer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, D3DRootSignatureVersion, D3D12VersionedRootSignatureDesc**, HResult>)(*LpVtbl))(ptr, convertToVersion, ppDesc);
			return ret;
		}

		public readonly unsafe HResult GetRootSignatureDescAtVersion(D3DRootSignatureVersion convertToVersion, ref D3D12VersionedRootSignatureDesc* ppDesc)
		{
			ID3D12VersionedRootSignatureDeserializer* ptr = (ID3D12VersionedRootSignatureDeserializer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VersionedRootSignatureDesc** pppDesc = &ppDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, D3DRootSignatureVersion, D3D12VersionedRootSignatureDesc**, HResult>)(*LpVtbl))(ptr, convertToVersion, (D3D12VersionedRootSignatureDesc**)pppDesc);
				return ret;
			}
		}

		public readonly unsafe D3D12VersionedRootSignatureDesc* GetUnconvertedRootSignatureDesc()
		{
			ID3D12VersionedRootSignatureDeserializer* ptr = (ID3D12VersionedRootSignatureDeserializer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VersionedRootSignatureDesc* ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, D3D12VersionedRootSignatureDesc*>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12VersionedRootSignatureDeserializer value)
		{
			return Unsafe.As<ID3D12VersionedRootSignatureDeserializer, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12VersionedRootSignatureDescUnion
	{
		[NativeName("Desc_1_0")]
		[FieldOffset(0)]
		public D3D12RootSignatureDesc Desc10;
		[NativeName("Desc_1_1")]
		[FieldOffset(0)]
		public D3D12RootSignatureDesc1 Desc11;


	}

	[NativeName("D3D12_VERSIONED_ROOT_SIGNATURE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VersionedRootSignatureDesc
	{
		[NativeName("Version")]
		public D3DRootSignatureVersion Version;
		[NativeName("")]
		public D3D12VersionedRootSignatureDescUnion D3D12VersionedRootSignatureDescUnion;


	}

	[NativeName("D3D12_ROOT_SIGNATURE_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootSignatureDesc1
	{
		[NativeName("NumParameters")]
		public uint NumParameters;
		[NativeName("pParameters")]
		public unsafe D3D12RootParameter1* PParameters;
		[NativeName("NumStaticSamplers")]
		public uint NumStaticSamplers;
		[NativeName("pStaticSamplers")]
		public unsafe D3D12StaticSamplerDesc* PStaticSamplers;
		[NativeName("Flags")]
		public D3D12RootSignatureFlags Flags;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12RootParameter1Union
	{
		[NativeName("DescriptorTable")]
		[FieldOffset(0)]
		public D3D12RootDescriptorTable1 DescriptorTable;
		[NativeName("Constants")]
		[FieldOffset(0)]
		public D3D12RootConstants Constants;
		[NativeName("Descriptor")]
		[FieldOffset(0)]
		public D3D12RootDescriptor1 Descriptor;


	}

	[NativeName("D3D12_ROOT_PARAMETER1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootParameter1
	{
		[NativeName("ParameterType")]
		public D3D12RootParameterType ParameterType;
		[NativeName("")]
		public D3D12RootParameter1Union D3D12RootParameter1Union;
		[NativeName("ShaderVisibility")]
		public D3D12ShaderVisibility ShaderVisibility;


	}

	[NativeName("D3D12_ROOT_DESCRIPTOR_TABLE1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootDescriptorTable1
	{
		[NativeName("NumDescriptorRanges")]
		public uint NumDescriptorRanges;
		[NativeName("pDescriptorRanges")]
		public unsafe D3D12DescriptorRange1* PDescriptorRanges;


	}

	[NativeName("D3D12_DESCRIPTOR_RANGE1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DescriptorRange1
	{
		[NativeName("RangeType")]
		public D3D12DescriptorRangeType RangeType;
		[NativeName("NumDescriptors")]
		public uint NumDescriptors;
		[NativeName("BaseShaderRegister")]
		public uint BaseShaderRegister;
		[NativeName("RegisterSpace")]
		public uint RegisterSpace;
		[NativeName("Flags")]
		public D3D12DescriptorRangeFlags Flags;
		[NativeName("OffsetInDescriptorsFromTableStart")]
		public uint OffsetInDescriptorsFromTableStart;


	}

	[NativeName("D3D12_ROOT_DESCRIPTOR1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootDescriptor1
	{
		[NativeName("ShaderRegister")]
		public uint ShaderRegister;
		[NativeName("RegisterSpace")]
		public uint RegisterSpace;
		[NativeName("Flags")]
		public D3D12RootDescriptorFlags Flags;


	}

	[Guid("63ee58fb-1268-4835-86da-f008ce62f0d6")]
	[NativeName("ID3D12Pageable")]
	public partial struct ID3D12Pageable : IComObject, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("63ee58fb-1268-4835-86da-f008ce62f0d6");

		public unsafe ID3D12Pageable (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Pageable value)
		{
			return Unsafe.As<ID3D12Pageable, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Pageable value)
		{
			return Unsafe.As<ID3D12Pageable, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Pageable value)
		{
			return Unsafe.As<ID3D12Pageable, IUnknown>(ref value);
		}

	}

	[Guid("6b3b2502-6e51-45b3-90ee-9884265e8df3")]
	[NativeName("ID3D12Heap")]
	public partial struct ID3D12Heap : IComObject, IComObject<ID3D12Heap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6b3b2502-6e51-45b3-90ee-9884265e8df3");

		public unsafe ID3D12Heap (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe D3D12HeapDesc GetDesc()
		{
			ID3D12Heap* ptr = (ID3D12Heap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12HeapDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, D3D12HeapDesc>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Heap value)
		{
			return Unsafe.As<ID3D12Heap, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Heap value)
		{
			return Unsafe.As<ID3D12Heap, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Heap value)
		{
			return Unsafe.As<ID3D12Heap, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Heap value)
		{
			return Unsafe.As<ID3D12Heap, IUnknown>(ref value);
		}

	}

	[NativeName("D3D12_HEAP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12HeapDesc
	{
		[NativeName("SizeInBytes")]
		public ulong SizeInBytes;
		[NativeName("Properties")]
		public D3D12HeapProperties Properties;
		[NativeName("Alignment")]
		public ulong Alignment;
		[NativeName("Flags")]
		public D3D12HeapFlags Flags;


	}

	[NativeName("D3D12_HEAP_PROPERTIES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12HeapProperties
	{
		[NativeName("Type")]
		public D3D12HeapType Type;
		[NativeName("CPUPageProperty")]
		public D3D12CpuPageProperty CPUPageProperty;
		[NativeName("MemoryPoolPreference")]
		public D3D12MemoryPool MemoryPoolPreference;
		[NativeName("CreationNodeMask")]
		public uint CreationNodeMask;
		[NativeName("VisibleNodeMask")]
		public uint VisibleNodeMask;


	}

	[Guid("696442be-a72e-4059-bc79-5b5c98040fad")]
	[NativeName("ID3D12Resource")]
	public partial struct ID3D12Resource : IComObject, IComObject<ID3D12Resource>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("696442be-a72e-4059-bc79-5b5c98040fad");

		public unsafe ID3D12Resource (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Map(uint subresource, D3D12Range* pReadRange, void** ppData)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Range*, void**, HResult>)(*LpVtbl))(ptr, subresource, pReadRange, ppData);
			return ret;
		}

		public readonly unsafe HResult Map(uint subresource, ref D3D12Range pReadRange, void** ppData)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Range* ppReadRange = &pReadRange)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Range*, void**, HResult>)(*LpVtbl))(ptr, subresource, (D3D12Range*)ppReadRange, ppData);
				return ret;
			}
		}

		public readonly unsafe void Unmap(uint subresource, D3D12Range* pWrittenRange)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Range*, void>)(LpVtbl[1]))(ptr, subresource, pWrittenRange);
		}

		public readonly unsafe void Unmap(uint subresource, ref D3D12Range pWrittenRange)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Range* ppWrittenRange = &pWrittenRange)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Range*, void>)(LpVtbl[1]))(ptr, subresource, (D3D12Range*)ppWrittenRange);
			}
		}

		public readonly unsafe D3D12ResourceDesc GetDesc()
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ResourceDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12ResourceDesc>)(LpVtbl[2]))(ptr);
			return ret;
		}

		public readonly unsafe D3D12GpuVirtualAddress GetGPUVirtualAddress()
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12GpuVirtualAddress ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12GpuVirtualAddress>)(LpVtbl[3]))(ptr);
			return ret;
		}

		public readonly unsafe HResult WriteToSubresource(uint dstSubresource, D3D12Box* pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Box*, void*, uint, uint, HResult>)(LpVtbl[4]))(ptr, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			return ret;
		}

		public readonly unsafe HResult WriteToSubresource(uint dstSubresource, ref D3D12Box pDstBox, void* pSrcData, uint srcRowPitch, uint srcDepthPitch)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Box* ppDstBox = &pDstBox)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Box*, void*, uint, uint, HResult>)(LpVtbl[4]))(ptr, dstSubresource, (D3D12Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
				return ret;
			}
		}

		public readonly unsafe HResult ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, uint srcSubresource, D3D12Box* pSrcBox)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, void*, uint, uint, uint, D3D12Box*, HResult>)(LpVtbl[5]))(ptr, pDstData, dstRowPitch, dstDepthPitch, srcSubresource, pSrcBox);
			return ret;
		}

		public readonly unsafe HResult ReadFromSubresource(void* pDstData, uint dstRowPitch, uint dstDepthPitch, uint srcSubresource, ref D3D12Box pSrcBox)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Box* ppSrcBox = &pSrcBox)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, void*, uint, uint, uint, D3D12Box*, HResult>)(LpVtbl[5]))(ptr, pDstData, dstRowPitch, dstDepthPitch, srcSubresource, (D3D12Box*)ppSrcBox);
				return ret;
			}
		}

		public readonly unsafe HResult GetHeapProperties(D3D12HeapProperties* pHeapProperties, D3D12HeapFlags* pHeapFlags)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12HeapProperties*, D3D12HeapFlags*, HResult>)(LpVtbl[6]))(ptr, pHeapProperties, pHeapFlags);
			return ret;
		}

		public readonly unsafe HResult GetHeapProperties(ref D3D12HeapProperties pHeapProperties, D3D12HeapFlags* pHeapFlags)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12HeapProperties*, D3D12HeapFlags*, HResult>)(LpVtbl[6]))(ptr, (D3D12HeapProperties*)ppHeapProperties, pHeapFlags);
				return ret;
			}
		}

		public readonly unsafe HResult GetHeapProperties(D3D12HeapProperties* pHeapProperties, ref D3D12HeapFlags pHeapFlags)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapFlags* ppHeapFlags = &pHeapFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12HeapProperties*, D3D12HeapFlags*, HResult>)(LpVtbl[6]))(ptr, pHeapProperties, (D3D12HeapFlags*)ppHeapFlags);
				return ret;
			}
		}

		public readonly unsafe HResult GetHeapProperties(ref D3D12HeapProperties pHeapProperties, ref D3D12HeapFlags pHeapFlags)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12HeapFlags* ppHeapFlags = &pHeapFlags)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12HeapProperties*, D3D12HeapFlags*, HResult>)(LpVtbl[6]))(ptr, (D3D12HeapProperties*)ppHeapProperties, (D3D12HeapFlags*)ppHeapFlags);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Resource value)
		{
			return Unsafe.As<ID3D12Resource, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Resource value)
		{
			return Unsafe.As<ID3D12Resource, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Resource value)
		{
			return Unsafe.As<ID3D12Resource, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Resource value)
		{
			return Unsafe.As<ID3D12Resource, IUnknown>(ref value);
		}

	}

	[NativeName("D3D12_RANGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Range
	{
		[NativeName("Begin")]
		public nuint Begin;
		[NativeName("End")]
		public nuint End;


	}

	[NativeName("D3D12_RESOURCE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceDesc
	{
		[NativeName("Dimension")]
		public D3D12ResourceDimension Dimension;
		[NativeName("Alignment")]
		public ulong Alignment;
		[NativeName("Width")]
		public ulong Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("DepthOrArraySize")]
		public ushort DepthOrArraySize;
		[NativeName("MipLevels")]
		public ushort MipLevels;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("SampleDesc")]
		public DxgiSampleDesc SampleDesc;
		[NativeName("Layout")]
		public D3D12TextureLayout Layout;
		[NativeName("Flags")]
		public D3D12ResourceFlags Flags;


	}

	[NativeName("D3D12_BOX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Box
	{
		[NativeName("left")]
		public uint Left;
		[NativeName("top")]
		public uint Top;
		[NativeName("front")]
		public uint Front;
		[NativeName("right")]
		public uint Right;
		[NativeName("bottom")]
		public uint Bottom;
		[NativeName("back")]
		public uint Back;


	}

	[Guid("6102dee4-af59-4b09-b999-b44d73f09b24")]
	[NativeName("ID3D12CommandAllocator")]
	public partial struct ID3D12CommandAllocator : IComObject, IComObject<ID3D12CommandAllocator>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6102dee4-af59-4b09-b999-b44d73f09b24");

		public unsafe ID3D12CommandAllocator (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Reset()
		{
			ID3D12CommandAllocator* ptr = (ID3D12CommandAllocator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, HResult>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12CommandAllocator value)
		{
			return Unsafe.As<ID3D12CommandAllocator, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12CommandAllocator value)
		{
			return Unsafe.As<ID3D12CommandAllocator, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12CommandAllocator value)
		{
			return Unsafe.As<ID3D12CommandAllocator, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12CommandAllocator value)
		{
			return Unsafe.As<ID3D12CommandAllocator, IUnknown>(ref value);
		}

	}

	[Guid("0a753dcf-c4d8-4b91-adf6-be5a60d95a76")]
	[NativeName("ID3D12Fence")]
	public partial struct ID3D12Fence : IComObject, IComObject<ID3D12Fence>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0a753dcf-c4d8-4b91-adf6-be5a60d95a76");

		public unsafe ID3D12Fence (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe ulong GetCompletedValue()
		{
			ID3D12Fence* ptr = (ID3D12Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong>)(*LpVtbl))(ptr);
			return ret;
		}

		public readonly unsafe HResult SetEventOnCompletion(ulong value, nint hEvent)
		{
			ID3D12Fence* ptr = (ID3D12Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong, nint, HResult>)(LpVtbl[1]))(ptr, value, hEvent);
			return ret;
		}

		public readonly unsafe HResult Signal(ulong value)
		{
			ID3D12Fence* ptr = (ID3D12Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong, HResult>)(LpVtbl[2]))(ptr, value);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Fence value)
		{
			return Unsafe.As<ID3D12Fence, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Fence value)
		{
			return Unsafe.As<ID3D12Fence, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Fence value)
		{
			return Unsafe.As<ID3D12Fence, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Fence value)
		{
			return Unsafe.As<ID3D12Fence, IUnknown>(ref value);
		}

	}

	[Guid("433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a")]
	[NativeName("ID3D12Fence1")]
	public partial struct ID3D12Fence1 : IComObject, IComObject<ID3D12Fence1>, IComObject<ID3D12Fence>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a");

		public unsafe ID3D12Fence1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe D3D12FenceFlags GetCreationFlags()
		{
			ID3D12Fence1* ptr = (ID3D12Fence1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12FenceFlags ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, D3D12FenceFlags>)(LpVtbl[3]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Fence (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, ID3D12Fence>(ref value);
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, IUnknown>(ref value);
		}

	}

	[Guid("765a30f3-f624-4c6f-a828-ace948622445")]
	[NativeName("ID3D12PipelineState")]
	public partial struct ID3D12PipelineState : IComObject, IComObject<ID3D12PipelineState>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("765a30f3-f624-4c6f-a828-ace948622445");

		public unsafe ID3D12PipelineState (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult GetCachedBlob(ID3D10Blob** ppBlob)
		{
			ID3D12PipelineState* ptr = (ID3D12PipelineState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, ID3D10Blob**, HResult>)(*LpVtbl))(ptr, ppBlob);
			return ret;
		}

		public readonly unsafe HResult GetCachedBlob(ref ID3D10Blob* ppBlob)
		{
			ID3D12PipelineState* ptr = (ID3D12PipelineState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppBlob = &ppBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, ID3D10Blob**, HResult>)(*LpVtbl))(ptr, (ID3D10Blob**)pppBlob);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12PipelineState value)
		{
			return Unsafe.As<ID3D12PipelineState, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12PipelineState value)
		{
			return Unsafe.As<ID3D12PipelineState, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12PipelineState value)
		{
			return Unsafe.As<ID3D12PipelineState, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12PipelineState value)
		{
			return Unsafe.As<ID3D12PipelineState, IUnknown>(ref value);
		}

	}

	[NativeName("ID3D10Blob")]
	public partial struct ID3D10Blob : IComObject, IComObject<ID3D10Blob>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe ID3D10Blob (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void* GetBufferPointer()
		{
			ID3D10Blob* ptr = (ID3D10Blob*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			void* ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, void*>)(*LpVtbl))(ptr);
			return ret;
		}

		public readonly unsafe nuint GetBufferSize()
		{
			ID3D10Blob* ptr = (ID3D10Blob*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			nuint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, nuint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D10Blob value)
		{
			return Unsafe.As<ID3D10Blob, IUnknown>(ref value);
		}

	}

	[Guid("8efb471d-616c-4f49-90f7-127bb763fa51")]
	[NativeName("ID3D12DescriptorHeap")]
	public partial struct ID3D12DescriptorHeap : IComObject, IComObject<ID3D12DescriptorHeap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8efb471d-616c-4f49-90f7-127bb763fa51");

		public unsafe ID3D12DescriptorHeap (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe D3D12DescriptorHeapDesc GetDesc()
		{
			ID3D12DescriptorHeap* ptr = (ID3D12DescriptorHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12DescriptorHeapDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, D3D12DescriptorHeapDesc>)(*LpVtbl))(ptr);
			return ret;
		}

		public readonly unsafe D3D12CpuDescriptorHandle GetCPUDescriptorHandleForHeapStart()
		{
			ID3D12DescriptorHeap* ptr = (ID3D12DescriptorHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12CpuDescriptorHandle ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, D3D12CpuDescriptorHandle>)(LpVtbl[1]))(ptr);
			return ret;
		}

		public readonly unsafe D3D12GpuDescriptorHandle GetGPUDescriptorHandleForHeapStart()
		{
			ID3D12DescriptorHeap* ptr = (ID3D12DescriptorHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12GpuDescriptorHandle ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, D3D12GpuDescriptorHandle>)(LpVtbl[2]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12DescriptorHeap value)
		{
			return Unsafe.As<ID3D12DescriptorHeap, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12DescriptorHeap value)
		{
			return Unsafe.As<ID3D12DescriptorHeap, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12DescriptorHeap value)
		{
			return Unsafe.As<ID3D12DescriptorHeap, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12DescriptorHeap value)
		{
			return Unsafe.As<ID3D12DescriptorHeap, IUnknown>(ref value);
		}

	}

	[NativeName("D3D12_DESCRIPTOR_HEAP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DescriptorHeapDesc
	{
		[NativeName("Type")]
		public D3D12DescriptorHeapType Type;
		[NativeName("NumDescriptors")]
		public uint NumDescriptors;
		[NativeName("Flags")]
		public D3D12DescriptorHeapFlags Flags;
		[NativeName("NodeMask")]
		public uint NodeMask;


	}

	[NativeName("D3D12_CPU_DESCRIPTOR_HANDLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12CpuDescriptorHandle
	{
		[NativeName("ptr")]
		public nuint Ptr;


	}

	[NativeName("D3D12_GPU_DESCRIPTOR_HANDLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12GpuDescriptorHandle
	{
		[NativeName("ptr")]
		public ulong Ptr;


	}

	[Guid("0d9658ae-ed45-469e-a61d-970ec583cab4")]
	[NativeName("ID3D12QueryHeap")]
	public partial struct ID3D12QueryHeap : IComObject, IComObject<ID3D12QueryHeap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0d9658ae-ed45-469e-a61d-970ec583cab4");

		public unsafe ID3D12QueryHeap (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12QueryHeap value)
		{
			return Unsafe.As<ID3D12QueryHeap, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12QueryHeap value)
		{
			return Unsafe.As<ID3D12QueryHeap, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12QueryHeap value)
		{
			return Unsafe.As<ID3D12QueryHeap, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12QueryHeap value)
		{
			return Unsafe.As<ID3D12QueryHeap, IUnknown>(ref value);
		}

	}

	[Guid("c36a797c-ec80-4f0a-8985-a7b2475082d1")]
	[NativeName("ID3D12CommandSignature")]
	public partial struct ID3D12CommandSignature : IComObject, IComObject<ID3D12CommandSignature>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c36a797c-ec80-4f0a-8985-a7b2475082d1");

		public unsafe ID3D12CommandSignature (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12CommandSignature value)
		{
			return Unsafe.As<ID3D12CommandSignature, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12CommandSignature value)
		{
			return Unsafe.As<ID3D12CommandSignature, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12CommandSignature value)
		{
			return Unsafe.As<ID3D12CommandSignature, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12CommandSignature value)
		{
			return Unsafe.As<ID3D12CommandSignature, IUnknown>(ref value);
		}

	}

	[Guid("7116d91c-e7e4-47ce-b8c6-ec8168f437e5")]
	[NativeName("ID3D12CommandList")]
	public partial struct ID3D12CommandList : IComObject, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("7116d91c-e7e4-47ce-b8c6-ec8168f437e5");

		public unsafe ID3D12CommandList (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe D3D12CommandListType GetType()
		{
			ID3D12CommandList* ptr = (ID3D12CommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12CommandListType ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandList*, D3D12CommandListType>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12CommandList value)
		{
			return Unsafe.As<ID3D12CommandList, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12CommandList value)
		{
			return Unsafe.As<ID3D12CommandList, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12CommandList value)
		{
			return Unsafe.As<ID3D12CommandList, IUnknown>(ref value);
		}

	}

	[Guid("5b160d0f-ac1b-4185-8ba8-b3ae42a5a455")]
	[NativeName("ID3D12GraphicsCommandList")]
	public partial struct ID3D12GraphicsCommandList : IComObject, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("5b160d0f-ac1b-4185-8ba8-b3ae42a5a455");

		public unsafe ID3D12GraphicsCommandList (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Close()
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, HResult>)(LpVtbl[1]))(ptr);
			return ret;
		}

		public readonly unsafe HResult Reset(ID3D12CommandAllocator* pAllocator, ID3D12PipelineState* pInitialState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*, HResult>)(LpVtbl[2]))(ptr, pAllocator, pInitialState);
			return ret;
		}

		public readonly unsafe HResult Reset(ref ID3D12CommandAllocator pAllocator, ID3D12PipelineState* pInitialState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppAllocator = &pAllocator)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*, HResult>)(LpVtbl[2]))(ptr, (ID3D12CommandAllocator*)ppAllocator, pInitialState);
				return ret;
			}
		}

		public readonly unsafe HResult Reset(ID3D12CommandAllocator* pAllocator, ref ID3D12PipelineState pInitialState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*, HResult>)(LpVtbl[2]))(ptr, pAllocator, (ID3D12PipelineState*)ppInitialState);
				return ret;
			}
		}

		public readonly unsafe HResult Reset(ref ID3D12CommandAllocator pAllocator, ref ID3D12PipelineState pInitialState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppAllocator = &pAllocator)
			{
				fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*, HResult>)(LpVtbl[2]))(ptr, (ID3D12CommandAllocator*)ppAllocator, (ID3D12PipelineState*)ppInitialState);
					return ret;
				}
			}
		}

		public readonly unsafe void ClearState(ID3D12PipelineState* pPipelineState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(LpVtbl[3]))(ptr, pPipelineState);
		}

		public readonly unsafe void ClearState(ref ID3D12PipelineState pPipelineState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppPipelineState = &pPipelineState)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(LpVtbl[3]))(ptr, (ID3D12PipelineState*)ppPipelineState);
			}
		}

		public readonly unsafe void DrawInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation, uint startInstanceLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, uint, void>)(LpVtbl[4]))(ptr, vertexCountPerInstance, instanceCount, startVertexLocation, startInstanceLocation);
		}

		public readonly unsafe void DrawIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation, int baseVertexLocation, uint startInstanceLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, int, uint, void>)(LpVtbl[5]))(ptr, indexCountPerInstance, instanceCount, startIndexLocation, baseVertexLocation, startInstanceLocation);
		}

		public readonly unsafe void Dispatch(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>)(LpVtbl[6]))(ptr, threadGroupCountX, threadGroupCountY, threadGroupCountZ);
		}

		public readonly unsafe void CopyBufferRegion(ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, ulong numBytes)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(LpVtbl[7]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, numBytes);
		}

		public readonly unsafe void CopyBufferRegion(ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, ulong numBytes)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(LpVtbl[7]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, numBytes);
			}
		}

		public readonly unsafe void CopyBufferRegion(ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, ulong numBytes)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(LpVtbl[7]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, numBytes);
			}
		}

		public readonly unsafe void CopyBufferRegion(ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, ulong numBytes)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(LpVtbl[7]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, numBytes);
				}
			}
		}

		public readonly unsafe void CopyTextureRegion(D3D12TextureCopyLocation* pDst, uint dstX, uint dstY, uint dstZ, D3D12TextureCopyLocation* pSrc, D3D12Box* pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, pDst, dstX, dstY, dstZ, pSrc, pSrcBox);
		}

		public readonly unsafe void CopyTextureRegion(ref D3D12TextureCopyLocation pDst, uint dstX, uint dstY, uint dstZ, D3D12TextureCopyLocation* pSrc, D3D12Box* pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppDst = &pDst)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, (D3D12TextureCopyLocation*)ppDst, dstX, dstY, dstZ, pSrc, pSrcBox);
			}
		}

		public readonly unsafe void CopyTextureRegion(D3D12TextureCopyLocation* pDst, uint dstX, uint dstY, uint dstZ, ref D3D12TextureCopyLocation pSrc, D3D12Box* pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppSrc = &pSrc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, pDst, dstX, dstY, dstZ, (D3D12TextureCopyLocation*)ppSrc, pSrcBox);
			}
		}

		public readonly unsafe void CopyTextureRegion(ref D3D12TextureCopyLocation pDst, uint dstX, uint dstY, uint dstZ, ref D3D12TextureCopyLocation pSrc, D3D12Box* pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppDst = &pDst)
			{
				fixed (D3D12TextureCopyLocation* ppSrc = &pSrc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, (D3D12TextureCopyLocation*)ppDst, dstX, dstY, dstZ, (D3D12TextureCopyLocation*)ppSrc, pSrcBox);
				}
			}
		}

		public readonly unsafe void CopyTextureRegion(D3D12TextureCopyLocation* pDst, uint dstX, uint dstY, uint dstZ, D3D12TextureCopyLocation* pSrc, ref D3D12Box pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Box* ppSrcBox = &pSrcBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, pDst, dstX, dstY, dstZ, pSrc, (D3D12Box*)ppSrcBox);
			}
		}

		public readonly unsafe void CopyTextureRegion(ref D3D12TextureCopyLocation pDst, uint dstX, uint dstY, uint dstZ, D3D12TextureCopyLocation* pSrc, ref D3D12Box pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppDst = &pDst)
			{
				fixed (D3D12Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, (D3D12TextureCopyLocation*)ppDst, dstX, dstY, dstZ, pSrc, (D3D12Box*)ppSrcBox);
				}
			}
		}

		public readonly unsafe void CopyTextureRegion(D3D12TextureCopyLocation* pDst, uint dstX, uint dstY, uint dstZ, ref D3D12TextureCopyLocation pSrc, ref D3D12Box pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppSrc = &pSrc)
			{
				fixed (D3D12Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, pDst, dstX, dstY, dstZ, (D3D12TextureCopyLocation*)ppSrc, (D3D12Box*)ppSrcBox);
				}
			}
		}

		public readonly unsafe void CopyTextureRegion(ref D3D12TextureCopyLocation pDst, uint dstX, uint dstY, uint dstZ, ref D3D12TextureCopyLocation pSrc, ref D3D12Box pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppDst = &pDst)
			{
				fixed (D3D12TextureCopyLocation* ppSrc = &pSrc)
				{
					fixed (D3D12Box* ppSrcBox = &pSrcBox)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, (D3D12TextureCopyLocation*)ppDst, dstX, dstY, dstZ, (D3D12TextureCopyLocation*)ppSrc, (D3D12Box*)ppSrcBox);
					}
				}
			}
		}

		public readonly unsafe void CopyResource(ID3D12Resource* pDstResource, ID3D12Resource* pSrcResource)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*, void>)(LpVtbl[9]))(ptr, pDstResource, pSrcResource);
		}

		public readonly unsafe void CopyResource(ref ID3D12Resource pDstResource, ID3D12Resource* pSrcResource)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pSrcResource);
			}
		}

		public readonly unsafe void CopyResource(ID3D12Resource* pDstResource, ref ID3D12Resource pSrcResource)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*, void>)(LpVtbl[9]))(ptr, pDstResource, (ID3D12Resource*)ppSrcResource);
			}
		}

		public readonly unsafe void CopyResource(ref ID3D12Resource pDstResource, ref ID3D12Resource pSrcResource)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (ID3D12Resource*)ppSrcResource);
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D12Resource* pTiledResource, D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, D3D12TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
		}

		public readonly unsafe void CopyTiles(ref ID3D12Resource pTiledResource, D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, D3D12TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		public readonly unsafe void CopyTiles(ID3D12Resource* pTiledResource, ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, D3D12TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D12Resource pTiledResource, ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, D3D12TileRegionSize* pTileRegionSize, ID3D12Resource* pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D12Resource* pTiledResource, D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, ref D3D12TileRegionSize pTileRegionSize, ID3D12Resource* pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, pTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D12Resource pTiledResource, D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, ref D3D12TileRegionSize pTileRegionSize, ID3D12Resource* pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, pTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D12Resource* pTiledResource, ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, ref D3D12TileRegionSize pTileRegionSize, ID3D12Resource* pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D12Resource pTiledResource, ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, ref D3D12TileRegionSize pTileRegionSize, ID3D12Resource* pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D12Resource* pTiledResource, D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, D3D12TileRegionSize* pTileRegionSize, ref ID3D12Resource pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppBuffer = &pBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D12Resource pTiledResource, D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, D3D12TileRegionSize* pTileRegionSize, ref ID3D12Resource pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D12Resource* ppBuffer = &pBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, pTileRegionStartCoordinate, pTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D12Resource* pTiledResource, ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, D3D12TileRegionSize* pTileRegionSize, ref ID3D12Resource pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppBuffer = &pBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D12Resource pTiledResource, ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, D3D12TileRegionSize* pTileRegionSize, ref ID3D12Resource pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppBuffer = &pBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D12Resource* pTiledResource, D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, ref D3D12TileRegionSize pTileRegionSize, ref ID3D12Resource pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
			{
				fixed (ID3D12Resource* ppBuffer = &pBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, pTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D12Resource pTiledResource, D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, ref D3D12TileRegionSize pTileRegionSize, ref ID3D12Resource pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					fixed (ID3D12Resource* ppBuffer = &pBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, pTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTiles(ID3D12Resource* pTiledResource, ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, ref D3D12TileRegionSize pTileRegionSize, ref ID3D12Resource pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					fixed (ID3D12Resource* ppBuffer = &pBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTiles(ref ID3D12Resource pTiledResource, ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, ref D3D12TileRegionSize pTileRegionSize, ref ID3D12Resource pBuffer, ulong bufferStartOffsetInBytes, D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						fixed (ID3D12Resource* ppBuffer = &pBuffer)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void ResolveSubresource(ID3D12Resource* pDstResource, uint dstSubresource, ID3D12Resource* pSrcResource, uint srcSubresource, DxgiFormat format)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, uint, ID3D12Resource*, uint, DxgiFormat, void>)(LpVtbl[11]))(ptr, pDstResource, dstSubresource, pSrcResource, srcSubresource, format);
		}

		public readonly unsafe void ResolveSubresource(ref ID3D12Resource pDstResource, uint dstSubresource, ID3D12Resource* pSrcResource, uint srcSubresource, DxgiFormat format)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, uint, ID3D12Resource*, uint, DxgiFormat, void>)(LpVtbl[11]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, pSrcResource, srcSubresource, format);
			}
		}

		public readonly unsafe void ResolveSubresource(ID3D12Resource* pDstResource, uint dstSubresource, ref ID3D12Resource pSrcResource, uint srcSubresource, DxgiFormat format)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, uint, ID3D12Resource*, uint, DxgiFormat, void>)(LpVtbl[11]))(ptr, pDstResource, dstSubresource, (ID3D12Resource*)ppSrcResource, srcSubresource, format);
			}
		}

		public readonly unsafe void ResolveSubresource(ref ID3D12Resource pDstResource, uint dstSubresource, ref ID3D12Resource pSrcResource, uint srcSubresource, DxgiFormat format)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, uint, ID3D12Resource*, uint, DxgiFormat, void>)(LpVtbl[11]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, (ID3D12Resource*)ppSrcResource, srcSubresource, format);
				}
			}
		}

		public readonly unsafe void IASetPrimitiveTopology(D3D12PrimitiveTopology primitiveTopology)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12PrimitiveTopology, void>)(LpVtbl[12]))(ptr, primitiveTopology);
		}

		public readonly unsafe void RSSetViewports(uint numViewports, D3D12Viewport* pViewports)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12Viewport*, void>)(LpVtbl[13]))(ptr, numViewports, pViewports);
		}

		public readonly unsafe void RSSetViewports(uint numViewports, ref D3D12Viewport pViewports)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Viewport* ppViewports = &pViewports)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12Viewport*, void>)(LpVtbl[13]))(ptr, numViewports, (D3D12Viewport*)ppViewports);
			}
		}

		public readonly unsafe void RSSetScissorRects(uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12Rect*, void>)(LpVtbl[14]))(ptr, numRects, pRects);
		}

		public readonly unsafe void RSSetScissorRects(uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Rect* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12Rect*, void>)(LpVtbl[14]))(ptr, numRects, (D3D12Rect*)ppRects);
			}
		}

		public readonly unsafe void OMSetBlendFactor(float* blendFactor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, float*, void>)(LpVtbl[15]))(ptr, blendFactor);
		}

		public readonly unsafe void OMSetBlendFactor(ref float blendFactor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pblendFactor = &blendFactor)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, float*, void>)(LpVtbl[15]))(ptr, (float*)pblendFactor);
			}
		}

		public readonly unsafe void OMSetStencilRef(uint stencilRef)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void>)(LpVtbl[16]))(ptr, stencilRef);
		}

		public readonly unsafe void SetPipelineState(ID3D12PipelineState* pPipelineState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(LpVtbl[17]))(ptr, pPipelineState);
		}

		public readonly unsafe void SetPipelineState(ref ID3D12PipelineState pPipelineState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppPipelineState = &pPipelineState)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(LpVtbl[17]))(ptr, (ID3D12PipelineState*)ppPipelineState);
			}
		}

		public readonly unsafe void ResourceBarrier(uint numBarriers, D3D12ResourceBarrier* pBarriers)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12ResourceBarrier*, void>)(LpVtbl[18]))(ptr, numBarriers, pBarriers);
		}

		public readonly unsafe void ResourceBarrier(uint numBarriers, ref D3D12ResourceBarrier pBarriers)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceBarrier* ppBarriers = &pBarriers)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12ResourceBarrier*, void>)(LpVtbl[18]))(ptr, numBarriers, (D3D12ResourceBarrier*)ppBarriers);
			}
		}

		public readonly unsafe void ExecuteBundle(ID3D12GraphicsCommandList* pCommandList)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12GraphicsCommandList*, void>)(LpVtbl[19]))(ptr, pCommandList);
		}

		public readonly unsafe void ExecuteBundle(ref ID3D12GraphicsCommandList pCommandList)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12GraphicsCommandList* ppCommandList = &pCommandList)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12GraphicsCommandList*, void>)(LpVtbl[19]))(ptr, (ID3D12GraphicsCommandList*)ppCommandList);
			}
		}

		public readonly unsafe void SetDescriptorHeaps(uint numDescriptorHeaps, ID3D12DescriptorHeap*** ppDescriptorHeaps)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ID3D12DescriptorHeap***, void>)(LpVtbl[20]))(ptr, numDescriptorHeaps, ppDescriptorHeaps);
		}

		public readonly unsafe void SetDescriptorHeaps(uint numDescriptorHeaps, ref ID3D12DescriptorHeap* ppDescriptorHeaps)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DescriptorHeap** pppDescriptorHeaps = &ppDescriptorHeaps)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ID3D12DescriptorHeap***, void>)(LpVtbl[20]))(ptr, numDescriptorHeaps, (ID3D12DescriptorHeap***)pppDescriptorHeaps);
			}
		}

		public readonly unsafe void SetComputeRootSignature(ID3D12RootSignature* pRootSignature)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(LpVtbl[21]))(ptr, pRootSignature);
		}

		public readonly unsafe void SetComputeRootSignature(ref ID3D12RootSignature pRootSignature)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(LpVtbl[21]))(ptr, (ID3D12RootSignature*)ppRootSignature);
			}
		}

		public readonly unsafe void SetGraphicsRootSignature(ID3D12RootSignature* pRootSignature)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(LpVtbl[22]))(ptr, pRootSignature);
		}

		public readonly unsafe void SetGraphicsRootSignature(ref ID3D12RootSignature pRootSignature)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(LpVtbl[22]))(ptr, (ID3D12RootSignature*)ppRootSignature);
			}
		}

		public readonly unsafe void SetComputeRootDescriptorTable(uint rootParameterIndex, D3D12GpuDescriptorHandle baseDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuDescriptorHandle, void>)(LpVtbl[23]))(ptr, rootParameterIndex, baseDescriptor);
		}

		public readonly unsafe void SetGraphicsRootDescriptorTable(uint rootParameterIndex, D3D12GpuDescriptorHandle baseDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuDescriptorHandle, void>)(LpVtbl[24]))(ptr, rootParameterIndex, baseDescriptor);
		}

		public readonly unsafe void SetComputeRoot32BitConstant(uint rootParameterIndex, uint srcData, uint destOffsetIn32BitValues)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>)(LpVtbl[25]))(ptr, rootParameterIndex, srcData, destOffsetIn32BitValues);
		}

		public readonly unsafe void SetGraphicsRoot32BitConstant(uint rootParameterIndex, uint srcData, uint destOffsetIn32BitValues)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>)(LpVtbl[26]))(ptr, rootParameterIndex, srcData, destOffsetIn32BitValues);
		}

		public readonly unsafe void SetComputeRoot32BitConstants(uint rootParameterIndex, uint num32BitValuesToSet, void* pSrcData, uint destOffsetIn32BitValues)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, void*, uint, void>)(LpVtbl[27]))(ptr, rootParameterIndex, num32BitValuesToSet, pSrcData, destOffsetIn32BitValues);
		}

		public readonly unsafe void SetGraphicsRoot32BitConstants(uint rootParameterIndex, uint num32BitValuesToSet, void* pSrcData, uint destOffsetIn32BitValues)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, void*, uint, void>)(LpVtbl[28]))(ptr, rootParameterIndex, num32BitValuesToSet, pSrcData, destOffsetIn32BitValues);
		}

		public readonly unsafe void SetComputeRootConstantBufferView(uint rootParameterIndex, D3D12GpuVirtualAddress bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuVirtualAddress, void>)(LpVtbl[29]))(ptr, rootParameterIndex, bufferLocation);
		}

		public readonly unsafe void SetGraphicsRootConstantBufferView(uint rootParameterIndex, D3D12GpuVirtualAddress bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuVirtualAddress, void>)(LpVtbl[30]))(ptr, rootParameterIndex, bufferLocation);
		}

		public readonly unsafe void SetComputeRootShaderResourceView(uint rootParameterIndex, D3D12GpuVirtualAddress bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuVirtualAddress, void>)(LpVtbl[31]))(ptr, rootParameterIndex, bufferLocation);
		}

		public readonly unsafe void SetGraphicsRootShaderResourceView(uint rootParameterIndex, D3D12GpuVirtualAddress bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuVirtualAddress, void>)(LpVtbl[32]))(ptr, rootParameterIndex, bufferLocation);
		}

		public readonly unsafe void SetComputeRootUnorderedAccessView(uint rootParameterIndex, D3D12GpuVirtualAddress bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuVirtualAddress, void>)(LpVtbl[33]))(ptr, rootParameterIndex, bufferLocation);
		}

		public readonly unsafe void SetGraphicsRootUnorderedAccessView(uint rootParameterIndex, D3D12GpuVirtualAddress bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuVirtualAddress, void>)(LpVtbl[34]))(ptr, rootParameterIndex, bufferLocation);
		}

		public readonly unsafe void IASetIndexBuffer(D3D12IndexBufferView* pView)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12IndexBufferView*, void>)(LpVtbl[35]))(ptr, pView);
		}

		public readonly unsafe void IASetIndexBuffer(ref D3D12IndexBufferView pView)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12IndexBufferView* ppView = &pView)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12IndexBufferView*, void>)(LpVtbl[35]))(ptr, (D3D12IndexBufferView*)ppView);
			}
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numViews, D3D12VertexBufferView* pViews)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, D3D12VertexBufferView*, void>)(LpVtbl[36]))(ptr, startSlot, numViews, pViews);
		}

		public readonly unsafe void IASetVertexBuffers(uint startSlot, uint numViews, ref D3D12VertexBufferView pViews)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VertexBufferView* ppViews = &pViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, D3D12VertexBufferView*, void>)(LpVtbl[36]))(ptr, startSlot, numViews, (D3D12VertexBufferView*)ppViews);
			}
		}

		public readonly unsafe void SOSetTargets(uint startSlot, uint numViews, D3D12StreamOutputBufferView* pViews)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, D3D12StreamOutputBufferView*, void>)(LpVtbl[37]))(ptr, startSlot, numViews, pViews);
		}

		public readonly unsafe void SOSetTargets(uint startSlot, uint numViews, ref D3D12StreamOutputBufferView pViews)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12StreamOutputBufferView* ppViews = &pViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, D3D12StreamOutputBufferView*, void>)(LpVtbl[37]))(ptr, startSlot, numViews, (D3D12StreamOutputBufferView*)ppViews);
			}
		}

		public readonly unsafe void OMSetRenderTargets(uint numRenderTargetDescriptors, D3D12CpuDescriptorHandle* pRenderTargetDescriptors, int rTsSingleHandleToDescriptorRange, D3D12CpuDescriptorHandle* pDepthStencilDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12CpuDescriptorHandle*, int, D3D12CpuDescriptorHandle*, void>)(LpVtbl[38]))(ptr, numRenderTargetDescriptors, pRenderTargetDescriptors, rTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
		}

		public readonly unsafe void OMSetRenderTargets(uint numRenderTargetDescriptors, ref D3D12CpuDescriptorHandle pRenderTargetDescriptors, int rTsSingleHandleToDescriptorRange, D3D12CpuDescriptorHandle* pDepthStencilDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppRenderTargetDescriptors = &pRenderTargetDescriptors)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12CpuDescriptorHandle*, int, D3D12CpuDescriptorHandle*, void>)(LpVtbl[38]))(ptr, numRenderTargetDescriptors, (D3D12CpuDescriptorHandle*)ppRenderTargetDescriptors, rTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
			}
		}

		public readonly unsafe void OMSetRenderTargets(uint numRenderTargetDescriptors, D3D12CpuDescriptorHandle* pRenderTargetDescriptors, int rTsSingleHandleToDescriptorRange, ref D3D12CpuDescriptorHandle pDepthStencilDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDepthStencilDescriptor = &pDepthStencilDescriptor)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12CpuDescriptorHandle*, int, D3D12CpuDescriptorHandle*, void>)(LpVtbl[38]))(ptr, numRenderTargetDescriptors, pRenderTargetDescriptors, rTsSingleHandleToDescriptorRange, (D3D12CpuDescriptorHandle*)ppDepthStencilDescriptor);
			}
		}

		public readonly unsafe void OMSetRenderTargets(uint numRenderTargetDescriptors, ref D3D12CpuDescriptorHandle pRenderTargetDescriptors, int rTsSingleHandleToDescriptorRange, ref D3D12CpuDescriptorHandle pDepthStencilDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppRenderTargetDescriptors = &pRenderTargetDescriptors)
			{
				fixed (D3D12CpuDescriptorHandle* ppDepthStencilDescriptor = &pDepthStencilDescriptor)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12CpuDescriptorHandle*, int, D3D12CpuDescriptorHandle*, void>)(LpVtbl[38]))(ptr, numRenderTargetDescriptors, (D3D12CpuDescriptorHandle*)ppRenderTargetDescriptors, rTsSingleHandleToDescriptorRange, (D3D12CpuDescriptorHandle*)ppDepthStencilDescriptor);
				}
			}
		}

		public readonly unsafe void ClearDepthStencilView(D3D12CpuDescriptorHandle depthStencilView, D3D12ClearFlags clearFlags, float depth, byte stencil, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, D3D12ClearFlags, float, byte, uint, D3D12Rect*, void>)(LpVtbl[39]))(ptr, depthStencilView, clearFlags, depth, stencil, numRects, pRects);
		}

		public readonly unsafe void ClearDepthStencilView(D3D12CpuDescriptorHandle depthStencilView, D3D12ClearFlags clearFlags, float depth, byte stencil, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Rect* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, D3D12ClearFlags, float, byte, uint, D3D12Rect*, void>)(LpVtbl[39]))(ptr, depthStencilView, clearFlags, depth, stencil, numRects, (D3D12Rect*)ppRects);
			}
		}

		public readonly unsafe void ClearRenderTargetView(D3D12CpuDescriptorHandle renderTargetView, float* colorRGBA, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, float*, uint, D3D12Rect*, void>)(LpVtbl[40]))(ptr, renderTargetView, colorRGBA, numRects, pRects);
		}

		public readonly unsafe void ClearRenderTargetView(D3D12CpuDescriptorHandle renderTargetView, ref float colorRGBA, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pcolorRGBA = &colorRGBA)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, float*, uint, D3D12Rect*, void>)(LpVtbl[40]))(ptr, renderTargetView, (float*)pcolorRGBA, numRects, pRects);
			}
		}

		public readonly unsafe void ClearRenderTargetView(D3D12CpuDescriptorHandle renderTargetView, float* colorRGBA, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Rect* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, float*, uint, D3D12Rect*, void>)(LpVtbl[40]))(ptr, renderTargetView, colorRGBA, numRects, (D3D12Rect*)ppRects);
			}
		}

		public readonly unsafe void ClearRenderTargetView(D3D12CpuDescriptorHandle renderTargetView, ref float colorRGBA, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pcolorRGBA = &colorRGBA)
			{
				fixed (D3D12Rect* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, float*, uint, D3D12Rect*, void>)(LpVtbl[40]))(ptr, renderTargetView, (float*)pcolorRGBA, numRects, (D3D12Rect*)ppRects);
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ID3D12Resource* pResource, uint* values, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, D3D12Rect*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, values, numRects, pRects);
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ref ID3D12Resource pResource, uint* values, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, D3D12Rect*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, values, numRects, pRects);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ID3D12Resource* pResource, ref uint values, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* pvalues = &values)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, D3D12Rect*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, (uint*)pvalues, numRects, pRects);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ref ID3D12Resource pResource, ref uint values, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* pvalues = &values)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, D3D12Rect*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, (uint*)pvalues, numRects, pRects);
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ID3D12Resource* pResource, uint* values, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Rect* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, D3D12Rect*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, values, numRects, (D3D12Rect*)ppRects);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ref ID3D12Resource pResource, uint* values, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12Rect* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, D3D12Rect*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, values, numRects, (D3D12Rect*)ppRects);
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ID3D12Resource* pResource, ref uint values, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* pvalues = &values)
			{
				fixed (D3D12Rect* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, D3D12Rect*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, (uint*)pvalues, numRects, (D3D12Rect*)ppRects);
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewUint(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ref ID3D12Resource pResource, ref uint values, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* pvalues = &values)
				{
					fixed (D3D12Rect* ppRects = &pRects)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, D3D12Rect*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, (uint*)pvalues, numRects, (D3D12Rect*)ppRects);
					}
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ID3D12Resource* pResource, float* values, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, D3D12Rect*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, values, numRects, pRects);
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ref ID3D12Resource pResource, float* values, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, D3D12Rect*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, values, numRects, pRects);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ID3D12Resource* pResource, ref float values, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pvalues = &values)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, D3D12Rect*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, (float*)pvalues, numRects, pRects);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ref ID3D12Resource pResource, ref float values, uint numRects, D3D12Rect* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (float* pvalues = &values)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, D3D12Rect*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, (float*)pvalues, numRects, pRects);
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ID3D12Resource* pResource, float* values, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Rect* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, D3D12Rect*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, values, numRects, (D3D12Rect*)ppRects);
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ref ID3D12Resource pResource, float* values, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12Rect* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, D3D12Rect*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, values, numRects, (D3D12Rect*)ppRects);
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ID3D12Resource* pResource, ref float values, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pvalues = &values)
			{
				fixed (D3D12Rect* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, D3D12Rect*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, (float*)pvalues, numRects, (D3D12Rect*)ppRects);
				}
			}
		}

		public readonly unsafe void ClearUnorderedAccessViewFloat(D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, D3D12CpuDescriptorHandle viewCPUHandle, ref ID3D12Resource pResource, ref float values, uint numRects, ref D3D12Rect pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (float* pvalues = &values)
				{
					fixed (D3D12Rect* ppRects = &pRects)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, D3D12Rect*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, (float*)pvalues, numRects, (D3D12Rect*)ppRects);
					}
				}
			}
		}

		public readonly unsafe void DiscardResource(ID3D12Resource* pResource, D3D12DiscardRegion* pRegion)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12DiscardRegion*, void>)(LpVtbl[43]))(ptr, pResource, pRegion);
		}

		public readonly unsafe void DiscardResource(ref ID3D12Resource pResource, D3D12DiscardRegion* pRegion)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12DiscardRegion*, void>)(LpVtbl[43]))(ptr, (ID3D12Resource*)ppResource, pRegion);
			}
		}

		public readonly unsafe void DiscardResource(ID3D12Resource* pResource, ref D3D12DiscardRegion pRegion)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DiscardRegion* ppRegion = &pRegion)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12DiscardRegion*, void>)(LpVtbl[43]))(ptr, pResource, (D3D12DiscardRegion*)ppRegion);
			}
		}

		public readonly unsafe void DiscardResource(ref ID3D12Resource pResource, ref D3D12DiscardRegion pRegion)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12DiscardRegion* ppRegion = &pRegion)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12DiscardRegion*, void>)(LpVtbl[43]))(ptr, (ID3D12Resource*)ppResource, (D3D12DiscardRegion*)ppRegion);
				}
			}
		}

		public readonly unsafe void BeginQuery(ID3D12QueryHeap* pQueryHeap, D3D12QueryType type, uint index)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, void>)(LpVtbl[44]))(ptr, pQueryHeap, type, index);
		}

		public readonly unsafe void BeginQuery(ref ID3D12QueryHeap pQueryHeap, D3D12QueryType type, uint index)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12QueryHeap* ppQueryHeap = &pQueryHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, void>)(LpVtbl[44]))(ptr, (ID3D12QueryHeap*)ppQueryHeap, type, index);
			}
		}

		public readonly unsafe void EndQuery(ID3D12QueryHeap* pQueryHeap, D3D12QueryType type, uint index)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, void>)(LpVtbl[45]))(ptr, pQueryHeap, type, index);
		}

		public readonly unsafe void EndQuery(ref ID3D12QueryHeap pQueryHeap, D3D12QueryType type, uint index)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12QueryHeap* ppQueryHeap = &pQueryHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, void>)(LpVtbl[45]))(ptr, (ID3D12QueryHeap*)ppQueryHeap, type, index);
			}
		}

		public readonly unsafe void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, D3D12QueryType type, uint startIndex, uint numQueries, ID3D12Resource* pDestinationBuffer, ulong alignedDestinationBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, uint, ID3D12Resource*, ulong, void>)(LpVtbl[46]))(ptr, pQueryHeap, type, startIndex, numQueries, pDestinationBuffer, alignedDestinationBufferOffset);
		}

		public readonly unsafe void ResolveQueryData(ref ID3D12QueryHeap pQueryHeap, D3D12QueryType type, uint startIndex, uint numQueries, ID3D12Resource* pDestinationBuffer, ulong alignedDestinationBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12QueryHeap* ppQueryHeap = &pQueryHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, uint, ID3D12Resource*, ulong, void>)(LpVtbl[46]))(ptr, (ID3D12QueryHeap*)ppQueryHeap, type, startIndex, numQueries, pDestinationBuffer, alignedDestinationBufferOffset);
			}
		}

		public readonly unsafe void ResolveQueryData(ID3D12QueryHeap* pQueryHeap, D3D12QueryType type, uint startIndex, uint numQueries, ref ID3D12Resource pDestinationBuffer, ulong alignedDestinationBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDestinationBuffer = &pDestinationBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, uint, ID3D12Resource*, ulong, void>)(LpVtbl[46]))(ptr, pQueryHeap, type, startIndex, numQueries, (ID3D12Resource*)ppDestinationBuffer, alignedDestinationBufferOffset);
			}
		}

		public readonly unsafe void ResolveQueryData(ref ID3D12QueryHeap pQueryHeap, D3D12QueryType type, uint startIndex, uint numQueries, ref ID3D12Resource pDestinationBuffer, ulong alignedDestinationBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12QueryHeap* ppQueryHeap = &pQueryHeap)
			{
				fixed (ID3D12Resource* ppDestinationBuffer = &pDestinationBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, uint, ID3D12Resource*, ulong, void>)(LpVtbl[46]))(ptr, (ID3D12QueryHeap*)ppQueryHeap, type, startIndex, numQueries, (ID3D12Resource*)ppDestinationBuffer, alignedDestinationBufferOffset);
				}
			}
		}

		public readonly unsafe void SetPredication(ID3D12Resource* pBuffer, ulong alignedBufferOffset, D3D12PredicationOp operation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, D3D12PredicationOp, void>)(LpVtbl[47]))(ptr, pBuffer, alignedBufferOffset, operation);
		}

		public readonly unsafe void SetPredication(ref ID3D12Resource pBuffer, ulong alignedBufferOffset, D3D12PredicationOp operation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppBuffer = &pBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, D3D12PredicationOp, void>)(LpVtbl[47]))(ptr, (ID3D12Resource*)ppBuffer, alignedBufferOffset, operation);
			}
		}

		public readonly unsafe void SetMarker(uint metadata, void* pData, uint size)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void*, uint, void>)(LpVtbl[48]))(ptr, metadata, pData, size);
		}

		public readonly unsafe void BeginEvent(uint metadata, void* pData, uint size)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void*, uint, void>)(LpVtbl[49]))(ptr, metadata, pData, size);
		}

		public readonly unsafe void EndEvent()
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, void>)(LpVtbl[50]))(ptr);
		}

		public readonly unsafe void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint maxCommandCount, ID3D12Resource* pArgumentBuffer, ulong argumentBufferOffset, ID3D12Resource* pCountBuffer, ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, pCommandSignature, maxCommandCount, pArgumentBuffer, argumentBufferOffset, pCountBuffer, countBufferOffset);
		}

		public readonly unsafe void ExecuteIndirect(ref ID3D12CommandSignature pCommandSignature, uint maxCommandCount, ID3D12Resource* pArgumentBuffer, ulong argumentBufferOffset, ID3D12Resource* pCountBuffer, ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandSignature* ppCommandSignature = &pCommandSignature)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, (ID3D12CommandSignature*)ppCommandSignature, maxCommandCount, pArgumentBuffer, argumentBufferOffset, pCountBuffer, countBufferOffset);
			}
		}

		public readonly unsafe void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint maxCommandCount, ref ID3D12Resource pArgumentBuffer, ulong argumentBufferOffset, ID3D12Resource* pCountBuffer, ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppArgumentBuffer = &pArgumentBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, pCommandSignature, maxCommandCount, (ID3D12Resource*)ppArgumentBuffer, argumentBufferOffset, pCountBuffer, countBufferOffset);
			}
		}

		public readonly unsafe void ExecuteIndirect(ref ID3D12CommandSignature pCommandSignature, uint maxCommandCount, ref ID3D12Resource pArgumentBuffer, ulong argumentBufferOffset, ID3D12Resource* pCountBuffer, ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandSignature* ppCommandSignature = &pCommandSignature)
			{
				fixed (ID3D12Resource* ppArgumentBuffer = &pArgumentBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, (ID3D12CommandSignature*)ppCommandSignature, maxCommandCount, (ID3D12Resource*)ppArgumentBuffer, argumentBufferOffset, pCountBuffer, countBufferOffset);
				}
			}
		}

		public readonly unsafe void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint maxCommandCount, ID3D12Resource* pArgumentBuffer, ulong argumentBufferOffset, ref ID3D12Resource pCountBuffer, ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppCountBuffer = &pCountBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, pCommandSignature, maxCommandCount, pArgumentBuffer, argumentBufferOffset, (ID3D12Resource*)ppCountBuffer, countBufferOffset);
			}
		}

		public readonly unsafe void ExecuteIndirect(ref ID3D12CommandSignature pCommandSignature, uint maxCommandCount, ID3D12Resource* pArgumentBuffer, ulong argumentBufferOffset, ref ID3D12Resource pCountBuffer, ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandSignature* ppCommandSignature = &pCommandSignature)
			{
				fixed (ID3D12Resource* ppCountBuffer = &pCountBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, (ID3D12CommandSignature*)ppCommandSignature, maxCommandCount, pArgumentBuffer, argumentBufferOffset, (ID3D12Resource*)ppCountBuffer, countBufferOffset);
				}
			}
		}

		public readonly unsafe void ExecuteIndirect(ID3D12CommandSignature* pCommandSignature, uint maxCommandCount, ref ID3D12Resource pArgumentBuffer, ulong argumentBufferOffset, ref ID3D12Resource pCountBuffer, ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppArgumentBuffer = &pArgumentBuffer)
			{
				fixed (ID3D12Resource* ppCountBuffer = &pCountBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, pCommandSignature, maxCommandCount, (ID3D12Resource*)ppArgumentBuffer, argumentBufferOffset, (ID3D12Resource*)ppCountBuffer, countBufferOffset);
				}
			}
		}

		public readonly unsafe void ExecuteIndirect(ref ID3D12CommandSignature pCommandSignature, uint maxCommandCount, ref ID3D12Resource pArgumentBuffer, ulong argumentBufferOffset, ref ID3D12Resource pCountBuffer, ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandSignature* ppCommandSignature = &pCommandSignature)
			{
				fixed (ID3D12Resource* ppArgumentBuffer = &pArgumentBuffer)
				{
					fixed (ID3D12Resource* ppCountBuffer = &pCountBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, (ID3D12CommandSignature*)ppCommandSignature, maxCommandCount, (ID3D12Resource*)ppArgumentBuffer, argumentBufferOffset, (ID3D12Resource*)ppCountBuffer, countBufferOffset);
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList, IUnknown>(ref value);
		}

	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12TextureCopyLocationUnion
	{
		[NativeName("PlacedFootprint")]
		[FieldOffset(0)]
		public D3D12PlacedSubresourceFootprint PlacedFootprint;
		[NativeName("SubresourceIndex")]
		[FieldOffset(0)]
		public uint SubresourceIndex;


	}

	[NativeName("D3D12_TEXTURE_COPY_LOCATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TextureCopyLocation
	{
		[NativeName("pResource")]
		public unsafe ID3D12Resource* PResource;
		[NativeName("Type")]
		public D3D12TextureCopyType Type;
		[NativeName("")]
		public D3D12TextureCopyLocationUnion D3D12TextureCopyLocationUnion;


	}

	[NativeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12PlacedSubresourceFootprint
	{
		[NativeName("Offset")]
		public ulong Offset;
		[NativeName("Footprint")]
		public D3D12SubresourceFootprint Footprint;


	}

	[NativeName("D3D12_SUBRESOURCE_FOOTPRINT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SubresourceFootprint
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public uint Height;
		[NativeName("Depth")]
		public uint Depth;
		[NativeName("RowPitch")]
		public uint RowPitch;


	}

	[NativeName("D3D12_TILED_RESOURCE_COORDINATE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TiledResourceCoordinate
	{
		[NativeName("X")]
		public uint X;
		[NativeName("Y")]
		public uint Y;
		[NativeName("Z")]
		public uint Z;
		[NativeName("Subresource")]
		public uint Subresource;


	}

	[NativeName("D3D12_TILE_REGION_SIZE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TileRegionSize
	{
		[NativeName("NumTiles")]
		public uint NumTiles;
		[NativeName("UseBox")]
		public int UseBox;
		[NativeName("Width")]
		public uint Width;
		[NativeName("Height")]
		public ushort Height;
		[NativeName("Depth")]
		public ushort Depth;


	}

	[NativeName("D3D12_VIEWPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Viewport
	{
		[NativeName("TopLeftX")]
		public float TopLeftX;
		[NativeName("TopLeftY")]
		public float TopLeftY;
		[NativeName("Width")]
		public float Width;
		[NativeName("Height")]
		public float Height;
		[NativeName("MinDepth")]
		public float MinDepth;
		[NativeName("MaxDepth")]
		public float MaxDepth;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12ResourceBarrierUnion
	{
		[NativeName("Transition")]
		[FieldOffset(0)]
		public D3D12ResourceTransitionBarrier Transition;
		[NativeName("Aliasing")]
		[FieldOffset(0)]
		public D3D12ResourceAliasingBarrier Aliasing;
		[NativeName("UAV")]
		[FieldOffset(0)]
		public D3D12ResourceUavBarrier UAV;


	}

	[NativeName("D3D12_RESOURCE_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceBarrier
	{
		[NativeName("Type")]
		public D3D12ResourceBarrierType Type;
		[NativeName("Flags")]
		public D3D12ResourceBarrierFlags Flags;
		[NativeName("")]
		public D3D12ResourceBarrierUnion D3D12ResourceBarrierUnion;


	}

	[NativeName("D3D12_RESOURCE_TRANSITION_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceTransitionBarrier
	{
		[NativeName("pResource")]
		public unsafe ID3D12Resource* PResource;
		[NativeName("Subresource")]
		public uint Subresource;
		[NativeName("StateBefore")]
		public D3D12ResourceStates StateBefore;
		[NativeName("StateAfter")]
		public D3D12ResourceStates StateAfter;


	}

	[NativeName("D3D12_RESOURCE_ALIASING_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceAliasingBarrier
	{
		[NativeName("pResourceBefore")]
		public unsafe ID3D12Resource* PResourceBefore;
		[NativeName("pResourceAfter")]
		public unsafe ID3D12Resource* PResourceAfter;


	}

	[NativeName("D3D12_RESOURCE_UAV_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceUavBarrier
	{
		[NativeName("pResource")]
		public unsafe ID3D12Resource* PResource;


	}

	[NativeName("D3D12_INDEX_BUFFER_VIEW")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12IndexBufferView
	{
		[NativeName("BufferLocation")]
		public D3D12GpuVirtualAddress BufferLocation;
		[NativeName("SizeInBytes")]
		public uint SizeInBytes;
		[NativeName("Format")]
		public DxgiFormat Format;


	}

	[NativeName("D3D12_VERTEX_BUFFER_VIEW")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VertexBufferView
	{
		[NativeName("BufferLocation")]
		public D3D12GpuVirtualAddress BufferLocation;
		[NativeName("SizeInBytes")]
		public uint SizeInBytes;
		[NativeName("StrideInBytes")]
		public uint StrideInBytes;


	}

	[NativeName("D3D12_STREAM_OUTPUT_BUFFER_VIEW")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12StreamOutputBufferView
	{
		[NativeName("BufferLocation")]
		public D3D12GpuVirtualAddress BufferLocation;
		[NativeName("SizeInBytes")]
		public ulong SizeInBytes;
		[NativeName("BufferFilledSizeLocation")]
		public D3D12GpuVirtualAddress BufferFilledSizeLocation;


	}

	/// <summary>
	/// If rects are supplied in D3D12_DISCARD_REGION, below, the resource <br/>
	/// must have 2D subresources with all specified subresources the same dimension.<br/>
	/// </summary>
	[NativeName("D3D12_DISCARD_REGION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DiscardRegion
	{
		[NativeName("NumRects")]
		public uint NumRects;
		[NativeName("pRects")]
		public unsafe D3D12Rect* PRects;
		[NativeName("FirstSubresource")]
		public uint FirstSubresource;
		[NativeName("NumSubresources")]
		public uint NumSubresources;


	}

	[Guid("553103fb-1fe7-4557-bb38-946d7d0e7ca7")]
	[NativeName("ID3D12GraphicsCommandList1")]
	public partial struct ID3D12GraphicsCommandList1 : IComObject, IComObject<ID3D12GraphicsCommandList1>, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("553103fb-1fe7-4557-bb38-946d7d0e7ca7");

		public unsafe ID3D12GraphicsCommandList1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void AtomicCopyBufferUIN(ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		public readonly unsafe void AtomicCopyBufferUIN(ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, pDependentSubresourceRanges);
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, pDependentSubresourceRanges);
					}
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUIN(ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
						}
					}
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, pDependentSubresourceRanges);
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, pDependentSubresourceRanges);
					}
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ID3D12Resource*** ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ref ID3D12Resource pDstBuffer, ulong dstOffset, ID3D12Resource* pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ID3D12Resource* pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		public readonly unsafe void AtomicCopyBufferUINT64(ref ID3D12Resource pDstBuffer, ulong dstOffset, ref ID3D12Resource pSrcBuffer, ulong srcOffset, uint dependencies, ref ID3D12Resource* ppDependentResources, ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource***, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource***)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
						}
					}
				}
			}
		}

		public readonly unsafe void OMSetDepthBounds(float min, float max)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, float, float, void>)(LpVtbl[53]))(ptr, min, max);
		}

		public readonly unsafe void SetSamplePositions(uint numSamplesPerPixel, uint numPixels, D3D12SamplePosition* pSamplePositions)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, D3D12SamplePosition*, void>)(LpVtbl[54]))(ptr, numSamplesPerPixel, numPixels, pSamplePositions);
		}

		public readonly unsafe void SetSamplePositions(uint numSamplesPerPixel, uint numPixels, ref D3D12SamplePosition pSamplePositions)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SamplePosition* ppSamplePositions = &pSamplePositions)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, D3D12SamplePosition*, void>)(LpVtbl[54]))(ptr, numSamplesPerPixel, numPixels, (D3D12SamplePosition*)ppSamplePositions);
			}
		}

		public readonly unsafe void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, D3D12Rect* pSrcRect, DxgiFormat format, D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, D3D12Rect*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, pDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
		}

		public readonly unsafe void ResolveSubresourceRegion(ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, D3D12Rect* pSrcRect, DxgiFormat format, D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, D3D12Rect*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
			}
		}

		public readonly unsafe void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, D3D12Rect* pSrcRect, DxgiFormat format, D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, D3D12Rect*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, pSrcRect, format, resolveMode);
			}
		}

		public readonly unsafe void ResolveSubresourceRegion(ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, D3D12Rect* pSrcRect, DxgiFormat format, D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, D3D12Rect*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, pSrcRect, format, resolveMode);
				}
			}
		}

		public readonly unsafe void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, ref D3D12Rect pSrcRect, DxgiFormat format, D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Rect* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, D3D12Rect*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, pDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (D3D12Rect*)ppSrcRect, format, resolveMode);
			}
		}

		public readonly unsafe void ResolveSubresourceRegion(ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ID3D12Resource* pSrcResource, uint srcSubresource, ref D3D12Rect pSrcRect, DxgiFormat format, D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12Rect* ppSrcRect = &pSrcRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, D3D12Rect*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (D3D12Rect*)ppSrcRect, format, resolveMode);
				}
			}
		}

		public readonly unsafe void ResolveSubresourceRegion(ID3D12Resource* pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, ref D3D12Rect pSrcRect, DxgiFormat format, D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D12Rect* ppSrcRect = &pSrcRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, D3D12Rect*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, (D3D12Rect*)ppSrcRect, format, resolveMode);
				}
			}
		}

		public readonly unsafe void ResolveSubresourceRegion(ref ID3D12Resource pDstResource, uint dstSubresource, uint dstX, uint dstY, ref ID3D12Resource pSrcResource, uint srcSubresource, ref D3D12Rect pSrcRect, DxgiFormat format, D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12Rect* ppSrcRect = &pSrcRect)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, D3D12Rect*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, (D3D12Rect*)ppSrcRect, format, resolveMode);
					}
				}
			}
		}

		public readonly unsafe void SetViewInstanceMask(uint mask)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, void>)(LpVtbl[56]))(ptr, mask);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, ID3D12GraphicsCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, IUnknown>(ref value);
		}

	}

	[NativeName("D3D12_SUBRESOURCE_RANGE_UINT64")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SubresourceRangeUint64
	{
		[NativeName("Subresource")]
		public uint Subresource;
		[NativeName("Range")]
		public D3D12RangeUint64 Range;


	}

	[NativeName("D3D12_RANGE_UINT64")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RangeUint64
	{
		[NativeName("Begin")]
		public ulong Begin;
		[NativeName("End")]
		public ulong End;


	}

	[NativeName("D3D12_SAMPLE_POSITION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SamplePosition
	{
		[NativeName("X")]
		public Int8 X;
		[NativeName("Y")]
		public Int8 Y;


	}

	[Guid("38c3e585-ff17-412c-9150-4fc6f9d72a28")]
	[NativeName("ID3D12GraphicsCommandList2")]
	public partial struct ID3D12GraphicsCommandList2 : IComObject, IComObject<ID3D12GraphicsCommandList2>, IComObject<ID3D12GraphicsCommandList1>, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("38c3e585-ff17-412c-9150-4fc6f9d72a28");

		public unsafe ID3D12GraphicsCommandList2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void WriteBufferImmediate(uint count, D3D12WritebufferimmediateParameter* pParams, D3D12WritebufferimmediateMode* pModes)
		{
			ID3D12GraphicsCommandList2* ptr = (ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, D3D12WritebufferimmediateParameter*, D3D12WritebufferimmediateMode*, void>)(LpVtbl[6]))(ptr, count, pParams, pModes);
		}

		public readonly unsafe void WriteBufferImmediate(uint count, ref D3D12WritebufferimmediateParameter pParams, D3D12WritebufferimmediateMode* pModes)
		{
			ID3D12GraphicsCommandList2* ptr = (ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12WritebufferimmediateParameter* ppParams = &pParams)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, D3D12WritebufferimmediateParameter*, D3D12WritebufferimmediateMode*, void>)(LpVtbl[6]))(ptr, count, (D3D12WritebufferimmediateParameter*)ppParams, pModes);
			}
		}

		public readonly unsafe void WriteBufferImmediate(uint count, D3D12WritebufferimmediateParameter* pParams, ref D3D12WritebufferimmediateMode pModes)
		{
			ID3D12GraphicsCommandList2* ptr = (ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12WritebufferimmediateMode* ppModes = &pModes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, D3D12WritebufferimmediateParameter*, D3D12WritebufferimmediateMode*, void>)(LpVtbl[6]))(ptr, count, pParams, (D3D12WritebufferimmediateMode*)ppModes);
			}
		}

		public readonly unsafe void WriteBufferImmediate(uint count, ref D3D12WritebufferimmediateParameter pParams, ref D3D12WritebufferimmediateMode pModes)
		{
			ID3D12GraphicsCommandList2* ptr = (ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12WritebufferimmediateParameter* ppParams = &pParams)
			{
				fixed (D3D12WritebufferimmediateMode* ppModes = &pModes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, D3D12WritebufferimmediateParameter*, D3D12WritebufferimmediateMode*, void>)(LpVtbl[6]))(ptr, count, (D3D12WritebufferimmediateParameter*)ppParams, (D3D12WritebufferimmediateMode*)ppModes);
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList1 (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12GraphicsCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12GraphicsCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d12_0000_0018 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D12_WRITEBUFFERIMMEDIATE_PARAMETER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12WritebufferimmediateParameter
	{
		[NativeName("Dest")]
		public D3D12GpuVirtualAddress Dest;
		[NativeName("Value")]
		public Uint32 Value;


	}

	[Guid("0ec870a6-5d7e-4c22-8cfc-5baae07616ed")]
	[NativeName("ID3D12CommandQueue")]
	public partial struct ID3D12CommandQueue : IComObject, IComObject<ID3D12CommandQueue>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0ec870a6-5d7e-4c22-8cfc-5baae07616ed");

		public unsafe ID3D12CommandQueue (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, uint* pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, uint* pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, D3D12TileRangeFlags* pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ID3D12Heap* pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, D3D12TileRegionSize* pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ID3D12Resource* pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void UpdateTileMappings(ref ID3D12Resource pResource, uint numResourceRegions, ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, ref D3D12TileRegionSize pResourceRegionSizes, ref ID3D12Heap pHeap, uint numRanges, ref D3D12TileRangeFlags pRangeFlags, ref uint pHeapRangeStartOffsets, ref uint pRangeTileCounts, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
								{
									fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
									{
										((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
									}
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, D3D12TileRegionSize* pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ID3D12Resource* pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ID3D12Resource* pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		public readonly unsafe void CopyTileMappings(ref ID3D12Resource pDstResource, ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, ref ID3D12Resource pSrcResource, ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, ref D3D12TileRegionSize pRegionSize, D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
						{
							fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void ExecuteCommandLists(uint numCommandLists, ID3D12CommandList*** ppCommandLists)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, ID3D12CommandList***, void>)(LpVtbl[2]))(ptr, numCommandLists, ppCommandLists);
		}

		public readonly unsafe void ExecuteCommandLists(uint numCommandLists, ref ID3D12CommandList* ppCommandLists)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandList** pppCommandLists = &ppCommandLists)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, ID3D12CommandList***, void>)(LpVtbl[2]))(ptr, numCommandLists, (ID3D12CommandList***)pppCommandLists);
			}
		}

		public readonly unsafe HResult Signal(ID3D12Fence* pFence, ulong value)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[6]))(ptr, pFence, value);
			return ret;
		}

		public readonly unsafe HResult Signal(ref ID3D12Fence pFence, ulong value)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[6]))(ptr, (ID3D12Fence*)ppFence, value);
				return ret;
			}
		}

		public readonly unsafe HResult Wait(ID3D12Fence* pFence, ulong value)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[7]))(ptr, pFence, value);
			return ret;
		}

		public readonly unsafe HResult Wait(ref ID3D12Fence pFence, ulong value)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[7]))(ptr, (ID3D12Fence*)ppFence, value);
				return ret;
			}
		}

		public readonly unsafe HResult GetTimestampFrequency(ulong* pFrequency)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, HResult>)(LpVtbl[8]))(ptr, pFrequency);
			return ret;
		}

		public readonly unsafe HResult GetTimestampFrequency(ref ulong pFrequency)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppFrequency = &pFrequency)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, HResult>)(LpVtbl[8]))(ptr, (ulong*)ppFrequency);
				return ret;
			}
		}

		public readonly unsafe HResult GetClockCalibration(ulong* pGpuTimestamp, ulong* pCpuTimestamp)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[9]))(ptr, pGpuTimestamp, pCpuTimestamp);
			return ret;
		}

		public readonly unsafe HResult GetClockCalibration(ref ulong pGpuTimestamp, ulong* pCpuTimestamp)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppGpuTimestamp = &pGpuTimestamp)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[9]))(ptr, (ulong*)ppGpuTimestamp, pCpuTimestamp);
				return ret;
			}
		}

		public readonly unsafe HResult GetClockCalibration(ulong* pGpuTimestamp, ref ulong pCpuTimestamp)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppCpuTimestamp = &pCpuTimestamp)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[9]))(ptr, pGpuTimestamp, (ulong*)ppCpuTimestamp);
				return ret;
			}
		}

		public readonly unsafe HResult GetClockCalibration(ref ulong pGpuTimestamp, ref ulong pCpuTimestamp)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppGpuTimestamp = &pGpuTimestamp)
			{
				fixed (ulong* ppCpuTimestamp = &pCpuTimestamp)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[9]))(ptr, (ulong*)ppGpuTimestamp, (ulong*)ppCpuTimestamp);
					return ret;
				}
			}
		}

		public readonly unsafe D3D12CommandQueueDesc GetDesc()
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12CommandQueueDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, D3D12CommandQueueDesc>)(LpVtbl[10]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, IUnknown>(ref value);
		}

	}

	[NativeName("D3D12_COMMAND_QUEUE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12CommandQueueDesc
	{
		[NativeName("Type")]
		public D3D12CommandListType Type;
		[NativeName("Priority")]
		public int Priority;
		[NativeName("Flags")]
		public D3D12CommandQueueFlags Flags;
		[NativeName("NodeMask")]
		public uint NodeMask;


	}

	[Guid("189819f1-1db6-4b57-be54-1821339b85f7")]
	[NativeName("ID3D12Device")]
	public partial struct ID3D12Device : IComObject, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("189819f1-1db6-4b57-be54-1821339b85f7");

		public unsafe ID3D12Device (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe uint GetNodeCount()
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint>)(LpVtbl[4]))(ptr);
			return ret;
		}

		public readonly unsafe HResult CreateCommandQueue(D3D12CommandQueueDesc* pDesc, Guid* riid, void** ppCommandQueue)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandQueueDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, riid, ppCommandQueue);
			return ret;
		}

		public readonly unsafe HResult CreateCommandQueue(ref D3D12CommandQueueDesc pDesc, Guid* riid, void** ppCommandQueue)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandQueueDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandQueueDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12CommandQueueDesc*)ppDesc, riid, ppCommandQueue);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommandQueue(D3D12CommandQueueDesc* pDesc, ref Guid riid, void** ppCommandQueue)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandQueueDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, (Guid*)priid, ppCommandQueue);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommandQueue(ref D3D12CommandQueueDesc pDesc, ref Guid riid, void** ppCommandQueue)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandQueueDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandQueueDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12CommandQueueDesc*)ppDesc, (Guid*)priid, ppCommandQueue);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommandAllocator(D3D12CommandListType type, Guid* riid, void** ppCommandAllocator)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandListType, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, type, riid, ppCommandAllocator);
			return ret;
		}

		public readonly unsafe HResult CreateCommandAllocator(D3D12CommandListType type, ref Guid riid, void** ppCommandAllocator)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandListType, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, type, (Guid*)priid, ppCommandAllocator);
				return ret;
			}
		}

		public readonly unsafe HResult CreateGraphicsPipelineState(D3D12GraphicsPipelineStateDesc* pDesc, Guid* riid, void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, riid, ppPipelineState);
			return ret;
		}

		public readonly unsafe HResult CreateGraphicsPipelineState(ref D3D12GraphicsPipelineStateDesc pDesc, Guid* riid, void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12GraphicsPipelineStateDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateGraphicsPipelineState(D3D12GraphicsPipelineStateDesc* pDesc, ref Guid riid, void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateGraphicsPipelineState(ref D3D12GraphicsPipelineStateDesc pDesc, ref Guid riid, void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12GraphicsPipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateComputePipelineState(D3D12ComputePipelineStateDesc* pDesc, Guid* riid, void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[8]))(ptr, pDesc, riid, ppPipelineState);
			return ret;
		}

		public readonly unsafe HResult CreateComputePipelineState(ref D3D12ComputePipelineStateDesc pDesc, Guid* riid, void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[8]))(ptr, (D3D12ComputePipelineStateDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateComputePipelineState(D3D12ComputePipelineStateDesc* pDesc, ref Guid riid, void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[8]))(ptr, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		public readonly unsafe HResult CreateComputePipelineState(ref D3D12ComputePipelineStateDesc pDesc, ref Guid riid, void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[8]))(ptr, (D3D12ComputePipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommandList(uint nodeMask, D3D12CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
			return ret;
		}

		public readonly unsafe HResult CreateCommandList(uint nodeMask, D3D12CommandListType type, ref ID3D12CommandAllocator pCommandAllocator, ID3D12PipelineState* pInitialState, Guid* riid, void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppCommandAllocator = &pCommandAllocator)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, (ID3D12CommandAllocator*)ppCommandAllocator, pInitialState, riid, ppCommandList);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommandList(uint nodeMask, D3D12CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ref ID3D12PipelineState pInitialState, Guid* riid, void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, pCommandAllocator, (ID3D12PipelineState*)ppInitialState, riid, ppCommandList);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommandList(uint nodeMask, D3D12CommandListType type, ref ID3D12CommandAllocator pCommandAllocator, ref ID3D12PipelineState pInitialState, Guid* riid, void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppCommandAllocator = &pCommandAllocator)
			{
				fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, (ID3D12CommandAllocator*)ppCommandAllocator, (ID3D12PipelineState*)ppInitialState, riid, ppCommandList);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommandList(uint nodeMask, D3D12CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ID3D12PipelineState* pInitialState, ref Guid riid, void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, pCommandAllocator, pInitialState, (Guid*)priid, ppCommandList);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommandList(uint nodeMask, D3D12CommandListType type, ref ID3D12CommandAllocator pCommandAllocator, ID3D12PipelineState* pInitialState, ref Guid riid, void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppCommandAllocator = &pCommandAllocator)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, (ID3D12CommandAllocator*)ppCommandAllocator, pInitialState, (Guid*)priid, ppCommandList);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommandList(uint nodeMask, D3D12CommandListType type, ID3D12CommandAllocator* pCommandAllocator, ref ID3D12PipelineState pInitialState, ref Guid riid, void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, pCommandAllocator, (ID3D12PipelineState*)ppInitialState, (Guid*)priid, ppCommandList);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommandList(uint nodeMask, D3D12CommandListType type, ref ID3D12CommandAllocator pCommandAllocator, ref ID3D12PipelineState pInitialState, ref Guid riid, void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppCommandAllocator = &pCommandAllocator)
			{
				fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, (ID3D12CommandAllocator*)ppCommandAllocator, (ID3D12PipelineState*)ppInitialState, (Guid*)priid, ppCommandList);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CheckFeatureSupport(D3D12Feature feature, void* pFeatureSupportData, uint featureSupportDataSize)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12Feature, void*, uint, HResult>)(LpVtbl[10]))(ptr, feature, pFeatureSupportData, featureSupportDataSize);
			return ret;
		}

		public readonly unsafe HResult CreateDescriptorHeap(D3D12DescriptorHeapDesc* pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, pDescriptorHeapDesc, riid, ppvHeap);
			return ret;
		}

		public readonly unsafe HResult CreateDescriptorHeap(ref D3D12DescriptorHeapDesc pDescriptorHeapDesc, Guid* riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DescriptorHeapDesc* ppDescriptorHeapDesc = &pDescriptorHeapDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, (D3D12DescriptorHeapDesc*)ppDescriptorHeapDesc, riid, ppvHeap);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDescriptorHeap(D3D12DescriptorHeapDesc* pDescriptorHeapDesc, ref Guid riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, pDescriptorHeapDesc, (Guid*)priid, ppvHeap);
				return ret;
			}
		}

		public readonly unsafe HResult CreateDescriptorHeap(ref D3D12DescriptorHeapDesc pDescriptorHeapDesc, ref Guid riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DescriptorHeapDesc* ppDescriptorHeapDesc = &pDescriptorHeapDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, (D3D12DescriptorHeapDesc*)ppDescriptorHeapDesc, (Guid*)priid, ppvHeap);
					return ret;
				}
			}
		}

		public readonly unsafe uint GetDescriptorHandleIncrementSize(D3D12DescriptorHeapType descriptorHeapType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapType, uint>)(LpVtbl[12]))(ptr, descriptorHeapType);
			return ret;
		}

		public readonly unsafe HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, Guid* riid, void** ppvRootSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, void*, nuint, Guid*, void**, HResult>)(LpVtbl[13]))(ptr, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
			return ret;
		}

		public readonly unsafe HResult CreateRootSignature(uint nodeMask, void* pBlobWithRootSignature, nuint blobLengthInBytes, ref Guid riid, void** ppvRootSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, void*, nuint, Guid*, void**, HResult>)(LpVtbl[13]))(ptr, nodeMask, pBlobWithRootSignature, blobLengthInBytes, (Guid*)priid, ppvRootSignature);
				return ret;
			}
		}

		public readonly unsafe void CreateConstantBufferView(D3D12ConstantBufferViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ConstantBufferViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[14]))(ptr, pDesc, destDescriptor);
		}

		public readonly unsafe void CreateConstantBufferView(ref D3D12ConstantBufferViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ConstantBufferViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ConstantBufferViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[14]))(ptr, (D3D12ConstantBufferViewDesc*)ppDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateShaderResourceView(ID3D12Resource* pResource, D3D12ShaderResourceViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12ShaderResourceViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[15]))(ptr, pResource, pDesc, destDescriptor);
		}

		public readonly unsafe void CreateShaderResourceView(ref ID3D12Resource pResource, D3D12ShaderResourceViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12ShaderResourceViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[15]))(ptr, (ID3D12Resource*)ppResource, pDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateShaderResourceView(ID3D12Resource* pResource, ref D3D12ShaderResourceViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12ShaderResourceViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[15]))(ptr, pResource, (D3D12ShaderResourceViewDesc*)ppDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateShaderResourceView(ref ID3D12Resource pResource, ref D3D12ShaderResourceViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12ShaderResourceViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12ShaderResourceViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[15]))(ptr, (ID3D12Resource*)ppResource, (D3D12ShaderResourceViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		public readonly unsafe void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, D3D12UnorderedAccessViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, pResource, pCounterResource, pDesc, destDescriptor);
		}

		public readonly unsafe void CreateUnorderedAccessView(ref ID3D12Resource pResource, ID3D12Resource* pCounterResource, D3D12UnorderedAccessViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, (ID3D12Resource*)ppResource, pCounterResource, pDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateUnorderedAccessView(ID3D12Resource* pResource, ref ID3D12Resource pCounterResource, D3D12UnorderedAccessViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppCounterResource = &pCounterResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, pResource, (ID3D12Resource*)ppCounterResource, pDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateUnorderedAccessView(ref ID3D12Resource pResource, ref ID3D12Resource pCounterResource, D3D12UnorderedAccessViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Resource* ppCounterResource = &pCounterResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, (ID3D12Resource*)ppResource, (ID3D12Resource*)ppCounterResource, pDesc, destDescriptor);
				}
			}
		}

		public readonly unsafe void CreateUnorderedAccessView(ID3D12Resource* pResource, ID3D12Resource* pCounterResource, ref D3D12UnorderedAccessViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, pResource, pCounterResource, (D3D12UnorderedAccessViewDesc*)ppDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateUnorderedAccessView(ref ID3D12Resource pResource, ID3D12Resource* pCounterResource, ref D3D12UnorderedAccessViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, (ID3D12Resource*)ppResource, pCounterResource, (D3D12UnorderedAccessViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		public readonly unsafe void CreateUnorderedAccessView(ID3D12Resource* pResource, ref ID3D12Resource pCounterResource, ref D3D12UnorderedAccessViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppCounterResource = &pCounterResource)
			{
				fixed (D3D12UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, pResource, (ID3D12Resource*)ppCounterResource, (D3D12UnorderedAccessViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		public readonly unsafe void CreateUnorderedAccessView(ref ID3D12Resource pResource, ref ID3D12Resource pCounterResource, ref D3D12UnorderedAccessViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Resource* ppCounterResource = &pCounterResource)
				{
					fixed (D3D12UnorderedAccessViewDesc* ppDesc = &pDesc)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, (ID3D12Resource*)ppResource, (ID3D12Resource*)ppCounterResource, (D3D12UnorderedAccessViewDesc*)ppDesc, destDescriptor);
					}
				}
			}
		}

		public readonly unsafe void CreateRenderTargetView(ID3D12Resource* pResource, D3D12RenderTargetViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12RenderTargetViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[17]))(ptr, pResource, pDesc, destDescriptor);
		}

		public readonly unsafe void CreateRenderTargetView(ref ID3D12Resource pResource, D3D12RenderTargetViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12RenderTargetViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[17]))(ptr, (ID3D12Resource*)ppResource, pDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateRenderTargetView(ID3D12Resource* pResource, ref D3D12RenderTargetViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12RenderTargetViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12RenderTargetViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[17]))(ptr, pResource, (D3D12RenderTargetViewDesc*)ppDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateRenderTargetView(ref ID3D12Resource pResource, ref D3D12RenderTargetViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12RenderTargetViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12RenderTargetViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[17]))(ptr, (ID3D12Resource*)ppResource, (D3D12RenderTargetViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		public readonly unsafe void CreateDepthStencilView(ID3D12Resource* pResource, D3D12DepthStencilViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12DepthStencilViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[18]))(ptr, pResource, pDesc, destDescriptor);
		}

		public readonly unsafe void CreateDepthStencilView(ref ID3D12Resource pResource, D3D12DepthStencilViewDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12DepthStencilViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[18]))(ptr, (ID3D12Resource*)ppResource, pDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateDepthStencilView(ID3D12Resource* pResource, ref D3D12DepthStencilViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DepthStencilViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12DepthStencilViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[18]))(ptr, pResource, (D3D12DepthStencilViewDesc*)ppDesc, destDescriptor);
			}
		}

		public readonly unsafe void CreateDepthStencilView(ref ID3D12Resource pResource, ref D3D12DepthStencilViewDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12DepthStencilViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12DepthStencilViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[18]))(ptr, (ID3D12Resource*)ppResource, (D3D12DepthStencilViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		public readonly unsafe void CreateSampler(D3D12SamplerDesc* pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12SamplerDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[19]))(ptr, pDesc, destDescriptor);
		}

		public readonly unsafe void CreateSampler(ref D3D12SamplerDesc pDesc, D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SamplerDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12SamplerDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[19]))(ptr, (D3D12SamplerDesc*)ppDesc, destDescriptor);
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, ref uint pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, ref uint pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, ref uint pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
			{
				fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, ref uint pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, uint* pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
				{
					fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
					}
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, ref uint pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, ref uint pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, ref uint pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, ref uint pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
			{
				fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, ref uint pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, ref uint pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
				{
					fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
					}
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, ref uint pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
			{
				fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, uint* pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, ref uint pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
				{
					fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
					}
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, ref uint pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, ref uint pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
			{
				fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
				{
					fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
					}
				}
			}
		}

		public readonly unsafe void CopyDescriptors(uint numDestDescriptorRanges, ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, ref uint pDestDescriptorRangeSizes, uint numSrcDescriptorRanges, ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, ref uint pSrcDescriptorRangeSizes, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
				{
					fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
					{
						fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
						}
					}
				}
			}
		}

		public readonly unsafe void CopyDescriptorsSimple(uint numDescriptors, D3D12CpuDescriptorHandle destDescriptorRangeStart, D3D12CpuDescriptorHandle srcDescriptorRangeStart, D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle, D3D12CpuDescriptorHandle, D3D12DescriptorHeapType, void>)(LpVtbl[21]))(ptr, numDescriptors, destDescriptorRangeStart, srcDescriptorRangeStart, descriptorHeapsType);
		}

		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, D3D12ResourceDesc* pResourceDescs)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, uint, D3D12ResourceDesc*, D3D12ResourceAllocationInfo>)(LpVtbl[22]))(ptr, visibleMask, numResourceDescs, pResourceDescs);
			return ret;
		}

		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, ref D3D12ResourceDesc pResourceDescs)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDescs = &pResourceDescs)
			{
				D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, uint, D3D12ResourceDesc*, D3D12ResourceAllocationInfo>)(LpVtbl[22]))(ptr, visibleMask, numResourceDescs, (D3D12ResourceDesc*)ppResourceDescs);
				return ret;
			}
		}

		public readonly unsafe D3D12HeapProperties GetCustomHeapProperties(uint nodeMask, D3D12HeapType heapType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12HeapProperties ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12HeapType, D3D12HeapProperties>)(LpVtbl[23]))(ptr, nodeMask, heapType);
			return ret;
		}

		public readonly unsafe HResult CreateCommittedResource(D3D12HeapProperties* pHeapProperties, D3D12HeapFlags heapFlags, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialResourceState, D3D12ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, riidResource, ppvResource);
			return ret;
		}

		public readonly unsafe HResult CreateCommittedResource(ref D3D12HeapProperties pHeapProperties, D3D12HeapFlags heapFlags, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialResourceState, D3D12ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, riidResource, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommittedResource(D3D12HeapProperties* pHeapProperties, D3D12HeapFlags heapFlags, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialResourceState, D3D12ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, riidResource, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommittedResource(ref D3D12HeapProperties pHeapProperties, D3D12HeapFlags heapFlags, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialResourceState, D3D12ClearValue* pOptimizedClearValue, Guid* riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, riidResource, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(D3D12HeapProperties* pHeapProperties, D3D12HeapFlags heapFlags, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialResourceState, ref D3D12ClearValue pOptimizedClearValue, Guid* riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, riidResource, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommittedResource(ref D3D12HeapProperties pHeapProperties, D3D12HeapFlags heapFlags, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialResourceState, ref D3D12ClearValue pOptimizedClearValue, Guid* riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, riidResource, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(D3D12HeapProperties* pHeapProperties, D3D12HeapFlags heapFlags, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialResourceState, ref D3D12ClearValue pOptimizedClearValue, Guid* riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, riidResource, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(ref D3D12HeapProperties pHeapProperties, D3D12HeapFlags heapFlags, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialResourceState, ref D3D12ClearValue pOptimizedClearValue, Guid* riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(D3D12HeapProperties* pHeapProperties, D3D12HeapFlags heapFlags, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialResourceState, D3D12ClearValue* pOptimizedClearValue, ref Guid riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priidResource = &riidResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (Guid*)priidResource, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommittedResource(ref D3D12HeapProperties pHeapProperties, D3D12HeapFlags heapFlags, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialResourceState, D3D12ClearValue* pOptimizedClearValue, ref Guid riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(D3D12HeapProperties* pHeapProperties, D3D12HeapFlags heapFlags, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialResourceState, D3D12ClearValue* pOptimizedClearValue, ref Guid riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(ref D3D12HeapProperties pHeapProperties, D3D12HeapFlags heapFlags, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialResourceState, D3D12ClearValue* pOptimizedClearValue, ref Guid riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(D3D12HeapProperties* pHeapProperties, D3D12HeapFlags heapFlags, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialResourceState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(ref D3D12HeapProperties pHeapProperties, D3D12HeapFlags heapFlags, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialResourceState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(D3D12HeapProperties* pHeapProperties, D3D12HeapFlags heapFlags, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialResourceState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateCommittedResource(ref D3D12HeapProperties pHeapProperties, D3D12HeapFlags heapFlags, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialResourceState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riidResource, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateHeap(D3D12HeapDesc* pDesc, Guid* riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapDesc*, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, pDesc, riid, ppvHeap);
			return ret;
		}

		public readonly unsafe HResult CreateHeap(ref D3D12HeapDesc pDesc, Guid* riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapDesc*, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, (D3D12HeapDesc*)ppDesc, riid, ppvHeap);
				return ret;
			}
		}

		public readonly unsafe HResult CreateHeap(D3D12HeapDesc* pDesc, ref Guid riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapDesc*, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, pDesc, (Guid*)priid, ppvHeap);
				return ret;
			}
		}

		public readonly unsafe HResult CreateHeap(ref D3D12HeapDesc pDesc, ref Guid riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapDesc*, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, (D3D12HeapDesc*)ppDesc, (Guid*)priid, ppvHeap);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong heapOffset, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, riid, ppvResource);
			return ret;
		}

		public readonly unsafe HResult CreatePlacedResource(ref ID3D12Heap pHeap, ulong heapOffset, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong heapOffset, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ref ID3D12Heap pHeap, ulong heapOffset, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong heapOffset, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ref ID3D12Heap pHeap, ulong heapOffset, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong heapOffset, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ref ID3D12Heap pHeap, ulong heapOffset, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong heapOffset, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ref ID3D12Heap pHeap, ulong heapOffset, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong heapOffset, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ref ID3D12Heap pHeap, ulong heapOffset, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong heapOffset, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ref ID3D12Heap pHeap, ulong heapOffset, D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ID3D12Heap* pHeap, ulong heapOffset, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreatePlacedResource(ref ID3D12Heap pHeap, ulong heapOffset, ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateReservedResource(D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, pDesc, initialState, pOptimizedClearValue, riid, ppvResource);
			return ret;
		}

		public readonly unsafe HResult CreateReservedResource(ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreateReservedResource(D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreateReservedResource(ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, Guid* riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateReservedResource(D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, pDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
				return ret;
			}
		}

		public readonly unsafe HResult CreateReservedResource(ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, D3D12ClearValue* pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateReservedResource(D3D12ResourceDesc* pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateReservedResource(ref D3D12ResourceDesc pDesc, D3D12ResourceStates initialState, ref D3D12ClearValue pOptimizedClearValue, ref Guid riid, void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult CreateSharedHandle(ID3D12DeviceChild* pObject, SecurityAttributes* pAttributes, uint access, char* name, nint* pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, pObject, pAttributes, access, name, pHandle);
			return ret;
		}

		public readonly unsafe HResult CreateSharedHandle(ref ID3D12DeviceChild pObject, SecurityAttributes* pAttributes, uint access, char* name, nint* pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, (ID3D12DeviceChild*)ppObject, pAttributes, access, name, pHandle);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSharedHandle(ID3D12DeviceChild* pObject, ref SecurityAttributes pAttributes, uint access, char* name, nint* pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SecurityAttributes* ppAttributes = &pAttributes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, pObject, (SecurityAttributes*)ppAttributes, access, name, pHandle);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSharedHandle(ref ID3D12DeviceChild pObject, ref SecurityAttributes pAttributes, uint access, char* name, nint* pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				fixed (SecurityAttributes* ppAttributes = &pAttributes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, (ID3D12DeviceChild*)ppObject, (SecurityAttributes*)ppAttributes, access, name, pHandle);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSharedHandle(ID3D12DeviceChild* pObject, SecurityAttributes* pAttributes, uint access, char* name, ref nint pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppHandle = &pHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, pObject, pAttributes, access, name, (nint*)ppHandle);
				return ret;
			}
		}

		public readonly unsafe HResult CreateSharedHandle(ref ID3D12DeviceChild pObject, SecurityAttributes* pAttributes, uint access, char* name, ref nint pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				fixed (nint* ppHandle = &pHandle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, (ID3D12DeviceChild*)ppObject, pAttributes, access, name, (nint*)ppHandle);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSharedHandle(ID3D12DeviceChild* pObject, ref SecurityAttributes pAttributes, uint access, char* name, ref nint pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SecurityAttributes* ppAttributes = &pAttributes)
			{
				fixed (nint* ppHandle = &pHandle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, pObject, (SecurityAttributes*)ppAttributes, access, name, (nint*)ppHandle);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateSharedHandle(ref ID3D12DeviceChild pObject, ref SecurityAttributes pAttributes, uint access, char* name, ref nint pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				fixed (SecurityAttributes* ppAttributes = &pAttributes)
				{
					fixed (nint* ppHandle = &pHandle)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, (ID3D12DeviceChild*)ppObject, (SecurityAttributes*)ppAttributes, access, name, (nint*)ppHandle);
						return ret;
					}
				}
			}
		}

		public readonly unsafe HResult OpenSharedHandle(nint nTHandle, Guid* riid, void** ppvObj)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, nint, Guid*, void**, HResult>)(LpVtbl[29]))(ptr, nTHandle, riid, ppvObj);
			return ret;
		}

		public readonly unsafe HResult OpenSharedHandle(nint nTHandle, ref Guid riid, void** ppvObj)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, nint, Guid*, void**, HResult>)(LpVtbl[29]))(ptr, nTHandle, (Guid*)priid, ppvObj);
				return ret;
			}
		}

		public readonly unsafe HResult OpenSharedHandleByName(char* name, uint access, nint* pNTHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, char*, uint, nint*, HResult>)(LpVtbl[30]))(ptr, name, access, pNTHandle);
			return ret;
		}

		public readonly unsafe HResult OpenSharedHandleByName(char* name, uint access, ref nint pNTHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppNTHandle = &pNTHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, char*, uint, nint*, HResult>)(LpVtbl[30]))(ptr, name, access, (nint*)ppNTHandle);
				return ret;
			}
		}

		public readonly unsafe HResult MakeResident(uint numObjects, ID3D12Pageable*** ppObjects)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable***, HResult>)(LpVtbl[31]))(ptr, numObjects, ppObjects);
			return ret;
		}

		public readonly unsafe HResult MakeResident(uint numObjects, ref ID3D12Pageable* ppObjects)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Pageable** pppObjects = &ppObjects)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable***, HResult>)(LpVtbl[31]))(ptr, numObjects, (ID3D12Pageable***)pppObjects);
				return ret;
			}
		}

		public readonly unsafe HResult Evict(uint numObjects, ID3D12Pageable*** ppObjects)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable***, HResult>)(LpVtbl[32]))(ptr, numObjects, ppObjects);
			return ret;
		}

		public readonly unsafe HResult Evict(uint numObjects, ref ID3D12Pageable* ppObjects)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Pageable** pppObjects = &ppObjects)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable***, HResult>)(LpVtbl[32]))(ptr, numObjects, (ID3D12Pageable***)pppObjects);
				return ret;
			}
		}

		public readonly unsafe HResult CreateFence(ulong initialValue, D3D12FenceFlags flags, Guid* riid, void** ppFence)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ulong, D3D12FenceFlags, Guid*, void**, HResult>)(LpVtbl[33]))(ptr, initialValue, flags, riid, ppFence);
			return ret;
		}

		public readonly unsafe HResult CreateFence(ulong initialValue, D3D12FenceFlags flags, ref Guid riid, void** ppFence)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ulong, D3D12FenceFlags, Guid*, void**, HResult>)(LpVtbl[33]))(ptr, initialValue, flags, (Guid*)priid, ppFence);
				return ret;
			}
		}

		public readonly unsafe HResult GetDeviceRemovedReason()
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, HResult>)(LpVtbl[34]))(ptr);
			return ret;
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, ref uint pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, ref uint pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, ref uint pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, ref uint pNumRows, ulong* pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ref ulong pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ref ulong pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, uint* pNumRows, ref ulong pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, uint* pNumRows, ref ulong pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, ref uint pNumRows, ref ulong pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, ref uint pNumRows, ref ulong pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, ref uint pNumRows, ref ulong pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, ref uint pNumRows, ref ulong pRowSizeInBytes, ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
						}
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppTotalBytes = &pTotalBytes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, uint* pNumRows, ulong* pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, ref uint pNumRows, ulong* pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, ref uint pNumRows, ulong* pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, ref uint pNumRows, ulong* pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, ref uint pNumRows, ulong* pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ref ulong pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, uint* pNumRows, ref ulong pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, uint* pNumRows, ref ulong pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, uint* pNumRows, ref ulong pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, ref uint pNumRows, ref ulong pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, D3D12PlacedSubresourceFootprint* pLayouts, ref uint pNumRows, ref ulong pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(D3D12ResourceDesc* pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, ref uint pNumRows, ref ulong pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		public readonly unsafe void GetCopyableFootprints(ref D3D12ResourceDesc pResourceDesc, uint firstSubresource, uint numSubresources, ulong baseOffset, ref D3D12PlacedSubresourceFootprint pLayouts, ref uint pNumRows, ref ulong pRowSizeInBytes, ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
						{
							fixed (ulong* ppTotalBytes = &pTotalBytes)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
							}
						}
					}
				}
			}
		}

		public readonly unsafe HResult CreateQueryHeap(D3D12QueryHeapDesc* pDesc, Guid* riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12QueryHeapDesc*, Guid*, void**, HResult>)(LpVtbl[36]))(ptr, pDesc, riid, ppvHeap);
			return ret;
		}

		public readonly unsafe HResult CreateQueryHeap(ref D3D12QueryHeapDesc pDesc, Guid* riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12QueryHeapDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12QueryHeapDesc*, Guid*, void**, HResult>)(LpVtbl[36]))(ptr, (D3D12QueryHeapDesc*)ppDesc, riid, ppvHeap);
				return ret;
			}
		}

		public readonly unsafe HResult CreateQueryHeap(D3D12QueryHeapDesc* pDesc, ref Guid riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12QueryHeapDesc*, Guid*, void**, HResult>)(LpVtbl[36]))(ptr, pDesc, (Guid*)priid, ppvHeap);
				return ret;
			}
		}

		public readonly unsafe HResult CreateQueryHeap(ref D3D12QueryHeapDesc pDesc, ref Guid riid, void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12QueryHeapDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12QueryHeapDesc*, Guid*, void**, HResult>)(LpVtbl[36]))(ptr, (D3D12QueryHeapDesc*)ppDesc, (Guid*)priid, ppvHeap);
					return ret;
				}
			}
		}

		public readonly unsafe HResult SetStablePowerState(int enable)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, int, HResult>)(LpVtbl[37]))(ptr, enable);
			return ret;
		}

		public readonly unsafe HResult CreateCommandSignature(D3D12CommandSignatureDesc* pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, pDesc, pRootSignature, riid, ppvCommandSignature);
			return ret;
		}

		public readonly unsafe HResult CreateCommandSignature(ref D3D12CommandSignatureDesc pDesc, ID3D12RootSignature* pRootSignature, Guid* riid, void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandSignatureDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, (D3D12CommandSignatureDesc*)ppDesc, pRootSignature, riid, ppvCommandSignature);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommandSignature(D3D12CommandSignatureDesc* pDesc, ref ID3D12RootSignature pRootSignature, Guid* riid, void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, pDesc, (ID3D12RootSignature*)ppRootSignature, riid, ppvCommandSignature);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommandSignature(ref D3D12CommandSignatureDesc pDesc, ref ID3D12RootSignature pRootSignature, Guid* riid, void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandSignatureDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, (D3D12CommandSignatureDesc*)ppDesc, (ID3D12RootSignature*)ppRootSignature, riid, ppvCommandSignature);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommandSignature(D3D12CommandSignatureDesc* pDesc, ID3D12RootSignature* pRootSignature, ref Guid riid, void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, pDesc, pRootSignature, (Guid*)priid, ppvCommandSignature);
				return ret;
			}
		}

		public readonly unsafe HResult CreateCommandSignature(ref D3D12CommandSignatureDesc pDesc, ID3D12RootSignature* pRootSignature, ref Guid riid, void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandSignatureDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, (D3D12CommandSignatureDesc*)ppDesc, pRootSignature, (Guid*)priid, ppvCommandSignature);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommandSignature(D3D12CommandSignatureDesc* pDesc, ref ID3D12RootSignature pRootSignature, ref Guid riid, void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, pDesc, (ID3D12RootSignature*)ppRootSignature, (Guid*)priid, ppvCommandSignature);
					return ret;
				}
			}
		}

		public readonly unsafe HResult CreateCommandSignature(ref D3D12CommandSignatureDesc pDesc, ref ID3D12RootSignature pRootSignature, ref Guid riid, void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandSignatureDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, (D3D12CommandSignatureDesc*)ppDesc, (ID3D12RootSignature*)ppRootSignature, (Guid*)priid, ppvCommandSignature);
						return ret;
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, D3D12TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, D3D12PackedMipInfo* pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ID3D12Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		public readonly unsafe void GetResourceTiling(ref ID3D12Resource pTiledResource, ref uint pNumTilesForEntireResource, ref D3D12PackedMipInfo pPackedMipDesc, ref D3D12TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint firstSubresourceTilingToGet, ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
							{
								fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
								{
									((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
								}
							}
						}
					}
				}
			}
		}

		public readonly unsafe Luid GetAdapterLuid()
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Luid ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, Luid>)(LpVtbl[40]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device value)
		{
			return Unsafe.As<ID3D12Device, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device value)
		{
			return Unsafe.As<ID3D12Device, IUnknown>(ref value);
		}

	}

	[NativeName("D3D12_GRAPHICS_PIPELINE_STATE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12GraphicsPipelineStateDesc
	{
		[NativeName("pRootSignature")]
		public unsafe ID3D12RootSignature* PRootSignature;
		[NativeName("VS")]
		public D3D12ShaderBytecode VS;
		[NativeName("PS")]
		public D3D12ShaderBytecode PS;
		[NativeName("DS")]
		public D3D12ShaderBytecode DS;
		[NativeName("HS")]
		public D3D12ShaderBytecode HS;
		[NativeName("GS")]
		public D3D12ShaderBytecode GS;
		[NativeName("StreamOutput")]
		public D3D12StreamOutputDesc StreamOutput;
		[NativeName("BlendState")]
		public D3D12BlendDesc BlendState;
		[NativeName("SampleMask")]
		public uint SampleMask;
		[NativeName("RasterizerState")]
		public D3D12RasterizerDesc RasterizerState;
		[NativeName("DepthStencilState")]
		public D3D12DepthStencilDesc DepthStencilState;
		[NativeName("InputLayout")]
		public D3D12InputLayoutDesc InputLayout;
		[NativeName("IBStripCutValue")]
		public D3D12IndexBufferStripCutValue IBStripCutValue;
		[NativeName("PrimitiveTopologyType")]
		public D3D12PrimitiveTopologyType PrimitiveTopologyType;
		[NativeName("NumRenderTargets")]
		public uint NumRenderTargets;
		[NativeName("RTVFormats")]
		public DxgiFormat RTVFormats_0;
		public DxgiFormat RTVFormats_1;
		public DxgiFormat RTVFormats_2;
		public DxgiFormat RTVFormats_3;
		public DxgiFormat RTVFormats_4;
		public DxgiFormat RTVFormats_5;
		public DxgiFormat RTVFormats_6;
		public DxgiFormat RTVFormats_7;
		[NativeName("DSVFormat")]
		public DxgiFormat DSVFormat;
		[NativeName("SampleDesc")]
		public DxgiSampleDesc SampleDesc;
		[NativeName("NodeMask")]
		public uint NodeMask;
		[NativeName("CachedPSO")]
		public D3D12CachedPipelineState CachedPSO;
		[NativeName("Flags")]
		public D3D12PipelineStateFlags Flags;


		public unsafe Span<DxgiFormat> RTVFormats
		
		{
			get
			{
				fixed (DxgiFormat* p = &this.RTVFormats_0)
				{
					return new Span<DxgiFormat>(p, 8);
				}
			}
		}
	}

	/// <summary>
	/// interface __MIDL_itf_d3d12_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName("D3D12_SHADER_BYTECODE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderBytecode
	{
		[NativeName("pShaderBytecode")]
		public unsafe void* PShaderBytecode;
		[NativeName("BytecodeLength")]
		public nuint BytecodeLength;


	}

	[NativeName("D3D12_STREAM_OUTPUT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12StreamOutputDesc
	{
		[NativeName("pSODeclaration")]
		public unsafe D3D12SoDeclarationEntry* PSODeclaration;
		[NativeName("NumEntries")]
		public uint NumEntries;
		[NativeName("pBufferStrides")]
		public unsafe uint* PBufferStrides;
		[NativeName("NumStrides")]
		public uint NumStrides;
		[NativeName("RasterizedStream")]
		public uint RasterizedStream;


	}

	[NativeName("D3D12_SO_DECLARATION_ENTRY")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SoDeclarationEntry
	{
		[NativeName("Stream")]
		public uint Stream;
		[NativeName("SemanticName")]
		public unsafe byte* SemanticName;
		[NativeName("SemanticIndex")]
		public uint SemanticIndex;
		[NativeName("StartComponent")]
		public byte StartComponent;
		[NativeName("ComponentCount")]
		public byte ComponentCount;
		[NativeName("OutputSlot")]
		public byte OutputSlot;


	}

	[NativeName("D3D12_BLEND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BlendDesc
	{
		[NativeName("AlphaToCoverageEnable")]
		public int AlphaToCoverageEnable;
		[NativeName("IndependentBlendEnable")]
		public int IndependentBlendEnable;
		[NativeName("RenderTarget")]
		public D3D12RenderTargetBlendDesc RenderTarget_0;
		public D3D12RenderTargetBlendDesc RenderTarget_1;
		public D3D12RenderTargetBlendDesc RenderTarget_2;
		public D3D12RenderTargetBlendDesc RenderTarget_3;
		public D3D12RenderTargetBlendDesc RenderTarget_4;
		public D3D12RenderTargetBlendDesc RenderTarget_5;
		public D3D12RenderTargetBlendDesc RenderTarget_6;
		public D3D12RenderTargetBlendDesc RenderTarget_7;


		public unsafe Span<D3D12RenderTargetBlendDesc> RenderTarget
		
		{
			get
			{
				fixed (D3D12RenderTargetBlendDesc* p = &this.RenderTarget_0)
				{
					return new Span<D3D12RenderTargetBlendDesc>(p, 8);
				}
			}
		}
	}

	[NativeName("D3D12_RENDER_TARGET_BLEND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderTargetBlendDesc
	{
		[NativeName("BlendEnable")]
		public int BlendEnable;
		[NativeName("LogicOpEnable")]
		public int LogicOpEnable;
		[NativeName("SrcBlend")]
		public D3D12Blend SrcBlend;
		[NativeName("DestBlend")]
		public D3D12Blend DestBlend;
		[NativeName("BlendOp")]
		public D3D12BlendOp BlendOp;
		[NativeName("SrcBlendAlpha")]
		public D3D12Blend SrcBlendAlpha;
		[NativeName("DestBlendAlpha")]
		public D3D12Blend DestBlendAlpha;
		[NativeName("BlendOpAlpha")]
		public D3D12BlendOp BlendOpAlpha;
		[NativeName("LogicOp")]
		public D3D12LogicOp LogicOp;
		[NativeName("RenderTargetWriteMask")]
		public byte RenderTargetWriteMask;


	}

	[NativeName("D3D12_RASTERIZER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RasterizerDesc
	{
		[NativeName("FillMode")]
		public D3D12FillMode FillMode;
		[NativeName("CullMode")]
		public D3D12CullMode CullMode;
		[NativeName("FrontCounterClockwise")]
		public int FrontCounterClockwise;
		[NativeName("DepthBias")]
		public int DepthBias;
		[NativeName("DepthBiasClamp")]
		public float DepthBiasClamp;
		[NativeName("SlopeScaledDepthBias")]
		public float SlopeScaledDepthBias;
		[NativeName("DepthClipEnable")]
		public int DepthClipEnable;
		[NativeName("MultisampleEnable")]
		public int MultisampleEnable;
		[NativeName("AntialiasedLineEnable")]
		public int AntialiasedLineEnable;
		[NativeName("ForcedSampleCount")]
		public uint ForcedSampleCount;
		[NativeName("ConservativeRaster")]
		public D3D12ConservativeRasterizationMode ConservativeRaster;


	}

	[NativeName("D3D12_DEPTH_STENCIL_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DepthStencilDesc
	{
		[NativeName("DepthEnable")]
		public int DepthEnable;
		[NativeName("DepthWriteMask")]
		public D3D12DepthWriteMask DepthWriteMask;
		[NativeName("DepthFunc")]
		public D3D12ComparisonFunc DepthFunc;
		[NativeName("StencilEnable")]
		public int StencilEnable;
		[NativeName("StencilReadMask")]
		public byte StencilReadMask;
		[NativeName("StencilWriteMask")]
		public byte StencilWriteMask;
		[NativeName("FrontFace")]
		public D3D12DepthStencilopDesc FrontFace;
		[NativeName("BackFace")]
		public D3D12DepthStencilopDesc BackFace;


	}

	[NativeName("D3D12_DEPTH_STENCILOP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DepthStencilopDesc
	{
		[NativeName("StencilFailOp")]
		public D3D12StencilOp StencilFailOp;
		[NativeName("StencilDepthFailOp")]
		public D3D12StencilOp StencilDepthFailOp;
		[NativeName("StencilPassOp")]
		public D3D12StencilOp StencilPassOp;
		[NativeName("StencilFunc")]
		public D3D12ComparisonFunc StencilFunc;


	}

	[NativeName("D3D12_INPUT_LAYOUT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12InputLayoutDesc
	{
		[NativeName("pInputElementDescs")]
		public unsafe D3D12InputElementDesc* PInputElementDescs;
		[NativeName("NumElements")]
		public uint NumElements;


	}

	[NativeName("D3D12_INPUT_ELEMENT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12InputElementDesc
	{
		[NativeName("SemanticName")]
		public unsafe byte* SemanticName;
		[NativeName("SemanticIndex")]
		public uint SemanticIndex;
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("InputSlot")]
		public uint InputSlot;
		[NativeName("AlignedByteOffset")]
		public uint AlignedByteOffset;
		[NativeName("InputSlotClass")]
		public D3D12InputClassification InputSlotClass;
		[NativeName("InstanceDataStepRate")]
		public uint InstanceDataStepRate;


	}

	[NativeName("D3D12_CACHED_PIPELINE_STATE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12CachedPipelineState
	{
		[NativeName("pCachedBlob")]
		public unsafe void* PCachedBlob;
		[NativeName("CachedBlobSizeInBytes")]
		public nuint CachedBlobSizeInBytes;


	}

	[NativeName("D3D12_COMPUTE_PIPELINE_STATE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ComputePipelineStateDesc
	{
		[NativeName("pRootSignature")]
		public unsafe ID3D12RootSignature* PRootSignature;
		[NativeName("CS")]
		public D3D12ShaderBytecode CS;
		[NativeName("NodeMask")]
		public uint NodeMask;
		[NativeName("CachedPSO")]
		public D3D12CachedPipelineState CachedPSO;
		[NativeName("Flags")]
		public D3D12PipelineStateFlags Flags;


	}

	[NativeName("D3D12_CONSTANT_BUFFER_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ConstantBufferViewDesc
	{
		[NativeName("BufferLocation")]
		public D3D12GpuVirtualAddress BufferLocation;
		[NativeName("SizeInBytes")]
		public uint SizeInBytes;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12ShaderResourceViewDescUnion
	{
		[NativeName("Buffer")]
		[FieldOffset(0)]
		public D3D12BufferSrv Buffer;
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D12Tex1DSrv Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D12Tex1DArraySrv Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D12Tex2DSrv Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D12Tex2DArraySrv Texture2DArray;
		[NativeName("Texture2DMS")]
		[FieldOffset(0)]
		public D3D12Tex2DmsSrv Texture2DMS;
		[NativeName("Texture2DMSArray")]
		[FieldOffset(0)]
		public D3D12Tex2DmsArraySrv Texture2DMSArray;
		[NativeName("Texture3D")]
		[FieldOffset(0)]
		public D3D12Tex3DSrv Texture3D;
		[NativeName("TextureCube")]
		[FieldOffset(0)]
		public D3D12TexcubeSrv TextureCube;
		[NativeName("TextureCubeArray")]
		[FieldOffset(0)]
		public D3D12TexcubeArraySrv TextureCubeArray;
		[NativeName("RaytracingAccelerationStructure")]
		[FieldOffset(0)]
		public D3D12RaytracingAccelerationStructureSrv RaytracingAccelerationStructure;


	}

	[NativeName("D3D12_SHADER_RESOURCE_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderResourceViewDesc
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D12SrvDimension ViewDimension;
		[NativeName("Shader4ComponentMapping")]
		public uint Shader4ComponentMapping;
		[NativeName("")]
		public D3D12ShaderResourceViewDescUnion D3D12ShaderResourceViewDescUnion;


	}

	[NativeName("D3D12_BUFFER_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BufferSrv
	{
		[NativeName("FirstElement")]
		public ulong FirstElement;
		[NativeName("NumElements")]
		public uint NumElements;
		[NativeName("StructureByteStride")]
		public uint StructureByteStride;
		[NativeName("Flags")]
		public D3D12BufferSrvFlags Flags;


	}

	[NativeName("D3D12_TEX1D_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DSrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("ResourceMinLODClamp")]
		public float ResourceMinLODClamp;


	}

	[NativeName("D3D12_TEX1D_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DArraySrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("ResourceMinLODClamp")]
		public float ResourceMinLODClamp;


	}

	[NativeName("D3D12_TEX2D_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DSrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;
		[NativeName("ResourceMinLODClamp")]
		public float ResourceMinLODClamp;


	}

	[NativeName("D3D12_TEX2D_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DArraySrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;
		[NativeName("ResourceMinLODClamp")]
		public float ResourceMinLODClamp;


	}

	[NativeName("D3D12_TEX2DMS_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsSrv
	{
		[NativeName("UnusedField_NothingToDefine")]
		public uint UnusedFieldNothingToDefine;


	}

	[NativeName("D3D12_TEX2DMS_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsArraySrv
	{
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D12_TEX3D_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex3DSrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("ResourceMinLODClamp")]
		public float ResourceMinLODClamp;


	}

	[NativeName("D3D12_TEXCUBE_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TexcubeSrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("ResourceMinLODClamp")]
		public float ResourceMinLODClamp;


	}

	[NativeName("D3D12_TEXCUBE_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TexcubeArraySrv
	{
		[NativeName("MostDetailedMip")]
		public uint MostDetailedMip;
		[NativeName("MipLevels")]
		public uint MipLevels;
		[NativeName("First2DArrayFace")]
		public uint First2DArrayFace;
		[NativeName("NumCubes")]
		public uint NumCubes;
		[NativeName("ResourceMinLODClamp")]
		public float ResourceMinLODClamp;


	}

	[NativeName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingAccelerationStructureSrv
	{
		[NativeName("Location")]
		public D3D12GpuVirtualAddress Location;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12UnorderedAccessViewDescUnion
	{
		[NativeName("Buffer")]
		[FieldOffset(0)]
		public D3D12BufferUav Buffer;
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D12Tex1DUav Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D12Tex1DArrayUav Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D12Tex2DUav Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D12Tex2DArrayUav Texture2DArray;
		[NativeName("Texture3D")]
		[FieldOffset(0)]
		public D3D12Tex3DUav Texture3D;


	}

	[NativeName("D3D12_UNORDERED_ACCESS_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12UnorderedAccessViewDesc
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D12UavDimension ViewDimension;
		[NativeName("")]
		public D3D12UnorderedAccessViewDescUnion D3D12UnorderedAccessViewDescUnion;


	}

	[NativeName("D3D12_BUFFER_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BufferUav
	{
		[NativeName("FirstElement")]
		public ulong FirstElement;
		[NativeName("NumElements")]
		public uint NumElements;
		[NativeName("StructureByteStride")]
		public uint StructureByteStride;
		[NativeName("CounterOffsetInBytes")]
		public ulong CounterOffsetInBytes;
		[NativeName("Flags")]
		public D3D12BufferUavFlags Flags;


	}

	[NativeName("D3D12_TEX1D_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D12_TEX1D_ARRAY_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DArrayUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D12_TEX2D_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[NativeName("D3D12_TEX2D_ARRAY_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DArrayUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[NativeName("D3D12_TEX3D_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex3DUav
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstWSlice")]
		public uint FirstWSlice;
		[NativeName("WSize")]
		public uint WSize;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12RenderTargetViewDescUnion
	{
		[NativeName("Buffer")]
		[FieldOffset(0)]
		public D3D12BufferRtv Buffer;
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D12Tex1DRtv Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D12Tex1DArrayRtv Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D12Tex2DRtv Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D12Tex2DArrayRtv Texture2DArray;
		[NativeName("Texture2DMS")]
		[FieldOffset(0)]
		public D3D12Tex2DmsRtv Texture2DMS;
		[NativeName("Texture2DMSArray")]
		[FieldOffset(0)]
		public D3D12Tex2DmsArrayRtv Texture2DMSArray;
		[NativeName("Texture3D")]
		[FieldOffset(0)]
		public D3D12Tex3DRtv Texture3D;


	}

	[NativeName("D3D12_RENDER_TARGET_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderTargetViewDesc
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D12RtvDimension ViewDimension;
		[NativeName("")]
		public D3D12RenderTargetViewDescUnion D3D12RenderTargetViewDescUnion;


	}

	[NativeName("D3D12_BUFFER_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BufferRtv
	{
		[NativeName("FirstElement")]
		public ulong FirstElement;
		[NativeName("NumElements")]
		public uint NumElements;


	}

	[NativeName("D3D12_TEX1D_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D12_TEX1D_ARRAY_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DArrayRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D12_TEX2D_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[NativeName("D3D12_TEX2D_ARRAY_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DArrayRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;
		[NativeName("PlaneSlice")]
		public uint PlaneSlice;


	}

	[NativeName("D3D12_TEX2DMS_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsRtv
	{
		[NativeName("UnusedField_NothingToDefine")]
		public uint UnusedFieldNothingToDefine;


	}

	[NativeName("D3D12_TEX2DMS_ARRAY_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsArrayRtv
	{
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D12_TEX3D_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex3DRtv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstWSlice")]
		public uint FirstWSlice;
		[NativeName("WSize")]
		public uint WSize;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12DepthStencilViewDescUnion
	{
		[NativeName("Texture1D")]
		[FieldOffset(0)]
		public D3D12Tex1DDsv Texture1D;
		[NativeName("Texture1DArray")]
		[FieldOffset(0)]
		public D3D12Tex1DArrayDsv Texture1DArray;
		[NativeName("Texture2D")]
		[FieldOffset(0)]
		public D3D12Tex2DDsv Texture2D;
		[NativeName("Texture2DArray")]
		[FieldOffset(0)]
		public D3D12Tex2DArrayDsv Texture2DArray;
		[NativeName("Texture2DMS")]
		[FieldOffset(0)]
		public D3D12Tex2DmsDsv Texture2DMS;
		[NativeName("Texture2DMSArray")]
		[FieldOffset(0)]
		public D3D12Tex2DmsArrayDsv Texture2DMSArray;


	}

	[NativeName("D3D12_DEPTH_STENCIL_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DepthStencilViewDesc
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("ViewDimension")]
		public D3D12DsvDimension ViewDimension;
		[NativeName("Flags")]
		public D3D12DsvFlags Flags;
		[NativeName("")]
		public D3D12DepthStencilViewDescUnion D3D12DepthStencilViewDescUnion;


	}

	[NativeName("D3D12_TEX1D_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DDsv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D12_TEX1D_ARRAY_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DArrayDsv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D12_TEX2D_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DDsv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;


	}

	[NativeName("D3D12_TEX2D_ARRAY_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DArrayDsv
	{
		[NativeName("MipSlice")]
		public uint MipSlice;
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D12_TEX2DMS_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsDsv
	{
		[NativeName("UnusedField_NothingToDefine")]
		public uint UnusedFieldNothingToDefine;


	}

	[NativeName("D3D12_TEX2DMS_ARRAY_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsArrayDsv
	{
		[NativeName("FirstArraySlice")]
		public uint FirstArraySlice;
		[NativeName("ArraySize")]
		public uint ArraySize;


	}

	[NativeName("D3D12_SAMPLER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SamplerDesc
	{
		[NativeName("Filter")]
		public D3D12Filter Filter;
		[NativeName("AddressU")]
		public D3D12TextureAddressMode AddressU;
		[NativeName("AddressV")]
		public D3D12TextureAddressMode AddressV;
		[NativeName("AddressW")]
		public D3D12TextureAddressMode AddressW;
		[NativeName("MipLODBias")]
		public float MipLODBias;
		[NativeName("MaxAnisotropy")]
		public uint MaxAnisotropy;
		[NativeName("ComparisonFunc")]
		public D3D12ComparisonFunc ComparisonFunc;
		[NativeName("BorderColor")]
		public float BorderColor_0;
		public float BorderColor_1;
		public float BorderColor_2;
		public float BorderColor_3;
		[NativeName("MinLOD")]
		public float MinLOD;
		[NativeName("MaxLOD")]
		public float MaxLOD;


	}

	[NativeName("D3D12_RESOURCE_ALLOCATION_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceAllocationInfo
	{
		[NativeName("SizeInBytes")]
		public ulong SizeInBytes;
		[NativeName("Alignment")]
		public ulong Alignment;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12ClearValueUnion
	{
		[NativeName("Color")]
		[FieldOffset(0)]
		public float Color_0;
		[FieldOffset(16)]
		public float Color_1;
		[FieldOffset(32)]
		public float Color_2;
		[FieldOffset(48)]
		public float Color_3;
		[NativeName("DepthStencil")]
		[FieldOffset(0)]
		public D3D12DepthStencilValue DepthStencil;


	}

	[NativeName("D3D12_CLEAR_VALUE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ClearValue
	{
		[NativeName("Format")]
		public DxgiFormat Format;
		[NativeName("")]
		public D3D12ClearValueUnion D3D12ClearValueUnion;


	}

	[NativeName("D3D12_DEPTH_STENCIL_VALUE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DepthStencilValue
	{
		[NativeName("Depth")]
		public float Depth;
		[NativeName("Stencil")]
		public byte Stencil;


	}

	[NativeName("D3D12_QUERY_HEAP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12QueryHeapDesc
	{
		[NativeName("Type")]
		public D3D12QueryHeapType Type;
		[NativeName("Count")]
		public uint Count;
		[NativeName("NodeMask")]
		public uint NodeMask;


	}

	[NativeName("D3D12_COMMAND_SIGNATURE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12CommandSignatureDesc
	{
		[NativeName("ByteStride")]
		public uint ByteStride;
		[NativeName("NumArgumentDescs")]
		public uint NumArgumentDescs;
		[NativeName("pArgumentDescs")]
		public unsafe D3D12IndirectArgumentDesc* PArgumentDescs;
		[NativeName("NodeMask")]
		public uint NodeMask;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12IndirectArgumentDescUnionUnion0
	{
		[NativeName("Slot")]
		public uint Slot;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12IndirectArgumentDescUnionUnion1
	{
		[NativeName("RootParameterIndex")]
		public uint RootParameterIndex;
		[NativeName("DestOffsetIn32BitValues")]
		public uint DestOffsetIn32BitValues;
		[NativeName("Num32BitValuesToSet")]
		public uint Num32BitValuesToSet;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12IndirectArgumentDescUnionUnion2
	{
		[NativeName("RootParameterIndex")]
		public uint RootParameterIndex;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12IndirectArgumentDescUnionUnion3
	{
		[NativeName("RootParameterIndex")]
		public uint RootParameterIndex;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12IndirectArgumentDescUnionUnion4
	{
		[NativeName("RootParameterIndex")]
		public uint RootParameterIndex;


	}

	[NativeName("")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct D3D12IndirectArgumentDescUnion
	{
		[NativeName("VertexBuffer")]
		[FieldOffset(0)]
	}
}
