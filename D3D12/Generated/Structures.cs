// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaEngine.DXGI;
using HexaEngine.D3DCommon;
using HexaGen.Runtime.COM;

namespace HexaEngine.D3D12
{
	[Guid("c4fec28f-7966-4e95-9f94-f431cb56c3b8")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Object")]
	public partial struct ID3D12Object : IComObject, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c4fec28f-7966-4e95-9f94-f431cb56c3b8");

		public unsafe ID3D12Object (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] uint* pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(*LpVtbl))(ptr, guid, pDataSize, pData);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] uint* pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(*LpVtbl))(ptr, (Guid*)pguid, pDataSize, pData);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDataSize = &pDataSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(*LpVtbl))(ptr, guid, (uint*)ppDataSize, pData);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pDataSize")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pDataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (uint* ppDataSize = &pDataSize)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint*, void*, HResult>)(*LpVtbl))(ptr, (Guid*)pguid, (uint*)ppDataSize, pData);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint, void*, HResult>)(LpVtbl[1]))(ptr, guid, dataSize, pData);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetPrivateData")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetPrivateData([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, uint, void*, HResult>)(LpVtbl[1]))(ptr, (Guid*)pguid, dataSize, pData);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] IUnknown* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(LpVtbl[2]))(ptr, guid, pData);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] IUnknown* pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(LpVtbl[2]))(ptr, (Guid*)pguid, pData);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ref IUnknown pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (IUnknown* ppData = &pData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(LpVtbl[2]))(ptr, guid, (IUnknown*)ppData);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SetPrivateDataInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetPrivateDataInterface([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const IUnknown*")] ref IUnknown pData)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				fixed (IUnknown* ppData = &pData)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, Guid*, IUnknown*, HResult>)(LpVtbl[2]))(ptr, (Guid*)pguid, (IUnknown*)ppData);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SetName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name)
		{
			ID3D12Object* ptr = (ID3D12Object*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Object*, char*, HResult>)(LpVtbl[3]))(ptr, name);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12Object value)
		{
			return Unsafe.As<ID3D12Object, IUnknown>(ref value);
		}

	}

	[Guid("905db94b-a00c-4140-9df5-2b64ca9ea357")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DeviceChild")]
	public partial struct ID3D12DeviceChild : IComObject, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("905db94b-a00c-4140-9df5-2b64ca9ea357");

		public unsafe ID3D12DeviceChild (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDevice")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDevice([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvDevice")] [NativeName(NativeNameType.Type, "void**")] void** ppvDevice)
		{
			ID3D12DeviceChild* ptr = (ID3D12DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, riid, ppvDevice);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDevice")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDevice([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvDevice")] [NativeName(NativeNameType.Type, "void**")] void** ppvDevice)
		{
			ID3D12DeviceChild* ptr = (ID3D12DeviceChild*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceChild*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (Guid*)priid, ppvDevice);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Object (ID3D12DeviceChild value)
		{
			return Unsafe.As<ID3D12DeviceChild, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12DeviceChild value)
		{
			return Unsafe.As<ID3D12DeviceChild, IUnknown>(ref value);
		}

	}

	[Guid("c54a6b66-72df-4ee8-8be5-a946a1429214")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12RootSignature")]
	public partial struct ID3D12RootSignature : IComObject, IComObject<ID3D12RootSignature>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c54a6b66-72df-4ee8-8be5-a946a1429214");

		public unsafe ID3D12RootSignature (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12RootSignature value)
		{
			return Unsafe.As<ID3D12RootSignature, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12RootSignature value)
		{
			return Unsafe.As<ID3D12RootSignature, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12RootSignature value)
		{
			return Unsafe.As<ID3D12RootSignature, IUnknown>(ref value);
		}

	}

	[Guid("34ab647b-3cc8-46ac-841b-c0965645c046")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12RootSignatureDeserializer")]
	public partial struct ID3D12RootSignatureDeserializer : IComObject, IComObject<ID3D12RootSignatureDeserializer>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("34ab647b-3cc8-46ac-841b-c0965645c046");

		public unsafe ID3D12RootSignatureDeserializer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetRootSignatureDesc")]
		[return: NativeName(NativeNameType.Type, "const D3D12_ROOT_SIGNATURE_DESC*")]
		public readonly unsafe D3D12RootSignatureDesc* GetRootSignatureDesc()
		{
			ID3D12RootSignatureDeserializer* ptr = (ID3D12RootSignatureDeserializer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12RootSignatureDesc* ret = ((delegate* unmanaged[Stdcall]<ID3D12RootSignatureDeserializer*, D3D12RootSignatureDesc*>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12RootSignatureDeserializer value)
		{
			return Unsafe.As<ID3D12RootSignatureDeserializer, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_ROOT_SIGNATURE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootSignatureDesc
	{
		[NativeName(NativeNameType.Field, "NumParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumParameters;
		[NativeName(NativeNameType.Field, "pParameters")]
		[NativeName(NativeNameType.Type, "const D3D12_ROOT_PARAMETER*")]
		public unsafe D3D12RootParameter* PParameters;
		[NativeName(NativeNameType.Field, "NumStaticSamplers")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumStaticSamplers;
		[NativeName(NativeNameType.Field, "pStaticSamplers")]
		[NativeName(NativeNameType.Type, "const D3D12_STATIC_SAMPLER_DESC*")]
		public unsafe D3D12StaticSamplerDesc* PStaticSamplers;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_ROOT_SIGNATURE_FLAGS")]
		public D3D12RootSignatureFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_ROOT_PARAMETER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootParameter
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12RootParameterUnion
		{
			[NativeName(NativeNameType.Field, "DescriptorTable")]
			[NativeName(NativeNameType.Type, "D3D12_ROOT_DESCRIPTOR_TABLE")]
			[FieldOffset(0)]
			public D3D12RootDescriptorTable DescriptorTable;
			[NativeName(NativeNameType.Field, "Constants")]
			[NativeName(NativeNameType.Type, "D3D12_ROOT_CONSTANTS")]
			[FieldOffset(0)]
			public D3D12RootConstants Constants;
			[NativeName(NativeNameType.Field, "Descriptor")]
			[NativeName(NativeNameType.Type, "D3D12_ROOT_DESCRIPTOR")]
			[FieldOffset(0)]
			public D3D12RootDescriptor Descriptor;


		}

		[NativeName(NativeNameType.Field, "ParameterType")]
		[NativeName(NativeNameType.Type, "D3D12_ROOT_PARAMETER_TYPE")]
		public D3D12RootParameterType ParameterType;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12RootParameterUnion Union;
		[NativeName(NativeNameType.Field, "ShaderVisibility")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_VISIBILITY")]
		public D3D12ShaderVisibility ShaderVisibility;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_ROOT_DESCRIPTOR_TABLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootDescriptorTable
	{
		[NativeName(NativeNameType.Field, "NumDescriptorRanges")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumDescriptorRanges;
		[NativeName(NativeNameType.Field, "pDescriptorRanges")]
		[NativeName(NativeNameType.Type, "const D3D12_DESCRIPTOR_RANGE*")]
		public unsafe D3D12DescriptorRange* PDescriptorRanges;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DESCRIPTOR_RANGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DescriptorRange
	{
		[NativeName(NativeNameType.Field, "RangeType")]
		[NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_RANGE_TYPE")]
		public D3D12DescriptorRangeType RangeType;
		[NativeName(NativeNameType.Field, "NumDescriptors")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumDescriptors;
		[NativeName(NativeNameType.Field, "BaseShaderRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BaseShaderRegister;
		[NativeName(NativeNameType.Field, "RegisterSpace")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RegisterSpace;
		[NativeName(NativeNameType.Field, "OffsetInDescriptorsFromTableStart")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OffsetInDescriptorsFromTableStart;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_ROOT_CONSTANTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootConstants
	{
		[NativeName(NativeNameType.Field, "ShaderRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ShaderRegister;
		[NativeName(NativeNameType.Field, "RegisterSpace")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RegisterSpace;
		[NativeName(NativeNameType.Field, "Num32BitValues")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Num32BitValues;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_ROOT_DESCRIPTOR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootDescriptor
	{
		[NativeName(NativeNameType.Field, "ShaderRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ShaderRegister;
		[NativeName(NativeNameType.Field, "RegisterSpace")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RegisterSpace;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_STATIC_SAMPLER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12StaticSamplerDesc
	{
		[NativeName(NativeNameType.Field, "Filter")]
		[NativeName(NativeNameType.Type, "D3D12_FILTER")]
		public D3D12Filter Filter;
		[NativeName(NativeNameType.Field, "AddressU")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_ADDRESS_MODE")]
		public D3D12TextureAddressMode AddressU;
		[NativeName(NativeNameType.Field, "AddressV")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_ADDRESS_MODE")]
		public D3D12TextureAddressMode AddressV;
		[NativeName(NativeNameType.Field, "AddressW")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_ADDRESS_MODE")]
		public D3D12TextureAddressMode AddressW;
		[NativeName(NativeNameType.Field, "MipLODBias")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MipLODBias;
		[NativeName(NativeNameType.Field, "MaxAnisotropy")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxAnisotropy;
		[NativeName(NativeNameType.Field, "ComparisonFunc")]
		[NativeName(NativeNameType.Type, "D3D12_COMPARISON_FUNC")]
		public D3D12ComparisonFunc ComparisonFunc;
		[NativeName(NativeNameType.Field, "BorderColor")]
		[NativeName(NativeNameType.Type, "D3D12_STATIC_BORDER_COLOR")]
		public D3D12StaticBorderColor BorderColor;
		[NativeName(NativeNameType.Field, "MinLOD")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MinLOD;
		[NativeName(NativeNameType.Field, "MaxLOD")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MaxLOD;
		[NativeName(NativeNameType.Field, "ShaderRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ShaderRegister;
		[NativeName(NativeNameType.Field, "RegisterSpace")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RegisterSpace;
		[NativeName(NativeNameType.Field, "ShaderVisibility")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_VISIBILITY")]
		public D3D12ShaderVisibility ShaderVisibility;


	}

	[Guid("7f91ce67-090c-4bb7-b78e-ed8ff2e31da0")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VersionedRootSignatureDeserializer")]
	public partial struct ID3D12VersionedRootSignatureDeserializer : IComObject, IComObject<ID3D12VersionedRootSignatureDeserializer>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("7f91ce67-090c-4bb7-b78e-ed8ff2e31da0");

		public unsafe ID3D12VersionedRootSignatureDeserializer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetRootSignatureDescAtVersion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetRootSignatureDescAtVersion([NativeName(NativeNameType.Param, "convertToVersion")] [NativeName(NativeNameType.Type, "D3D_ROOT_SIGNATURE_VERSION")] D3DRootSignatureVersion convertToVersion, [NativeName(NativeNameType.Param, "ppDesc")] [NativeName(NativeNameType.Type, "const D3D12_VERSIONED_ROOT_SIGNATURE_DESC**")] D3D12VersionedRootSignatureDesc** ppDesc)
		{
			ID3D12VersionedRootSignatureDeserializer* ptr = (ID3D12VersionedRootSignatureDeserializer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, D3DRootSignatureVersion, D3D12VersionedRootSignatureDesc**, HResult>)(*LpVtbl))(ptr, convertToVersion, ppDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetRootSignatureDescAtVersion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetRootSignatureDescAtVersion([NativeName(NativeNameType.Param, "convertToVersion")] [NativeName(NativeNameType.Type, "D3D_ROOT_SIGNATURE_VERSION")] D3DRootSignatureVersion convertToVersion, [NativeName(NativeNameType.Param, "ppDesc")] [NativeName(NativeNameType.Type, "const D3D12_VERSIONED_ROOT_SIGNATURE_DESC**")] ref D3D12VersionedRootSignatureDesc* ppDesc)
		{
			ID3D12VersionedRootSignatureDeserializer* ptr = (ID3D12VersionedRootSignatureDeserializer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VersionedRootSignatureDesc** pppDesc = &ppDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, D3DRootSignatureVersion, D3D12VersionedRootSignatureDesc**, HResult>)(*LpVtbl))(ptr, convertToVersion, (D3D12VersionedRootSignatureDesc**)pppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetUnconvertedRootSignatureDesc")]
		[return: NativeName(NativeNameType.Type, "const D3D12_VERSIONED_ROOT_SIGNATURE_DESC*")]
		public readonly unsafe D3D12VersionedRootSignatureDesc* GetUnconvertedRootSignatureDesc()
		{
			ID3D12VersionedRootSignatureDeserializer* ptr = (ID3D12VersionedRootSignatureDeserializer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VersionedRootSignatureDesc* ret = ((delegate* unmanaged[Stdcall]<ID3D12VersionedRootSignatureDeserializer*, D3D12VersionedRootSignatureDesc*>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12VersionedRootSignatureDeserializer value)
		{
			return Unsafe.As<ID3D12VersionedRootSignatureDeserializer, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VERSIONED_ROOT_SIGNATURE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VersionedRootSignatureDesc
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VersionedRootSignatureDescUnion
		{
			[NativeName(NativeNameType.Field, "Desc_1_0")]
			[NativeName(NativeNameType.Type, "D3D12_ROOT_SIGNATURE_DESC")]
			[FieldOffset(0)]
			public D3D12RootSignatureDesc Desc10;
			[NativeName(NativeNameType.Field, "Desc_1_1")]
			[NativeName(NativeNameType.Type, "D3D12_ROOT_SIGNATURE_DESC1")]
			[FieldOffset(0)]
			public D3D12RootSignatureDesc1 Desc11;


		}

		[NativeName(NativeNameType.Field, "Version")]
		[NativeName(NativeNameType.Type, "D3D_ROOT_SIGNATURE_VERSION")]
		public D3DRootSignatureVersion Version;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VersionedRootSignatureDescUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_ROOT_SIGNATURE_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootSignatureDesc1
	{
		[NativeName(NativeNameType.Field, "NumParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumParameters;
		[NativeName(NativeNameType.Field, "pParameters")]
		[NativeName(NativeNameType.Type, "const D3D12_ROOT_PARAMETER1*")]
		public unsafe D3D12RootParameter1* PParameters;
		[NativeName(NativeNameType.Field, "NumStaticSamplers")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumStaticSamplers;
		[NativeName(NativeNameType.Field, "pStaticSamplers")]
		[NativeName(NativeNameType.Type, "const D3D12_STATIC_SAMPLER_DESC*")]
		public unsafe D3D12StaticSamplerDesc* PStaticSamplers;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_ROOT_SIGNATURE_FLAGS")]
		public D3D12RootSignatureFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_ROOT_PARAMETER1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootParameter1
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12RootParameter1Union
		{
			[NativeName(NativeNameType.Field, "DescriptorTable")]
			[NativeName(NativeNameType.Type, "D3D12_ROOT_DESCRIPTOR_TABLE1")]
			[FieldOffset(0)]
			public D3D12RootDescriptorTable1 DescriptorTable;
			[NativeName(NativeNameType.Field, "Constants")]
			[NativeName(NativeNameType.Type, "D3D12_ROOT_CONSTANTS")]
			[FieldOffset(0)]
			public D3D12RootConstants Constants;
			[NativeName(NativeNameType.Field, "Descriptor")]
			[NativeName(NativeNameType.Type, "D3D12_ROOT_DESCRIPTOR1")]
			[FieldOffset(0)]
			public D3D12RootDescriptor1 Descriptor;


		}

		[NativeName(NativeNameType.Field, "ParameterType")]
		[NativeName(NativeNameType.Type, "D3D12_ROOT_PARAMETER_TYPE")]
		public D3D12RootParameterType ParameterType;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12RootParameter1Union Union;
		[NativeName(NativeNameType.Field, "ShaderVisibility")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_VISIBILITY")]
		public D3D12ShaderVisibility ShaderVisibility;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_ROOT_DESCRIPTOR_TABLE1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootDescriptorTable1
	{
		[NativeName(NativeNameType.Field, "NumDescriptorRanges")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumDescriptorRanges;
		[NativeName(NativeNameType.Field, "pDescriptorRanges")]
		[NativeName(NativeNameType.Type, "const D3D12_DESCRIPTOR_RANGE1*")]
		public unsafe D3D12DescriptorRange1* PDescriptorRanges;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DESCRIPTOR_RANGE1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DescriptorRange1
	{
		[NativeName(NativeNameType.Field, "RangeType")]
		[NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_RANGE_TYPE")]
		public D3D12DescriptorRangeType RangeType;
		[NativeName(NativeNameType.Field, "NumDescriptors")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumDescriptors;
		[NativeName(NativeNameType.Field, "BaseShaderRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BaseShaderRegister;
		[NativeName(NativeNameType.Field, "RegisterSpace")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RegisterSpace;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_RANGE_FLAGS")]
		public D3D12DescriptorRangeFlags Flags;
		[NativeName(NativeNameType.Field, "OffsetInDescriptorsFromTableStart")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OffsetInDescriptorsFromTableStart;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_ROOT_DESCRIPTOR1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RootDescriptor1
	{
		[NativeName(NativeNameType.Field, "ShaderRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ShaderRegister;
		[NativeName(NativeNameType.Field, "RegisterSpace")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RegisterSpace;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_ROOT_DESCRIPTOR_FLAGS")]
		public D3D12RootDescriptorFlags Flags;


	}

	[Guid("63ee58fb-1268-4835-86da-f008ce62f0d6")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Pageable")]
	public partial struct ID3D12Pageable : IComObject, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("63ee58fb-1268-4835-86da-f008ce62f0d6");

		public unsafe ID3D12Pageable (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Pageable value)
		{
			return Unsafe.As<ID3D12Pageable, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Pageable value)
		{
			return Unsafe.As<ID3D12Pageable, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Pageable value)
		{
			return Unsafe.As<ID3D12Pageable, IUnknown>(ref value);
		}

	}

	[Guid("6b3b2502-6e51-45b3-90ee-9884265e8df3")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Heap")]
	public partial struct ID3D12Heap : IComObject, IComObject<ID3D12Heap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6b3b2502-6e51-45b3-90ee-9884265e8df3");

		public unsafe ID3D12Heap (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_HEAP_DESC")]
		public readonly unsafe D3D12HeapDesc GetDesc()
		{
			ID3D12Heap* ptr = (ID3D12Heap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12HeapDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12Heap*, D3D12HeapDesc>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Heap value)
		{
			return Unsafe.As<ID3D12Heap, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Heap value)
		{
			return Unsafe.As<ID3D12Heap, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Heap value)
		{
			return Unsafe.As<ID3D12Heap, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Heap value)
		{
			return Unsafe.As<ID3D12Heap, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_HEAP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12HeapDesc
	{
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SizeInBytes;
		[NativeName(NativeNameType.Field, "Properties")]
		[NativeName(NativeNameType.Type, "D3D12_HEAP_PROPERTIES")]
		public D3D12HeapProperties Properties;
		[NativeName(NativeNameType.Field, "Alignment")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Alignment;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")]
		public D3D12HeapFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_HEAP_PROPERTIES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12HeapProperties
	{
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_HEAP_TYPE")]
		public D3D12HeapType Type;
		[NativeName(NativeNameType.Field, "CPUPageProperty")]
		[NativeName(NativeNameType.Type, "D3D12_CPU_PAGE_PROPERTY")]
		public D3D12CpuPageProperty CPUPageProperty;
		[NativeName(NativeNameType.Field, "MemoryPoolPreference")]
		[NativeName(NativeNameType.Type, "D3D12_MEMORY_POOL")]
		public D3D12MemoryPool MemoryPoolPreference;
		[NativeName(NativeNameType.Field, "CreationNodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CreationNodeMask;
		[NativeName(NativeNameType.Field, "VisibleNodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint VisibleNodeMask;


	}

	[Guid("696442be-a72e-4059-bc79-5b5c98040fad")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Resource")]
	public partial struct ID3D12Resource : IComObject, IComObject<ID3D12Resource>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("696442be-a72e-4059-bc79-5b5c98040fad");

		public unsafe ID3D12Resource (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "Map")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Map([NativeName(NativeNameType.Param, "Subresource")] [NativeName(NativeNameType.Type, "UINT")] uint subresource, [NativeName(NativeNameType.Param, "pReadRange")] [NativeName(NativeNameType.Type, "const D3D12_RANGE*")] D3D12Range* pReadRange, [NativeName(NativeNameType.Param, "ppData")] [NativeName(NativeNameType.Type, "void**")] void** ppData)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Range*, void**, HResult>)(*LpVtbl))(ptr, subresource, pReadRange, ppData);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Map")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Map([NativeName(NativeNameType.Param, "Subresource")] [NativeName(NativeNameType.Type, "UINT")] uint subresource, [NativeName(NativeNameType.Param, "pReadRange")] [NativeName(NativeNameType.Type, "const D3D12_RANGE*")] ref D3D12Range pReadRange, [NativeName(NativeNameType.Param, "ppData")] [NativeName(NativeNameType.Type, "void**")] void** ppData)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Range* ppReadRange = &pReadRange)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Range*, void**, HResult>)(*LpVtbl))(ptr, subresource, (D3D12Range*)ppReadRange, ppData);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "Unmap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void Unmap([NativeName(NativeNameType.Param, "Subresource")] [NativeName(NativeNameType.Type, "UINT")] uint subresource, [NativeName(NativeNameType.Param, "pWrittenRange")] [NativeName(NativeNameType.Type, "const D3D12_RANGE*")] D3D12Range* pWrittenRange)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Range*, void>)(LpVtbl[1]))(ptr, subresource, pWrittenRange);
		}

		[NativeName(NativeNameType.Func, "Unmap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void Unmap([NativeName(NativeNameType.Param, "Subresource")] [NativeName(NativeNameType.Type, "UINT")] uint subresource, [NativeName(NativeNameType.Param, "pWrittenRange")] [NativeName(NativeNameType.Type, "const D3D12_RANGE*")] ref D3D12Range pWrittenRange)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Range* ppWrittenRange = &pWrittenRange)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Range*, void>)(LpVtbl[1]))(ptr, subresource, (D3D12Range*)ppWrittenRange);
			}
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_DESC")]
		public readonly unsafe D3D12ResourceDesc GetDesc()
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ResourceDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12ResourceDesc>)(LpVtbl[2]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetGPUVirtualAddress")]
		[return: NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public readonly unsafe ulong GetGPUVirtualAddress()
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, ulong>)(LpVtbl[3]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "WriteToSubresource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult WriteToSubresource([NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "pDstBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] D3D12Box* pDstBox, [NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "const void*")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcRowPitch")] [NativeName(NativeNameType.Type, "UINT")] uint srcRowPitch, [NativeName(NativeNameType.Param, "SrcDepthPitch")] [NativeName(NativeNameType.Type, "UINT")] uint srcDepthPitch)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Box*, void*, uint, uint, HResult>)(LpVtbl[4]))(ptr, dstSubresource, pDstBox, pSrcData, srcRowPitch, srcDepthPitch);
			return ret;
		}

		[NativeName(NativeNameType.Func, "WriteToSubresource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult WriteToSubresource([NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "pDstBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] ref D3D12Box pDstBox, [NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "const void*")] void* pSrcData, [NativeName(NativeNameType.Param, "SrcRowPitch")] [NativeName(NativeNameType.Type, "UINT")] uint srcRowPitch, [NativeName(NativeNameType.Param, "SrcDepthPitch")] [NativeName(NativeNameType.Type, "UINT")] uint srcDepthPitch)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Box* ppDstBox = &pDstBox)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, uint, D3D12Box*, void*, uint, uint, HResult>)(LpVtbl[4]))(ptr, dstSubresource, (D3D12Box*)ppDstBox, pSrcData, srcRowPitch, srcDepthPitch);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ReadFromSubresource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ReadFromSubresource([NativeName(NativeNameType.Param, "pDstData")] [NativeName(NativeNameType.Type, "void*")] void* pDstData, [NativeName(NativeNameType.Param, "DstRowPitch")] [NativeName(NativeNameType.Type, "UINT")] uint dstRowPitch, [NativeName(NativeNameType.Param, "DstDepthPitch")] [NativeName(NativeNameType.Type, "UINT")] uint dstDepthPitch, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] D3D12Box* pSrcBox)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, void*, uint, uint, uint, D3D12Box*, HResult>)(LpVtbl[5]))(ptr, pDstData, dstRowPitch, dstDepthPitch, srcSubresource, pSrcBox);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ReadFromSubresource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ReadFromSubresource([NativeName(NativeNameType.Param, "pDstData")] [NativeName(NativeNameType.Type, "void*")] void* pDstData, [NativeName(NativeNameType.Param, "DstRowPitch")] [NativeName(NativeNameType.Type, "UINT")] uint dstRowPitch, [NativeName(NativeNameType.Param, "DstDepthPitch")] [NativeName(NativeNameType.Type, "UINT")] uint dstDepthPitch, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] ref D3D12Box pSrcBox)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Box* ppSrcBox = &pSrcBox)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, void*, uint, uint, uint, D3D12Box*, HResult>)(LpVtbl[5]))(ptr, pDstData, dstRowPitch, dstDepthPitch, srcSubresource, (D3D12Box*)ppSrcBox);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetHeapProperties")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetHeapProperties([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "pHeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS*")] D3D12HeapFlags* pHeapFlags)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12HeapProperties*, D3D12HeapFlags*, HResult>)(LpVtbl[6]))(ptr, pHeapProperties, pHeapFlags);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetHeapProperties")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetHeapProperties([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "pHeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS*")] D3D12HeapFlags* pHeapFlags)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12HeapProperties*, D3D12HeapFlags*, HResult>)(LpVtbl[6]))(ptr, (D3D12HeapProperties*)ppHeapProperties, pHeapFlags);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetHeapProperties")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetHeapProperties([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "pHeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS*")] ref D3D12HeapFlags pHeapFlags)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapFlags* ppHeapFlags = &pHeapFlags)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12HeapProperties*, D3D12HeapFlags*, HResult>)(LpVtbl[6]))(ptr, pHeapProperties, (D3D12HeapFlags*)ppHeapFlags);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetHeapProperties")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetHeapProperties([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "pHeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS*")] ref D3D12HeapFlags pHeapFlags)
		{
			ID3D12Resource* ptr = (ID3D12Resource*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12HeapFlags* ppHeapFlags = &pHeapFlags)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource*, D3D12HeapProperties*, D3D12HeapFlags*, HResult>)(LpVtbl[6]))(ptr, (D3D12HeapProperties*)ppHeapProperties, (D3D12HeapFlags*)ppHeapFlags);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Resource value)
		{
			return Unsafe.As<ID3D12Resource, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Resource value)
		{
			return Unsafe.As<ID3D12Resource, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Resource value)
		{
			return Unsafe.As<ID3D12Resource, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Resource value)
		{
			return Unsafe.As<ID3D12Resource, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RANGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Range
	{
		[NativeName(NativeNameType.Field, "Begin")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint Begin;
		[NativeName(NativeNameType.Field, "End")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint End;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOURCE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceDesc
	{
		[NativeName(NativeNameType.Field, "Dimension")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_DIMENSION")]
		public D3D12ResourceDimension Dimension;
		[NativeName(NativeNameType.Field, "Alignment")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Alignment;
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;
		[NativeName(NativeNameType.Field, "DepthOrArraySize")]
		[NativeName(NativeNameType.Type, "UINT16")]
		public ushort DepthOrArraySize;
		[NativeName(NativeNameType.Field, "MipLevels")]
		[NativeName(NativeNameType.Type, "UINT16")]
		public ushort MipLevels;
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "SampleDesc")]
		[NativeName(NativeNameType.Type, "DXGI_SAMPLE_DESC")]
		public DxgiSampleDesc SampleDesc;
		[NativeName(NativeNameType.Field, "Layout")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_LAYOUT")]
		public D3D12TextureLayout Layout;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_FLAGS")]
		public D3D12ResourceFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BOX")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Box
	{
		[NativeName(NativeNameType.Field, "left")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Left;
		[NativeName(NativeNameType.Field, "top")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Top;
		[NativeName(NativeNameType.Field, "front")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Front;
		[NativeName(NativeNameType.Field, "right")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Right;
		[NativeName(NativeNameType.Field, "bottom")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Bottom;
		[NativeName(NativeNameType.Field, "back")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Back;


	}

	[Guid("6102dee4-af59-4b09-b999-b44d73f09b24")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12CommandAllocator")]
	public partial struct ID3D12CommandAllocator : IComObject, IComObject<ID3D12CommandAllocator>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6102dee4-af59-4b09-b999-b44d73f09b24");

		public unsafe ID3D12CommandAllocator (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "Reset")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Reset()
		{
			ID3D12CommandAllocator* ptr = (ID3D12CommandAllocator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandAllocator*, HResult>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12CommandAllocator value)
		{
			return Unsafe.As<ID3D12CommandAllocator, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12CommandAllocator value)
		{
			return Unsafe.As<ID3D12CommandAllocator, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12CommandAllocator value)
		{
			return Unsafe.As<ID3D12CommandAllocator, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12CommandAllocator value)
		{
			return Unsafe.As<ID3D12CommandAllocator, IUnknown>(ref value);
		}

	}

	[Guid("0a753dcf-c4d8-4b91-adf6-be5a60d95a76")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Fence")]
	public partial struct ID3D12Fence : IComObject, IComObject<ID3D12Fence>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0a753dcf-c4d8-4b91-adf6-be5a60d95a76");

		public unsafe ID3D12Fence (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetCompletedValue")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetCompletedValue()
		{
			ID3D12Fence* ptr = (ID3D12Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong>)(*LpVtbl))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetEventOnCompletion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetEventOnCompletion([NativeName(NativeNameType.Param, "Value")] [NativeName(NativeNameType.Type, "UINT64")] ulong value, [NativeName(NativeNameType.Param, "hEvent")] [NativeName(NativeNameType.Type, "HANDLE")] nint hEvent)
		{
			ID3D12Fence* ptr = (ID3D12Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong, nint, HResult>)(LpVtbl[1]))(ptr, value, hEvent);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Signal")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Signal([NativeName(NativeNameType.Param, "Value")] [NativeName(NativeNameType.Type, "UINT64")] ulong value)
		{
			ID3D12Fence* ptr = (ID3D12Fence*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence*, ulong, HResult>)(LpVtbl[2]))(ptr, value);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Fence value)
		{
			return Unsafe.As<ID3D12Fence, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Fence value)
		{
			return Unsafe.As<ID3D12Fence, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Fence value)
		{
			return Unsafe.As<ID3D12Fence, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Fence value)
		{
			return Unsafe.As<ID3D12Fence, IUnknown>(ref value);
		}

	}

	[Guid("433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Fence1")]
	public partial struct ID3D12Fence1 : IComObject, IComObject<ID3D12Fence1>, IComObject<ID3D12Fence>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a");

		public unsafe ID3D12Fence1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetCreationFlags")]
		[return: NativeName(NativeNameType.Type, "D3D12_FENCE_FLAGS")]
		public readonly unsafe D3D12FenceFlags GetCreationFlags()
		{
			ID3D12Fence1* ptr = (ID3D12Fence1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12FenceFlags ret = ((delegate* unmanaged[Stdcall]<ID3D12Fence1*, D3D12FenceFlags>)(LpVtbl[3]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Fence (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, ID3D12Fence>(ref value);
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Fence1 value)
		{
			return Unsafe.As<ID3D12Fence1, IUnknown>(ref value);
		}

	}

	[Guid("765a30f3-f624-4c6f-a828-ace948622445")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12PipelineState")]
	public partial struct ID3D12PipelineState : IComObject, IComObject<ID3D12PipelineState>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("765a30f3-f624-4c6f-a828-ace948622445");

		public unsafe ID3D12PipelineState (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetCachedBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetCachedBlob([NativeName(NativeNameType.Param, "ppBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ID3D10Blob** ppBlob)
		{
			ID3D12PipelineState* ptr = (ID3D12PipelineState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, ID3D10Blob**, HResult>)(*LpVtbl))(ptr, ppBlob);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCachedBlob")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetCachedBlob([NativeName(NativeNameType.Param, "ppBlob")] [NativeName(NativeNameType.Type, "ID3DBlob**")] ref ID3D10Blob* ppBlob)
		{
			ID3D12PipelineState* ptr = (ID3D12PipelineState*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D10Blob** pppBlob = &ppBlob)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineState*, ID3D10Blob**, HResult>)(*LpVtbl))(ptr, (ID3D10Blob**)pppBlob);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12PipelineState value)
		{
			return Unsafe.As<ID3D12PipelineState, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12PipelineState value)
		{
			return Unsafe.As<ID3D12PipelineState, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12PipelineState value)
		{
			return Unsafe.As<ID3D12PipelineState, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12PipelineState value)
		{
			return Unsafe.As<ID3D12PipelineState, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "ID3D10Blob")]
	public partial struct ID3D10Blob : IComObject, IComObject<ID3D10Blob>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe ID3D10Blob (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetBufferPointer")]
		[return: NativeName(NativeNameType.Type, "LPVOID")]
		public readonly unsafe void* GetBufferPointer()
		{
			ID3D10Blob* ptr = (ID3D10Blob*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			void* ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, void*>)(*LpVtbl))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetBufferSize")]
		[return: NativeName(NativeNameType.Type, "SIZE_T")]
		public readonly unsafe nuint GetBufferSize()
		{
			ID3D10Blob* ptr = (ID3D10Blob*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			nuint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, nuint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D10Blob value)
		{
			return Unsafe.As<ID3D10Blob, IUnknown>(ref value);
		}

	}

	[Guid("8efb471d-616c-4f49-90f7-127bb763fa51")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DescriptorHeap")]
	public partial struct ID3D12DescriptorHeap : IComObject, IComObject<ID3D12DescriptorHeap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8efb471d-616c-4f49-90f7-127bb763fa51");

		public unsafe ID3D12DescriptorHeap (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_DESC")]
		public readonly unsafe D3D12DescriptorHeapDesc GetDesc()
		{
			ID3D12DescriptorHeap* ptr = (ID3D12DescriptorHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12DescriptorHeapDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, D3D12DescriptorHeapDesc>)(*LpVtbl))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCPUDescriptorHandleForHeapStart")]
		[return: NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")]
		public readonly unsafe D3D12CpuDescriptorHandle GetCPUDescriptorHandleForHeapStart()
		{
			ID3D12DescriptorHeap* ptr = (ID3D12DescriptorHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12CpuDescriptorHandle ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, D3D12CpuDescriptorHandle>)(LpVtbl[1]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetGPUDescriptorHandleForHeapStart")]
		[return: NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")]
		public readonly unsafe D3D12GpuDescriptorHandle GetGPUDescriptorHandleForHeapStart()
		{
			ID3D12DescriptorHeap* ptr = (ID3D12DescriptorHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12GpuDescriptorHandle ret = ((delegate* unmanaged[Stdcall]<ID3D12DescriptorHeap*, D3D12GpuDescriptorHandle>)(LpVtbl[2]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12DescriptorHeap value)
		{
			return Unsafe.As<ID3D12DescriptorHeap, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12DescriptorHeap value)
		{
			return Unsafe.As<ID3D12DescriptorHeap, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12DescriptorHeap value)
		{
			return Unsafe.As<ID3D12DescriptorHeap, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12DescriptorHeap value)
		{
			return Unsafe.As<ID3D12DescriptorHeap, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DESCRIPTOR_HEAP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DescriptorHeapDesc
	{
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")]
		public D3D12DescriptorHeapType Type;
		[NativeName(NativeNameType.Field, "NumDescriptors")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumDescriptors;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_FLAGS")]
		public D3D12DescriptorHeapFlags Flags;
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_CPU_DESCRIPTOR_HANDLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12CpuDescriptorHandle
	{
		[NativeName(NativeNameType.Field, "ptr")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint Ptr;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_GPU_DESCRIPTOR_HANDLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12GpuDescriptorHandle
	{
		[NativeName(NativeNameType.Field, "ptr")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Ptr;


	}

	[Guid("0d9658ae-ed45-469e-a61d-970ec583cab4")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12QueryHeap")]
	public partial struct ID3D12QueryHeap : IComObject, IComObject<ID3D12QueryHeap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0d9658ae-ed45-469e-a61d-970ec583cab4");

		public unsafe ID3D12QueryHeap (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12QueryHeap value)
		{
			return Unsafe.As<ID3D12QueryHeap, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12QueryHeap value)
		{
			return Unsafe.As<ID3D12QueryHeap, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12QueryHeap value)
		{
			return Unsafe.As<ID3D12QueryHeap, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12QueryHeap value)
		{
			return Unsafe.As<ID3D12QueryHeap, IUnknown>(ref value);
		}

	}

	[Guid("c36a797c-ec80-4f0a-8985-a7b2475082d1")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12CommandSignature")]
	public partial struct ID3D12CommandSignature : IComObject, IComObject<ID3D12CommandSignature>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c36a797c-ec80-4f0a-8985-a7b2475082d1");

		public unsafe ID3D12CommandSignature (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12CommandSignature value)
		{
			return Unsafe.As<ID3D12CommandSignature, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12CommandSignature value)
		{
			return Unsafe.As<ID3D12CommandSignature, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12CommandSignature value)
		{
			return Unsafe.As<ID3D12CommandSignature, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12CommandSignature value)
		{
			return Unsafe.As<ID3D12CommandSignature, IUnknown>(ref value);
		}

	}

	[Guid("7116d91c-e7e4-47ce-b8c6-ec8168f437e5")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12CommandList")]
	public partial struct ID3D12CommandList : IComObject, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("7116d91c-e7e4-47ce-b8c6-ec8168f437e5");

		public unsafe ID3D12CommandList (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetType")]
		[return: NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")]
		public readonly unsafe D3D12CommandListType GetType()
		{
			ID3D12CommandList* ptr = (ID3D12CommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12CommandListType ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandList*, D3D12CommandListType>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12CommandList value)
		{
			return Unsafe.As<ID3D12CommandList, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12CommandList value)
		{
			return Unsafe.As<ID3D12CommandList, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12CommandList value)
		{
			return Unsafe.As<ID3D12CommandList, IUnknown>(ref value);
		}

	}

	[Guid("5b160d0f-ac1b-4185-8ba8-b3ae42a5a455")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12GraphicsCommandList")]
	public partial struct ID3D12GraphicsCommandList : IComObject, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("5b160d0f-ac1b-4185-8ba8-b3ae42a5a455");

		public unsafe ID3D12GraphicsCommandList (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "Close")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Close()
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, HResult>)(LpVtbl[1]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Reset")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Reset([NativeName(NativeNameType.Param, "pAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ID3D12CommandAllocator* pAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pInitialState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*, HResult>)(LpVtbl[2]))(ptr, pAllocator, pInitialState);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Reset")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Reset([NativeName(NativeNameType.Param, "pAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ref ID3D12CommandAllocator pAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pInitialState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppAllocator = &pAllocator)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*, HResult>)(LpVtbl[2]))(ptr, (ID3D12CommandAllocator*)ppAllocator, pInitialState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "Reset")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Reset([NativeName(NativeNameType.Param, "pAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ID3D12CommandAllocator* pAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pInitialState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*, HResult>)(LpVtbl[2]))(ptr, pAllocator, (ID3D12PipelineState*)ppInitialState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "Reset")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Reset([NativeName(NativeNameType.Param, "pAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ref ID3D12CommandAllocator pAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pInitialState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppAllocator = &pAllocator)
			{
				fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*, HResult>)(LpVtbl[2]))(ptr, (ID3D12CommandAllocator*)ppAllocator, (ID3D12PipelineState*)ppInitialState);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearState([NativeName(NativeNameType.Param, "pPipelineState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pPipelineState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(LpVtbl[3]))(ptr, pPipelineState);
		}

		[NativeName(NativeNameType.Func, "ClearState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearState([NativeName(NativeNameType.Param, "pPipelineState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pPipelineState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppPipelineState = &pPipelineState)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(LpVtbl[3]))(ptr, (ID3D12PipelineState*)ppPipelineState);
			}
		}

		[NativeName(NativeNameType.Func, "DrawInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DrawInstanced([NativeName(NativeNameType.Param, "VertexCountPerInstance")] [NativeName(NativeNameType.Type, "UINT")] uint vertexCountPerInstance, [NativeName(NativeNameType.Param, "InstanceCount")] [NativeName(NativeNameType.Type, "UINT")] uint instanceCount, [NativeName(NativeNameType.Param, "StartVertexLocation")] [NativeName(NativeNameType.Type, "UINT")] uint startVertexLocation, [NativeName(NativeNameType.Param, "StartInstanceLocation")] [NativeName(NativeNameType.Type, "UINT")] uint startInstanceLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, uint, void>)(LpVtbl[4]))(ptr, vertexCountPerInstance, instanceCount, startVertexLocation, startInstanceLocation);
		}

		[NativeName(NativeNameType.Func, "DrawIndexedInstanced")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DrawIndexedInstanced([NativeName(NativeNameType.Param, "IndexCountPerInstance")] [NativeName(NativeNameType.Type, "UINT")] uint indexCountPerInstance, [NativeName(NativeNameType.Param, "InstanceCount")] [NativeName(NativeNameType.Type, "UINT")] uint instanceCount, [NativeName(NativeNameType.Param, "StartIndexLocation")] [NativeName(NativeNameType.Type, "UINT")] uint startIndexLocation, [NativeName(NativeNameType.Param, "BaseVertexLocation")] [NativeName(NativeNameType.Type, "INT")] int baseVertexLocation, [NativeName(NativeNameType.Param, "StartInstanceLocation")] [NativeName(NativeNameType.Type, "UINT")] uint startInstanceLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, int, uint, void>)(LpVtbl[5]))(ptr, indexCountPerInstance, instanceCount, startIndexLocation, baseVertexLocation, startInstanceLocation);
		}

		[NativeName(NativeNameType.Func, "Dispatch")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void Dispatch([NativeName(NativeNameType.Param, "ThreadGroupCountX")] [NativeName(NativeNameType.Type, "UINT")] uint threadGroupCountX, [NativeName(NativeNameType.Param, "ThreadGroupCountY")] [NativeName(NativeNameType.Type, "UINT")] uint threadGroupCountY, [NativeName(NativeNameType.Param, "ThreadGroupCountZ")] [NativeName(NativeNameType.Type, "UINT")] uint threadGroupCountZ)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>)(LpVtbl[6]))(ptr, threadGroupCountX, threadGroupCountY, threadGroupCountZ);
		}

		[NativeName(NativeNameType.Func, "CopyBufferRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyBufferRegion([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "NumBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong numBytes)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(LpVtbl[7]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, numBytes);
		}

		[NativeName(NativeNameType.Func, "CopyBufferRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyBufferRegion([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "NumBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong numBytes)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(LpVtbl[7]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, numBytes);
			}
		}

		[NativeName(NativeNameType.Func, "CopyBufferRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyBufferRegion([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "NumBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong numBytes)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(LpVtbl[7]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, numBytes);
			}
		}

		[NativeName(NativeNameType.Func, "CopyBufferRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyBufferRegion([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "NumBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong numBytes)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, ulong, void>)(LpVtbl[7]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, numBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTextureRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTextureRegion([NativeName(NativeNameType.Param, "pDst")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] D3D12TextureCopyLocation* pDst, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "DstZ")] [NativeName(NativeNameType.Type, "UINT")] uint dstZ, [NativeName(NativeNameType.Param, "pSrc")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] D3D12TextureCopyLocation* pSrc, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] D3D12Box* pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, pDst, dstX, dstY, dstZ, pSrc, pSrcBox);
		}

		[NativeName(NativeNameType.Func, "CopyTextureRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTextureRegion([NativeName(NativeNameType.Param, "pDst")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] ref D3D12TextureCopyLocation pDst, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "DstZ")] [NativeName(NativeNameType.Type, "UINT")] uint dstZ, [NativeName(NativeNameType.Param, "pSrc")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] D3D12TextureCopyLocation* pSrc, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] D3D12Box* pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppDst = &pDst)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, (D3D12TextureCopyLocation*)ppDst, dstX, dstY, dstZ, pSrc, pSrcBox);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTextureRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTextureRegion([NativeName(NativeNameType.Param, "pDst")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] D3D12TextureCopyLocation* pDst, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "DstZ")] [NativeName(NativeNameType.Type, "UINT")] uint dstZ, [NativeName(NativeNameType.Param, "pSrc")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] ref D3D12TextureCopyLocation pSrc, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] D3D12Box* pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppSrc = &pSrc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, pDst, dstX, dstY, dstZ, (D3D12TextureCopyLocation*)ppSrc, pSrcBox);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTextureRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTextureRegion([NativeName(NativeNameType.Param, "pDst")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] ref D3D12TextureCopyLocation pDst, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "DstZ")] [NativeName(NativeNameType.Type, "UINT")] uint dstZ, [NativeName(NativeNameType.Param, "pSrc")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] ref D3D12TextureCopyLocation pSrc, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] D3D12Box* pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppDst = &pDst)
			{
				fixed (D3D12TextureCopyLocation* ppSrc = &pSrc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, (D3D12TextureCopyLocation*)ppDst, dstX, dstY, dstZ, (D3D12TextureCopyLocation*)ppSrc, pSrcBox);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTextureRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTextureRegion([NativeName(NativeNameType.Param, "pDst")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] D3D12TextureCopyLocation* pDst, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "DstZ")] [NativeName(NativeNameType.Type, "UINT")] uint dstZ, [NativeName(NativeNameType.Param, "pSrc")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] D3D12TextureCopyLocation* pSrc, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] ref D3D12Box pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Box* ppSrcBox = &pSrcBox)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, pDst, dstX, dstY, dstZ, pSrc, (D3D12Box*)ppSrcBox);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTextureRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTextureRegion([NativeName(NativeNameType.Param, "pDst")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] ref D3D12TextureCopyLocation pDst, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "DstZ")] [NativeName(NativeNameType.Type, "UINT")] uint dstZ, [NativeName(NativeNameType.Param, "pSrc")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] D3D12TextureCopyLocation* pSrc, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] ref D3D12Box pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppDst = &pDst)
			{
				fixed (D3D12Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, (D3D12TextureCopyLocation*)ppDst, dstX, dstY, dstZ, pSrc, (D3D12Box*)ppSrcBox);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTextureRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTextureRegion([NativeName(NativeNameType.Param, "pDst")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] D3D12TextureCopyLocation* pDst, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "DstZ")] [NativeName(NativeNameType.Type, "UINT")] uint dstZ, [NativeName(NativeNameType.Param, "pSrc")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] ref D3D12TextureCopyLocation pSrc, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] ref D3D12Box pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppSrc = &pSrc)
			{
				fixed (D3D12Box* ppSrcBox = &pSrcBox)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, pDst, dstX, dstY, dstZ, (D3D12TextureCopyLocation*)ppSrc, (D3D12Box*)ppSrcBox);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTextureRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTextureRegion([NativeName(NativeNameType.Param, "pDst")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] ref D3D12TextureCopyLocation pDst, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "DstZ")] [NativeName(NativeNameType.Type, "UINT")] uint dstZ, [NativeName(NativeNameType.Param, "pSrc")] [NativeName(NativeNameType.Type, "const D3D12_TEXTURE_COPY_LOCATION*")] ref D3D12TextureCopyLocation pSrc, [NativeName(NativeNameType.Param, "pSrcBox")] [NativeName(NativeNameType.Type, "const D3D12_BOX*")] ref D3D12Box pSrcBox)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TextureCopyLocation* ppDst = &pDst)
			{
				fixed (D3D12TextureCopyLocation* ppSrc = &pSrc)
				{
					fixed (D3D12Box* ppSrcBox = &pSrcBox)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12TextureCopyLocation*, uint, uint, uint, D3D12TextureCopyLocation*, D3D12Box*, void>)(LpVtbl[8]))(ptr, (D3D12TextureCopyLocation*)ppDst, dstX, dstY, dstZ, (D3D12TextureCopyLocation*)ppSrc, (D3D12Box*)ppSrcBox);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyResource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyResource([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*, void>)(LpVtbl[9]))(ptr, pDstResource, pSrcResource);
		}

		[NativeName(NativeNameType.Func, "CopyResource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyResource([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, pSrcResource);
			}
		}

		[NativeName(NativeNameType.Func, "CopyResource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyResource([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*, void>)(LpVtbl[9]))(ptr, pDstResource, (ID3D12Resource*)ppSrcResource);
			}
		}

		[NativeName(NativeNameType.Func, "CopyResource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyResource([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*, void>)(LpVtbl[9]))(ptr, (ID3D12Resource*)ppDstResource, (ID3D12Resource*)ppSrcResource);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, pTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, pTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, pBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppBuffer = &pBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (ID3D12Resource* ppBuffer = &pBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, pTileRegionStartCoordinate, pTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppBuffer = &pBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppBuffer = &pBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, pTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
			{
				fixed (ID3D12Resource* ppBuffer = &pBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, pTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					fixed (ID3D12Resource* ppBuffer = &pBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, pTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
			{
				fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
				{
					fixed (ID3D12Resource* ppBuffer = &pBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, pTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTiles")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTiles([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pTileRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pTileRegionStartCoordinate, [NativeName(NativeNameType.Param, "pTileRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pTileRegionSize, [NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pBuffer, [NativeName(NativeNameType.Param, "BufferStartOffsetInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong bufferStartOffsetInBytes, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_COPY_FLAGS")] D3D12TileCopyFlags flags)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppTileRegionStartCoordinate = &pTileRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppTileRegionSize = &pTileRegionSize)
					{
						fixed (ID3D12Resource* ppBuffer = &pBuffer)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Resource*, ulong, D3D12TileCopyFlags, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)ppTiledResource, (D3D12TiledResourceCoordinate*)ppTileRegionStartCoordinate, (D3D12TileRegionSize*)ppTileRegionSize, (ID3D12Resource*)ppBuffer, bufferStartOffsetInBytes, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresource([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, uint, ID3D12Resource*, uint, DxgiFormat, void>)(LpVtbl[11]))(ptr, pDstResource, dstSubresource, pSrcResource, srcSubresource, format);
		}

		[NativeName(NativeNameType.Func, "ResolveSubresource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresource([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, uint, ID3D12Resource*, uint, DxgiFormat, void>)(LpVtbl[11]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, pSrcResource, srcSubresource, format);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresource([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, uint, ID3D12Resource*, uint, DxgiFormat, void>)(LpVtbl[11]))(ptr, pDstResource, dstSubresource, (ID3D12Resource*)ppSrcResource, srcSubresource, format);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresource([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, uint, ID3D12Resource*, uint, DxgiFormat, void>)(LpVtbl[11]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, (ID3D12Resource*)ppSrcResource, srcSubresource, format);
				}
			}
		}

		[NativeName(NativeNameType.Func, "IASetPrimitiveTopology")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void IASetPrimitiveTopology([NativeName(NativeNameType.Param, "PrimitiveTopology")] [NativeName(NativeNameType.Type, "D3D12_PRIMITIVE_TOPOLOGY")] D3D12PrimitiveTopology primitiveTopology)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12PrimitiveTopology, void>)(LpVtbl[12]))(ptr, primitiveTopology);
		}

		[NativeName(NativeNameType.Func, "RSSetViewports")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void RSSetViewports([NativeName(NativeNameType.Param, "NumViewports")] [NativeName(NativeNameType.Type, "UINT")] uint numViewports, [NativeName(NativeNameType.Param, "pViewports")] [NativeName(NativeNameType.Type, "const D3D12_VIEWPORT*")] D3D12Viewport* pViewports)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12Viewport*, void>)(LpVtbl[13]))(ptr, numViewports, pViewports);
		}

		[NativeName(NativeNameType.Func, "RSSetViewports")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void RSSetViewports([NativeName(NativeNameType.Param, "NumViewports")] [NativeName(NativeNameType.Type, "UINT")] uint numViewports, [NativeName(NativeNameType.Param, "pViewports")] [NativeName(NativeNameType.Type, "const D3D12_VIEWPORT*")] ref D3D12Viewport pViewports)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Viewport* ppViewports = &pViewports)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12Viewport*, void>)(LpVtbl[13]))(ptr, numViewports, (D3D12Viewport*)ppViewports);
			}
		}

		[NativeName(NativeNameType.Func, "RSSetScissorRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void RSSetScissorRects([NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, Rect32*, void>)(LpVtbl[14]))(ptr, numRects, pRects);
		}

		[NativeName(NativeNameType.Func, "RSSetScissorRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void RSSetScissorRects([NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, Rect32*, void>)(LpVtbl[14]))(ptr, numRects, (Rect32*)ppRects);
			}
		}

		[NativeName(NativeNameType.Func, "OMSetBlendFactor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void OMSetBlendFactor([NativeName(NativeNameType.Param, "BlendFactor")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] float* blendFactor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, float*, void>)(LpVtbl[15]))(ptr, blendFactor);
		}

		[NativeName(NativeNameType.Func, "OMSetBlendFactor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void OMSetBlendFactor([NativeName(NativeNameType.Param, "BlendFactor")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] ref float blendFactor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pblendFactor = &blendFactor)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, float*, void>)(LpVtbl[15]))(ptr, (float*)pblendFactor);
			}
		}

		[NativeName(NativeNameType.Func, "OMSetStencilRef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void OMSetStencilRef([NativeName(NativeNameType.Param, "StencilRef")] [NativeName(NativeNameType.Type, "UINT")] uint stencilRef)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void>)(LpVtbl[16]))(ptr, stencilRef);
		}

		[NativeName(NativeNameType.Func, "SetPipelineState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetPipelineState([NativeName(NativeNameType.Param, "pPipelineState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pPipelineState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(LpVtbl[17]))(ptr, pPipelineState);
		}

		[NativeName(NativeNameType.Func, "SetPipelineState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetPipelineState([NativeName(NativeNameType.Param, "pPipelineState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pPipelineState)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppPipelineState = &pPipelineState)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12PipelineState*, void>)(LpVtbl[17]))(ptr, (ID3D12PipelineState*)ppPipelineState);
			}
		}

		[NativeName(NativeNameType.Func, "ResourceBarrier")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResourceBarrier([NativeName(NativeNameType.Param, "NumBarriers")] [NativeName(NativeNameType.Type, "UINT")] uint numBarriers, [NativeName(NativeNameType.Param, "pBarriers")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_BARRIER*")] D3D12ResourceBarrier* pBarriers)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12ResourceBarrier*, void>)(LpVtbl[18]))(ptr, numBarriers, pBarriers);
		}

		[NativeName(NativeNameType.Func, "ResourceBarrier")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResourceBarrier([NativeName(NativeNameType.Param, "NumBarriers")] [NativeName(NativeNameType.Type, "UINT")] uint numBarriers, [NativeName(NativeNameType.Param, "pBarriers")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_BARRIER*")] ref D3D12ResourceBarrier pBarriers)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceBarrier* ppBarriers = &pBarriers)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12ResourceBarrier*, void>)(LpVtbl[18]))(ptr, numBarriers, (D3D12ResourceBarrier*)ppBarriers);
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteBundle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteBundle([NativeName(NativeNameType.Param, "pCommandList")] [NativeName(NativeNameType.Type, "ID3D12GraphicsCommandList*")] ID3D12GraphicsCommandList* pCommandList)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12GraphicsCommandList*, void>)(LpVtbl[19]))(ptr, pCommandList);
		}

		[NativeName(NativeNameType.Func, "ExecuteBundle")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteBundle([NativeName(NativeNameType.Param, "pCommandList")] [NativeName(NativeNameType.Type, "ID3D12GraphicsCommandList*")] ref ID3D12GraphicsCommandList pCommandList)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12GraphicsCommandList* ppCommandList = &pCommandList)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12GraphicsCommandList*, void>)(LpVtbl[19]))(ptr, (ID3D12GraphicsCommandList*)ppCommandList);
			}
		}

		[NativeName(NativeNameType.Func, "SetDescriptorHeaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetDescriptorHeaps([NativeName(NativeNameType.Param, "NumDescriptorHeaps")] [NativeName(NativeNameType.Type, "UINT")] uint numDescriptorHeaps, [NativeName(NativeNameType.Param, "ppDescriptorHeaps")] [NativeName(NativeNameType.Type, "const ID3D12DescriptorHeap**")] ID3D12DescriptorHeap** ppDescriptorHeaps)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ID3D12DescriptorHeap**, void>)(LpVtbl[20]))(ptr, numDescriptorHeaps, ppDescriptorHeaps);
		}

		[NativeName(NativeNameType.Func, "SetDescriptorHeaps")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetDescriptorHeaps([NativeName(NativeNameType.Param, "NumDescriptorHeaps")] [NativeName(NativeNameType.Type, "UINT")] uint numDescriptorHeaps, [NativeName(NativeNameType.Param, "ppDescriptorHeaps")] [NativeName(NativeNameType.Type, "const ID3D12DescriptorHeap**")] ref ID3D12DescriptorHeap* ppDescriptorHeaps)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DescriptorHeap** pppDescriptorHeaps = &ppDescriptorHeaps)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ID3D12DescriptorHeap**, void>)(LpVtbl[20]))(ptr, numDescriptorHeaps, (ID3D12DescriptorHeap**)pppDescriptorHeaps);
			}
		}

		[NativeName(NativeNameType.Func, "SetComputeRootSignature")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetComputeRootSignature([NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ID3D12RootSignature* pRootSignature)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(LpVtbl[21]))(ptr, pRootSignature);
		}

		[NativeName(NativeNameType.Func, "SetComputeRootSignature")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetComputeRootSignature([NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ref ID3D12RootSignature pRootSignature)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(LpVtbl[21]))(ptr, (ID3D12RootSignature*)ppRootSignature);
			}
		}

		[NativeName(NativeNameType.Func, "SetGraphicsRootSignature")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetGraphicsRootSignature([NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ID3D12RootSignature* pRootSignature)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(LpVtbl[22]))(ptr, pRootSignature);
		}

		[NativeName(NativeNameType.Func, "SetGraphicsRootSignature")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetGraphicsRootSignature([NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ref ID3D12RootSignature pRootSignature)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12RootSignature*, void>)(LpVtbl[22]))(ptr, (ID3D12RootSignature*)ppRootSignature);
			}
		}

		[NativeName(NativeNameType.Func, "SetComputeRootDescriptorTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetComputeRootDescriptorTable([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "BaseDescriptor")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle baseDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuDescriptorHandle, void>)(LpVtbl[23]))(ptr, rootParameterIndex, baseDescriptor);
		}

		[NativeName(NativeNameType.Func, "SetGraphicsRootDescriptorTable")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetGraphicsRootDescriptorTable([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "BaseDescriptor")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle baseDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12GpuDescriptorHandle, void>)(LpVtbl[24]))(ptr, rootParameterIndex, baseDescriptor);
		}

		[NativeName(NativeNameType.Func, "SetComputeRoot32BitConstant")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetComputeRoot32BitConstant([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "SrcData")] [NativeName(NativeNameType.Type, "UINT")] uint srcData, [NativeName(NativeNameType.Param, "DestOffsetIn32BitValues")] [NativeName(NativeNameType.Type, "UINT")] uint destOffsetIn32BitValues)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>)(LpVtbl[25]))(ptr, rootParameterIndex, srcData, destOffsetIn32BitValues);
		}

		[NativeName(NativeNameType.Func, "SetGraphicsRoot32BitConstant")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetGraphicsRoot32BitConstant([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "SrcData")] [NativeName(NativeNameType.Type, "UINT")] uint srcData, [NativeName(NativeNameType.Param, "DestOffsetIn32BitValues")] [NativeName(NativeNameType.Type, "UINT")] uint destOffsetIn32BitValues)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, uint, void>)(LpVtbl[26]))(ptr, rootParameterIndex, srcData, destOffsetIn32BitValues);
		}

		[NativeName(NativeNameType.Func, "SetComputeRoot32BitConstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetComputeRoot32BitConstants([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "Num32BitValuesToSet")] [NativeName(NativeNameType.Type, "UINT")] uint num32BitValuesToSet, [NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "const void*")] void* pSrcData, [NativeName(NativeNameType.Param, "DestOffsetIn32BitValues")] [NativeName(NativeNameType.Type, "UINT")] uint destOffsetIn32BitValues)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, void*, uint, void>)(LpVtbl[27]))(ptr, rootParameterIndex, num32BitValuesToSet, pSrcData, destOffsetIn32BitValues);
		}

		[NativeName(NativeNameType.Func, "SetGraphicsRoot32BitConstants")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetGraphicsRoot32BitConstants([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "Num32BitValuesToSet")] [NativeName(NativeNameType.Type, "UINT")] uint num32BitValuesToSet, [NativeName(NativeNameType.Param, "pSrcData")] [NativeName(NativeNameType.Type, "const void*")] void* pSrcData, [NativeName(NativeNameType.Param, "DestOffsetIn32BitValues")] [NativeName(NativeNameType.Type, "UINT")] uint destOffsetIn32BitValues)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, void*, uint, void>)(LpVtbl[28]))(ptr, rootParameterIndex, num32BitValuesToSet, pSrcData, destOffsetIn32BitValues);
		}

		[NativeName(NativeNameType.Func, "SetComputeRootConstantBufferView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetComputeRootConstantBufferView([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "BufferLocation")] [NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")] ulong bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(LpVtbl[29]))(ptr, rootParameterIndex, bufferLocation);
		}

		[NativeName(NativeNameType.Func, "SetGraphicsRootConstantBufferView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetGraphicsRootConstantBufferView([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "BufferLocation")] [NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")] ulong bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(LpVtbl[30]))(ptr, rootParameterIndex, bufferLocation);
		}

		[NativeName(NativeNameType.Func, "SetComputeRootShaderResourceView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetComputeRootShaderResourceView([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "BufferLocation")] [NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")] ulong bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(LpVtbl[31]))(ptr, rootParameterIndex, bufferLocation);
		}

		[NativeName(NativeNameType.Func, "SetGraphicsRootShaderResourceView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetGraphicsRootShaderResourceView([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "BufferLocation")] [NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")] ulong bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(LpVtbl[32]))(ptr, rootParameterIndex, bufferLocation);
		}

		[NativeName(NativeNameType.Func, "SetComputeRootUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetComputeRootUnorderedAccessView([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "BufferLocation")] [NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")] ulong bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(LpVtbl[33]))(ptr, rootParameterIndex, bufferLocation);
		}

		[NativeName(NativeNameType.Func, "SetGraphicsRootUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetGraphicsRootUnorderedAccessView([NativeName(NativeNameType.Param, "RootParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint rootParameterIndex, [NativeName(NativeNameType.Param, "BufferLocation")] [NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")] ulong bufferLocation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, ulong, void>)(LpVtbl[34]))(ptr, rootParameterIndex, bufferLocation);
		}

		[NativeName(NativeNameType.Func, "IASetIndexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void IASetIndexBuffer([NativeName(NativeNameType.Param, "pView")] [NativeName(NativeNameType.Type, "const D3D12_INDEX_BUFFER_VIEW*")] D3D12IndexBufferView* pView)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12IndexBufferView*, void>)(LpVtbl[35]))(ptr, pView);
		}

		[NativeName(NativeNameType.Func, "IASetIndexBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void IASetIndexBuffer([NativeName(NativeNameType.Param, "pView")] [NativeName(NativeNameType.Type, "const D3D12_INDEX_BUFFER_VIEW*")] ref D3D12IndexBufferView pView)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12IndexBufferView* ppView = &pView)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12IndexBufferView*, void>)(LpVtbl[35]))(ptr, (D3D12IndexBufferView*)ppView);
			}
		}

		[NativeName(NativeNameType.Func, "IASetVertexBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void IASetVertexBuffers([NativeName(NativeNameType.Param, "StartSlot")] [NativeName(NativeNameType.Type, "UINT")] uint startSlot, [NativeName(NativeNameType.Param, "NumViews")] [NativeName(NativeNameType.Type, "UINT")] uint numViews, [NativeName(NativeNameType.Param, "pViews")] [NativeName(NativeNameType.Type, "const D3D12_VERTEX_BUFFER_VIEW*")] D3D12VertexBufferView* pViews)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, D3D12VertexBufferView*, void>)(LpVtbl[36]))(ptr, startSlot, numViews, pViews);
		}

		[NativeName(NativeNameType.Func, "IASetVertexBuffers")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void IASetVertexBuffers([NativeName(NativeNameType.Param, "StartSlot")] [NativeName(NativeNameType.Type, "UINT")] uint startSlot, [NativeName(NativeNameType.Param, "NumViews")] [NativeName(NativeNameType.Type, "UINT")] uint numViews, [NativeName(NativeNameType.Param, "pViews")] [NativeName(NativeNameType.Type, "const D3D12_VERTEX_BUFFER_VIEW*")] ref D3D12VertexBufferView pViews)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VertexBufferView* ppViews = &pViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, D3D12VertexBufferView*, void>)(LpVtbl[36]))(ptr, startSlot, numViews, (D3D12VertexBufferView*)ppViews);
			}
		}

		[NativeName(NativeNameType.Func, "SOSetTargets")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SOSetTargets([NativeName(NativeNameType.Param, "StartSlot")] [NativeName(NativeNameType.Type, "UINT")] uint startSlot, [NativeName(NativeNameType.Param, "NumViews")] [NativeName(NativeNameType.Type, "UINT")] uint numViews, [NativeName(NativeNameType.Param, "pViews")] [NativeName(NativeNameType.Type, "const D3D12_STREAM_OUTPUT_BUFFER_VIEW*")] D3D12StreamOutputBufferView* pViews)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, D3D12StreamOutputBufferView*, void>)(LpVtbl[37]))(ptr, startSlot, numViews, pViews);
		}

		[NativeName(NativeNameType.Func, "SOSetTargets")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SOSetTargets([NativeName(NativeNameType.Param, "StartSlot")] [NativeName(NativeNameType.Type, "UINT")] uint startSlot, [NativeName(NativeNameType.Param, "NumViews")] [NativeName(NativeNameType.Type, "UINT")] uint numViews, [NativeName(NativeNameType.Param, "pViews")] [NativeName(NativeNameType.Type, "const D3D12_STREAM_OUTPUT_BUFFER_VIEW*")] ref D3D12StreamOutputBufferView pViews)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12StreamOutputBufferView* ppViews = &pViews)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, uint, D3D12StreamOutputBufferView*, void>)(LpVtbl[37]))(ptr, startSlot, numViews, (D3D12StreamOutputBufferView*)ppViews);
			}
		}

		[NativeName(NativeNameType.Func, "OMSetRenderTargets")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void OMSetRenderTargets([NativeName(NativeNameType.Param, "NumRenderTargetDescriptors")] [NativeName(NativeNameType.Type, "UINT")] uint numRenderTargetDescriptors, [NativeName(NativeNameType.Param, "pRenderTargetDescriptors")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pRenderTargetDescriptors, [NativeName(NativeNameType.Param, "RTsSingleHandleToDescriptorRange")] [NativeName(NativeNameType.Type, "BOOL")] int rTsSingleHandleToDescriptorRange, [NativeName(NativeNameType.Param, "pDepthStencilDescriptor")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDepthStencilDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12CpuDescriptorHandle*, int, D3D12CpuDescriptorHandle*, void>)(LpVtbl[38]))(ptr, numRenderTargetDescriptors, pRenderTargetDescriptors, rTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
		}

		[NativeName(NativeNameType.Func, "OMSetRenderTargets")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void OMSetRenderTargets([NativeName(NativeNameType.Param, "NumRenderTargetDescriptors")] [NativeName(NativeNameType.Type, "UINT")] uint numRenderTargetDescriptors, [NativeName(NativeNameType.Param, "pRenderTargetDescriptors")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pRenderTargetDescriptors, [NativeName(NativeNameType.Param, "RTsSingleHandleToDescriptorRange")] [NativeName(NativeNameType.Type, "BOOL")] int rTsSingleHandleToDescriptorRange, [NativeName(NativeNameType.Param, "pDepthStencilDescriptor")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDepthStencilDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppRenderTargetDescriptors = &pRenderTargetDescriptors)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12CpuDescriptorHandle*, int, D3D12CpuDescriptorHandle*, void>)(LpVtbl[38]))(ptr, numRenderTargetDescriptors, (D3D12CpuDescriptorHandle*)ppRenderTargetDescriptors, rTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "OMSetRenderTargets")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void OMSetRenderTargets([NativeName(NativeNameType.Param, "NumRenderTargetDescriptors")] [NativeName(NativeNameType.Type, "UINT")] uint numRenderTargetDescriptors, [NativeName(NativeNameType.Param, "pRenderTargetDescriptors")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pRenderTargetDescriptors, [NativeName(NativeNameType.Param, "RTsSingleHandleToDescriptorRange")] [NativeName(NativeNameType.Type, "BOOL")] int rTsSingleHandleToDescriptorRange, [NativeName(NativeNameType.Param, "pDepthStencilDescriptor")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDepthStencilDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDepthStencilDescriptor = &pDepthStencilDescriptor)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12CpuDescriptorHandle*, int, D3D12CpuDescriptorHandle*, void>)(LpVtbl[38]))(ptr, numRenderTargetDescriptors, pRenderTargetDescriptors, rTsSingleHandleToDescriptorRange, (D3D12CpuDescriptorHandle*)ppDepthStencilDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "OMSetRenderTargets")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void OMSetRenderTargets([NativeName(NativeNameType.Param, "NumRenderTargetDescriptors")] [NativeName(NativeNameType.Type, "UINT")] uint numRenderTargetDescriptors, [NativeName(NativeNameType.Param, "pRenderTargetDescriptors")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pRenderTargetDescriptors, [NativeName(NativeNameType.Param, "RTsSingleHandleToDescriptorRange")] [NativeName(NativeNameType.Type, "BOOL")] int rTsSingleHandleToDescriptorRange, [NativeName(NativeNameType.Param, "pDepthStencilDescriptor")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDepthStencilDescriptor)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppRenderTargetDescriptors = &pRenderTargetDescriptors)
			{
				fixed (D3D12CpuDescriptorHandle* ppDepthStencilDescriptor = &pDepthStencilDescriptor)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, D3D12CpuDescriptorHandle*, int, D3D12CpuDescriptorHandle*, void>)(LpVtbl[38]))(ptr, numRenderTargetDescriptors, (D3D12CpuDescriptorHandle*)ppRenderTargetDescriptors, rTsSingleHandleToDescriptorRange, (D3D12CpuDescriptorHandle*)ppDepthStencilDescriptor);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearDepthStencilView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearDepthStencilView([NativeName(NativeNameType.Param, "DepthStencilView")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle depthStencilView, [NativeName(NativeNameType.Param, "ClearFlags")] [NativeName(NativeNameType.Type, "D3D12_CLEAR_FLAGS")] D3D12ClearFlags clearFlags, [NativeName(NativeNameType.Param, "Depth")] [NativeName(NativeNameType.Type, "FLOAT")] float depth, [NativeName(NativeNameType.Param, "Stencil")] [NativeName(NativeNameType.Type, "UINT8")] byte stencil, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, D3D12ClearFlags, float, byte, uint, Rect32*, void>)(LpVtbl[39]))(ptr, depthStencilView, clearFlags, depth, stencil, numRects, pRects);
		}

		[NativeName(NativeNameType.Func, "ClearDepthStencilView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearDepthStencilView([NativeName(NativeNameType.Param, "DepthStencilView")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle depthStencilView, [NativeName(NativeNameType.Param, "ClearFlags")] [NativeName(NativeNameType.Type, "D3D12_CLEAR_FLAGS")] D3D12ClearFlags clearFlags, [NativeName(NativeNameType.Param, "Depth")] [NativeName(NativeNameType.Type, "FLOAT")] float depth, [NativeName(NativeNameType.Param, "Stencil")] [NativeName(NativeNameType.Type, "UINT8")] byte stencil, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, D3D12ClearFlags, float, byte, uint, Rect32*, void>)(LpVtbl[39]))(ptr, depthStencilView, clearFlags, depth, stencil, numRects, (Rect32*)ppRects);
			}
		}

		[NativeName(NativeNameType.Func, "ClearRenderTargetView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearRenderTargetView([NativeName(NativeNameType.Param, "RenderTargetView")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle renderTargetView, [NativeName(NativeNameType.Param, "ColorRGBA")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] float* colorRGBA, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, float*, uint, Rect32*, void>)(LpVtbl[40]))(ptr, renderTargetView, colorRGBA, numRects, pRects);
		}

		[NativeName(NativeNameType.Func, "ClearRenderTargetView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearRenderTargetView([NativeName(NativeNameType.Param, "RenderTargetView")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle renderTargetView, [NativeName(NativeNameType.Param, "ColorRGBA")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] ref float colorRGBA, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pcolorRGBA = &colorRGBA)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, float*, uint, Rect32*, void>)(LpVtbl[40]))(ptr, renderTargetView, (float*)pcolorRGBA, numRects, pRects);
			}
		}

		[NativeName(NativeNameType.Func, "ClearRenderTargetView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearRenderTargetView([NativeName(NativeNameType.Param, "RenderTargetView")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle renderTargetView, [NativeName(NativeNameType.Param, "ColorRGBA")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] float* colorRGBA, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, float*, uint, Rect32*, void>)(LpVtbl[40]))(ptr, renderTargetView, colorRGBA, numRects, (Rect32*)ppRects);
			}
		}

		[NativeName(NativeNameType.Func, "ClearRenderTargetView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearRenderTargetView([NativeName(NativeNameType.Param, "RenderTargetView")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle renderTargetView, [NativeName(NativeNameType.Param, "ColorRGBA")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] ref float colorRGBA, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pcolorRGBA = &colorRGBA)
			{
				fixed (Rect32* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12CpuDescriptorHandle, float*, uint, Rect32*, void>)(LpVtbl[40]))(ptr, renderTargetView, (float*)pcolorRGBA, numRects, (Rect32*)ppRects);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewUint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewUint([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const UINT[4]")] uint* values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, Rect32*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, values, numRects, pRects);
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewUint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewUint([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const UINT[4]")] uint* values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, Rect32*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, values, numRects, pRects);
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewUint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewUint([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const UINT[4]")] ref uint values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* pvalues = &values)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, Rect32*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, (uint*)pvalues, numRects, pRects);
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewUint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewUint([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const UINT[4]")] ref uint values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* pvalues = &values)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, Rect32*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, (uint*)pvalues, numRects, pRects);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewUint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewUint([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const UINT[4]")] uint* values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, Rect32*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, values, numRects, (Rect32*)ppRects);
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewUint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewUint([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const UINT[4]")] uint* values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (Rect32* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, Rect32*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, values, numRects, (Rect32*)ppRects);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewUint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewUint([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const UINT[4]")] ref uint values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* pvalues = &values)
			{
				fixed (Rect32* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, Rect32*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, (uint*)pvalues, numRects, (Rect32*)ppRects);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewUint")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewUint([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const UINT[4]")] ref uint values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* pvalues = &values)
				{
					fixed (Rect32* ppRects = &pRects)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, uint*, uint, Rect32*, void>)(LpVtbl[41]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, (uint*)pvalues, numRects, (Rect32*)ppRects);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewFloat([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] float* values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, values, numRects, pRects);
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewFloat([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] float* values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, values, numRects, pRects);
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewFloat([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] ref float values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pvalues = &values)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, (float*)pvalues, numRects, pRects);
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewFloat([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] ref float values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] Rect32* pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (float* pvalues = &values)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, (float*)pvalues, numRects, pRects);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewFloat([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] float* values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppRects = &pRects)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, values, numRects, (Rect32*)ppRects);
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewFloat([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] float* values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (Rect32* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, values, numRects, (Rect32*)ppRects);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewFloat([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] ref float values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (float* pvalues = &values)
			{
				fixed (Rect32* ppRects = &pRects)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, pResource, (float*)pvalues, numRects, (Rect32*)ppRects);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearUnorderedAccessViewFloat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearUnorderedAccessViewFloat([NativeName(NativeNameType.Param, "ViewGPUHandleInCurrentHeap")] [NativeName(NativeNameType.Type, "D3D12_GPU_DESCRIPTOR_HANDLE")] D3D12GpuDescriptorHandle viewGPUHandleInCurrentHeap, [NativeName(NativeNameType.Param, "ViewCPUHandle")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle viewCPUHandle, [NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Values")] [NativeName(NativeNameType.Type, "const FLOAT[4]")] ref float values, [NativeName(NativeNameType.Param, "NumRects")] [NativeName(NativeNameType.Type, "UINT")] uint numRects, [NativeName(NativeNameType.Param, "pRects")] [NativeName(NativeNameType.Type, "const D3D12_RECT*")] ref Rect32 pRects)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (float* pvalues = &values)
				{
					fixed (Rect32* ppRects = &pRects)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, D3D12GpuDescriptorHandle, D3D12CpuDescriptorHandle, ID3D12Resource*, float*, uint, Rect32*, void>)(LpVtbl[42]))(ptr, viewGPUHandleInCurrentHeap, viewCPUHandle, (ID3D12Resource*)ppResource, (float*)pvalues, numRects, (Rect32*)ppRects);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "DiscardResource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DiscardResource([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pRegion")] [NativeName(NativeNameType.Type, "const D3D12_DISCARD_REGION*")] D3D12DiscardRegion* pRegion)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12DiscardRegion*, void>)(LpVtbl[43]))(ptr, pResource, pRegion);
		}

		[NativeName(NativeNameType.Func, "DiscardResource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DiscardResource([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pRegion")] [NativeName(NativeNameType.Type, "const D3D12_DISCARD_REGION*")] D3D12DiscardRegion* pRegion)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12DiscardRegion*, void>)(LpVtbl[43]))(ptr, (ID3D12Resource*)ppResource, pRegion);
			}
		}

		[NativeName(NativeNameType.Func, "DiscardResource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DiscardResource([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pRegion")] [NativeName(NativeNameType.Type, "const D3D12_DISCARD_REGION*")] ref D3D12DiscardRegion pRegion)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DiscardRegion* ppRegion = &pRegion)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12DiscardRegion*, void>)(LpVtbl[43]))(ptr, pResource, (D3D12DiscardRegion*)ppRegion);
			}
		}

		[NativeName(NativeNameType.Func, "DiscardResource")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DiscardResource([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pRegion")] [NativeName(NativeNameType.Type, "const D3D12_DISCARD_REGION*")] ref D3D12DiscardRegion pRegion)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12DiscardRegion* ppRegion = &pRegion)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, D3D12DiscardRegion*, void>)(LpVtbl[43]))(ptr, (ID3D12Resource*)ppResource, (D3D12DiscardRegion*)ppRegion);
				}
			}
		}

		[NativeName(NativeNameType.Func, "BeginQuery")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BeginQuery([NativeName(NativeNameType.Param, "pQueryHeap")] [NativeName(NativeNameType.Type, "ID3D12QueryHeap*")] ID3D12QueryHeap* pQueryHeap, [NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_QUERY_TYPE")] D3D12QueryType type, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, void>)(LpVtbl[44]))(ptr, pQueryHeap, type, index);
		}

		[NativeName(NativeNameType.Func, "BeginQuery")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BeginQuery([NativeName(NativeNameType.Param, "pQueryHeap")] [NativeName(NativeNameType.Type, "ID3D12QueryHeap*")] ref ID3D12QueryHeap pQueryHeap, [NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_QUERY_TYPE")] D3D12QueryType type, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12QueryHeap* ppQueryHeap = &pQueryHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, void>)(LpVtbl[44]))(ptr, (ID3D12QueryHeap*)ppQueryHeap, type, index);
			}
		}

		[NativeName(NativeNameType.Func, "EndQuery")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EndQuery([NativeName(NativeNameType.Param, "pQueryHeap")] [NativeName(NativeNameType.Type, "ID3D12QueryHeap*")] ID3D12QueryHeap* pQueryHeap, [NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_QUERY_TYPE")] D3D12QueryType type, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, void>)(LpVtbl[45]))(ptr, pQueryHeap, type, index);
		}

		[NativeName(NativeNameType.Func, "EndQuery")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EndQuery([NativeName(NativeNameType.Param, "pQueryHeap")] [NativeName(NativeNameType.Type, "ID3D12QueryHeap*")] ref ID3D12QueryHeap pQueryHeap, [NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_QUERY_TYPE")] D3D12QueryType type, [NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12QueryHeap* ppQueryHeap = &pQueryHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, void>)(LpVtbl[45]))(ptr, (ID3D12QueryHeap*)ppQueryHeap, type, index);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveQueryData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveQueryData([NativeName(NativeNameType.Param, "pQueryHeap")] [NativeName(NativeNameType.Type, "ID3D12QueryHeap*")] ID3D12QueryHeap* pQueryHeap, [NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_QUERY_TYPE")] D3D12QueryType type, [NativeName(NativeNameType.Param, "StartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint startIndex, [NativeName(NativeNameType.Param, "NumQueries")] [NativeName(NativeNameType.Type, "UINT")] uint numQueries, [NativeName(NativeNameType.Param, "pDestinationBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDestinationBuffer, [NativeName(NativeNameType.Param, "AlignedDestinationBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong alignedDestinationBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, uint, ID3D12Resource*, ulong, void>)(LpVtbl[46]))(ptr, pQueryHeap, type, startIndex, numQueries, pDestinationBuffer, alignedDestinationBufferOffset);
		}

		[NativeName(NativeNameType.Func, "ResolveQueryData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveQueryData([NativeName(NativeNameType.Param, "pQueryHeap")] [NativeName(NativeNameType.Type, "ID3D12QueryHeap*")] ref ID3D12QueryHeap pQueryHeap, [NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_QUERY_TYPE")] D3D12QueryType type, [NativeName(NativeNameType.Param, "StartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint startIndex, [NativeName(NativeNameType.Param, "NumQueries")] [NativeName(NativeNameType.Type, "UINT")] uint numQueries, [NativeName(NativeNameType.Param, "pDestinationBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDestinationBuffer, [NativeName(NativeNameType.Param, "AlignedDestinationBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong alignedDestinationBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12QueryHeap* ppQueryHeap = &pQueryHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, uint, ID3D12Resource*, ulong, void>)(LpVtbl[46]))(ptr, (ID3D12QueryHeap*)ppQueryHeap, type, startIndex, numQueries, pDestinationBuffer, alignedDestinationBufferOffset);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveQueryData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveQueryData([NativeName(NativeNameType.Param, "pQueryHeap")] [NativeName(NativeNameType.Type, "ID3D12QueryHeap*")] ID3D12QueryHeap* pQueryHeap, [NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_QUERY_TYPE")] D3D12QueryType type, [NativeName(NativeNameType.Param, "StartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint startIndex, [NativeName(NativeNameType.Param, "NumQueries")] [NativeName(NativeNameType.Type, "UINT")] uint numQueries, [NativeName(NativeNameType.Param, "pDestinationBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDestinationBuffer, [NativeName(NativeNameType.Param, "AlignedDestinationBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong alignedDestinationBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDestinationBuffer = &pDestinationBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, uint, ID3D12Resource*, ulong, void>)(LpVtbl[46]))(ptr, pQueryHeap, type, startIndex, numQueries, (ID3D12Resource*)ppDestinationBuffer, alignedDestinationBufferOffset);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveQueryData")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveQueryData([NativeName(NativeNameType.Param, "pQueryHeap")] [NativeName(NativeNameType.Type, "ID3D12QueryHeap*")] ref ID3D12QueryHeap pQueryHeap, [NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_QUERY_TYPE")] D3D12QueryType type, [NativeName(NativeNameType.Param, "StartIndex")] [NativeName(NativeNameType.Type, "UINT")] uint startIndex, [NativeName(NativeNameType.Param, "NumQueries")] [NativeName(NativeNameType.Type, "UINT")] uint numQueries, [NativeName(NativeNameType.Param, "pDestinationBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDestinationBuffer, [NativeName(NativeNameType.Param, "AlignedDestinationBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong alignedDestinationBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12QueryHeap* ppQueryHeap = &pQueryHeap)
			{
				fixed (ID3D12Resource* ppDestinationBuffer = &pDestinationBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12QueryType, uint, uint, ID3D12Resource*, ulong, void>)(LpVtbl[46]))(ptr, (ID3D12QueryHeap*)ppQueryHeap, type, startIndex, numQueries, (ID3D12Resource*)ppDestinationBuffer, alignedDestinationBufferOffset);
				}
			}
		}

		[NativeName(NativeNameType.Func, "SetPredication")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetPredication([NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pBuffer, [NativeName(NativeNameType.Param, "AlignedBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong alignedBufferOffset, [NativeName(NativeNameType.Param, "Operation")] [NativeName(NativeNameType.Type, "D3D12_PREDICATION_OP")] D3D12PredicationOp operation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, D3D12PredicationOp, void>)(LpVtbl[47]))(ptr, pBuffer, alignedBufferOffset, operation);
		}

		[NativeName(NativeNameType.Func, "SetPredication")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetPredication([NativeName(NativeNameType.Param, "pBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pBuffer, [NativeName(NativeNameType.Param, "AlignedBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong alignedBufferOffset, [NativeName(NativeNameType.Param, "Operation")] [NativeName(NativeNameType.Type, "D3D12_PREDICATION_OP")] D3D12PredicationOp operation)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppBuffer = &pBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12Resource*, ulong, D3D12PredicationOp, void>)(LpVtbl[47]))(ptr, (ID3D12Resource*)ppBuffer, alignedBufferOffset, operation);
			}
		}

		[NativeName(NativeNameType.Func, "SetMarker")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetMarker([NativeName(NativeNameType.Param, "Metadata")] [NativeName(NativeNameType.Type, "UINT")] uint metadata, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData, [NativeName(NativeNameType.Param, "Size")] [NativeName(NativeNameType.Type, "UINT")] uint size)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void*, uint, void>)(LpVtbl[48]))(ptr, metadata, pData, size);
		}

		[NativeName(NativeNameType.Func, "BeginEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BeginEvent([NativeName(NativeNameType.Param, "Metadata")] [NativeName(NativeNameType.Type, "UINT")] uint metadata, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData, [NativeName(NativeNameType.Param, "Size")] [NativeName(NativeNameType.Type, "UINT")] uint size)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, uint, void*, uint, void>)(LpVtbl[49]))(ptr, metadata, pData, size);
		}

		[NativeName(NativeNameType.Func, "EndEvent")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EndEvent()
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, void>)(LpVtbl[50]))(ptr);
		}

		[NativeName(NativeNameType.Func, "ExecuteIndirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteIndirect([NativeName(NativeNameType.Param, "pCommandSignature")] [NativeName(NativeNameType.Type, "ID3D12CommandSignature*")] ID3D12CommandSignature* pCommandSignature, [NativeName(NativeNameType.Param, "MaxCommandCount")] [NativeName(NativeNameType.Type, "UINT")] uint maxCommandCount, [NativeName(NativeNameType.Param, "pArgumentBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pArgumentBuffer, [NativeName(NativeNameType.Param, "ArgumentBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong argumentBufferOffset, [NativeName(NativeNameType.Param, "pCountBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pCountBuffer, [NativeName(NativeNameType.Param, "CountBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, pCommandSignature, maxCommandCount, pArgumentBuffer, argumentBufferOffset, pCountBuffer, countBufferOffset);
		}

		[NativeName(NativeNameType.Func, "ExecuteIndirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteIndirect([NativeName(NativeNameType.Param, "pCommandSignature")] [NativeName(NativeNameType.Type, "ID3D12CommandSignature*")] ref ID3D12CommandSignature pCommandSignature, [NativeName(NativeNameType.Param, "MaxCommandCount")] [NativeName(NativeNameType.Type, "UINT")] uint maxCommandCount, [NativeName(NativeNameType.Param, "pArgumentBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pArgumentBuffer, [NativeName(NativeNameType.Param, "ArgumentBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong argumentBufferOffset, [NativeName(NativeNameType.Param, "pCountBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pCountBuffer, [NativeName(NativeNameType.Param, "CountBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandSignature* ppCommandSignature = &pCommandSignature)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, (ID3D12CommandSignature*)ppCommandSignature, maxCommandCount, pArgumentBuffer, argumentBufferOffset, pCountBuffer, countBufferOffset);
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteIndirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteIndirect([NativeName(NativeNameType.Param, "pCommandSignature")] [NativeName(NativeNameType.Type, "ID3D12CommandSignature*")] ID3D12CommandSignature* pCommandSignature, [NativeName(NativeNameType.Param, "MaxCommandCount")] [NativeName(NativeNameType.Type, "UINT")] uint maxCommandCount, [NativeName(NativeNameType.Param, "pArgumentBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pArgumentBuffer, [NativeName(NativeNameType.Param, "ArgumentBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong argumentBufferOffset, [NativeName(NativeNameType.Param, "pCountBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pCountBuffer, [NativeName(NativeNameType.Param, "CountBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppArgumentBuffer = &pArgumentBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, pCommandSignature, maxCommandCount, (ID3D12Resource*)ppArgumentBuffer, argumentBufferOffset, pCountBuffer, countBufferOffset);
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteIndirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteIndirect([NativeName(NativeNameType.Param, "pCommandSignature")] [NativeName(NativeNameType.Type, "ID3D12CommandSignature*")] ref ID3D12CommandSignature pCommandSignature, [NativeName(NativeNameType.Param, "MaxCommandCount")] [NativeName(NativeNameType.Type, "UINT")] uint maxCommandCount, [NativeName(NativeNameType.Param, "pArgumentBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pArgumentBuffer, [NativeName(NativeNameType.Param, "ArgumentBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong argumentBufferOffset, [NativeName(NativeNameType.Param, "pCountBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pCountBuffer, [NativeName(NativeNameType.Param, "CountBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandSignature* ppCommandSignature = &pCommandSignature)
			{
				fixed (ID3D12Resource* ppArgumentBuffer = &pArgumentBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, (ID3D12CommandSignature*)ppCommandSignature, maxCommandCount, (ID3D12Resource*)ppArgumentBuffer, argumentBufferOffset, pCountBuffer, countBufferOffset);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteIndirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteIndirect([NativeName(NativeNameType.Param, "pCommandSignature")] [NativeName(NativeNameType.Type, "ID3D12CommandSignature*")] ID3D12CommandSignature* pCommandSignature, [NativeName(NativeNameType.Param, "MaxCommandCount")] [NativeName(NativeNameType.Type, "UINT")] uint maxCommandCount, [NativeName(NativeNameType.Param, "pArgumentBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pArgumentBuffer, [NativeName(NativeNameType.Param, "ArgumentBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong argumentBufferOffset, [NativeName(NativeNameType.Param, "pCountBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pCountBuffer, [NativeName(NativeNameType.Param, "CountBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppCountBuffer = &pCountBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, pCommandSignature, maxCommandCount, pArgumentBuffer, argumentBufferOffset, (ID3D12Resource*)ppCountBuffer, countBufferOffset);
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteIndirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteIndirect([NativeName(NativeNameType.Param, "pCommandSignature")] [NativeName(NativeNameType.Type, "ID3D12CommandSignature*")] ref ID3D12CommandSignature pCommandSignature, [NativeName(NativeNameType.Param, "MaxCommandCount")] [NativeName(NativeNameType.Type, "UINT")] uint maxCommandCount, [NativeName(NativeNameType.Param, "pArgumentBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pArgumentBuffer, [NativeName(NativeNameType.Param, "ArgumentBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong argumentBufferOffset, [NativeName(NativeNameType.Param, "pCountBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pCountBuffer, [NativeName(NativeNameType.Param, "CountBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandSignature* ppCommandSignature = &pCommandSignature)
			{
				fixed (ID3D12Resource* ppCountBuffer = &pCountBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, (ID3D12CommandSignature*)ppCommandSignature, maxCommandCount, pArgumentBuffer, argumentBufferOffset, (ID3D12Resource*)ppCountBuffer, countBufferOffset);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteIndirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteIndirect([NativeName(NativeNameType.Param, "pCommandSignature")] [NativeName(NativeNameType.Type, "ID3D12CommandSignature*")] ID3D12CommandSignature* pCommandSignature, [NativeName(NativeNameType.Param, "MaxCommandCount")] [NativeName(NativeNameType.Type, "UINT")] uint maxCommandCount, [NativeName(NativeNameType.Param, "pArgumentBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pArgumentBuffer, [NativeName(NativeNameType.Param, "ArgumentBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong argumentBufferOffset, [NativeName(NativeNameType.Param, "pCountBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pCountBuffer, [NativeName(NativeNameType.Param, "CountBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppArgumentBuffer = &pArgumentBuffer)
			{
				fixed (ID3D12Resource* ppCountBuffer = &pCountBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, pCommandSignature, maxCommandCount, (ID3D12Resource*)ppArgumentBuffer, argumentBufferOffset, (ID3D12Resource*)ppCountBuffer, countBufferOffset);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteIndirect")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteIndirect([NativeName(NativeNameType.Param, "pCommandSignature")] [NativeName(NativeNameType.Type, "ID3D12CommandSignature*")] ref ID3D12CommandSignature pCommandSignature, [NativeName(NativeNameType.Param, "MaxCommandCount")] [NativeName(NativeNameType.Type, "UINT")] uint maxCommandCount, [NativeName(NativeNameType.Param, "pArgumentBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pArgumentBuffer, [NativeName(NativeNameType.Param, "ArgumentBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong argumentBufferOffset, [NativeName(NativeNameType.Param, "pCountBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pCountBuffer, [NativeName(NativeNameType.Param, "CountBufferOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong countBufferOffset)
		{
			ID3D12GraphicsCommandList* ptr = (ID3D12GraphicsCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandSignature* ppCommandSignature = &pCommandSignature)
			{
				fixed (ID3D12Resource* ppArgumentBuffer = &pArgumentBuffer)
				{
					fixed (ID3D12Resource* ppCountBuffer = &pCountBuffer)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList*, ID3D12CommandSignature*, uint, ID3D12Resource*, ulong, ID3D12Resource*, ulong, void>)(LpVtbl[51]))(ptr, (ID3D12CommandSignature*)ppCommandSignature, maxCommandCount, (ID3D12Resource*)ppArgumentBuffer, argumentBufferOffset, (ID3D12Resource*)ppCountBuffer, countBufferOffset);
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEXTURE_COPY_LOCATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TextureCopyLocation
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12TextureCopyLocationUnion
		{
			[NativeName(NativeNameType.Field, "PlacedFootprint")]
			[NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT")]
			[FieldOffset(0)]
			public D3D12PlacedSubresourceFootprint PlacedFootprint;
			[NativeName(NativeNameType.Field, "SubresourceIndex")]
			[NativeName(NativeNameType.Type, "UINT")]
			[FieldOffset(0)]
			public uint SubresourceIndex;


		}

		[NativeName(NativeNameType.Field, "pResource")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PResource;
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_COPY_TYPE")]
		public D3D12TextureCopyType Type;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12TextureCopyLocationUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12PlacedSubresourceFootprint
	{
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "Footprint")]
		[NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_FOOTPRINT")]
		public D3D12SubresourceFootprint Footprint;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SUBRESOURCE_FOOTPRINT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SubresourceFootprint
	{
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;
		[NativeName(NativeNameType.Field, "Depth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Depth;
		[NativeName(NativeNameType.Field, "RowPitch")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RowPitch;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TILED_RESOURCE_COORDINATE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TiledResourceCoordinate
	{
		[NativeName(NativeNameType.Field, "X")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint X;
		[NativeName(NativeNameType.Field, "Y")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Y;
		[NativeName(NativeNameType.Field, "Z")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Z;
		[NativeName(NativeNameType.Field, "Subresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Subresource;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TILE_REGION_SIZE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TileRegionSize
	{
		[NativeName(NativeNameType.Field, "NumTiles")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumTiles;
		[NativeName(NativeNameType.Field, "UseBox")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int UseBox;
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT16")]
		public ushort Height;
		[NativeName(NativeNameType.Field, "Depth")]
		[NativeName(NativeNameType.Type, "UINT16")]
		public ushort Depth;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIEWPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Viewport
	{
		[NativeName(NativeNameType.Field, "TopLeftX")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float TopLeftX;
		[NativeName(NativeNameType.Field, "TopLeftY")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float TopLeftY;
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float Height;
		[NativeName(NativeNameType.Field, "MinDepth")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MinDepth;
		[NativeName(NativeNameType.Field, "MaxDepth")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MaxDepth;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOURCE_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceBarrier
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12ResourceBarrierUnion
		{
			[NativeName(NativeNameType.Field, "Transition")]
			[NativeName(NativeNameType.Type, "D3D12_RESOURCE_TRANSITION_BARRIER")]
			[FieldOffset(0)]
			public D3D12ResourceTransitionBarrier Transition;
			[NativeName(NativeNameType.Field, "Aliasing")]
			[NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALIASING_BARRIER")]
			[FieldOffset(0)]
			public D3D12ResourceAliasingBarrier Aliasing;
			[NativeName(NativeNameType.Field, "UAV")]
			[NativeName(NativeNameType.Type, "D3D12_RESOURCE_UAV_BARRIER")]
			[FieldOffset(0)]
			public D3D12ResourceUavBarrier UAV;


		}

		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_BARRIER_TYPE")]
		public D3D12ResourceBarrierType Type;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_BARRIER_FLAGS")]
		public D3D12ResourceBarrierFlags Flags;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12ResourceBarrierUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOURCE_TRANSITION_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceTransitionBarrier
	{
		[NativeName(NativeNameType.Field, "pResource")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PResource;
		[NativeName(NativeNameType.Field, "Subresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Subresource;
		[NativeName(NativeNameType.Field, "StateBefore")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")]
		public D3D12ResourceStates StateBefore;
		[NativeName(NativeNameType.Field, "StateAfter")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")]
		public D3D12ResourceStates StateAfter;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOURCE_ALIASING_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceAliasingBarrier
	{
		[NativeName(NativeNameType.Field, "pResourceBefore")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PResourceBefore;
		[NativeName(NativeNameType.Field, "pResourceAfter")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PResourceAfter;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOURCE_UAV_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceUavBarrier
	{
		[NativeName(NativeNameType.Field, "pResource")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PResource;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_INDEX_BUFFER_VIEW")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12IndexBufferView
	{
		[NativeName(NativeNameType.Field, "BufferLocation")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong BufferLocation;
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SizeInBytes;
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VERTEX_BUFFER_VIEW")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VertexBufferView
	{
		[NativeName(NativeNameType.Field, "BufferLocation")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong BufferLocation;
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SizeInBytes;
		[NativeName(NativeNameType.Field, "StrideInBytes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StrideInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_STREAM_OUTPUT_BUFFER_VIEW")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12StreamOutputBufferView
	{
		[NativeName(NativeNameType.Field, "BufferLocation")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong BufferLocation;
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SizeInBytes;
		[NativeName(NativeNameType.Field, "BufferFilledSizeLocation")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong BufferFilledSizeLocation;


	}

	/// <summary>
	/// If rects are supplied in D3D12_DISCARD_REGION, below, the resource <br/>
	/// must have 2D subresources with all specified subresources the same dimension.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_DISCARD_REGION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DiscardRegion
	{
		[NativeName(NativeNameType.Field, "NumRects")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumRects;
		[NativeName(NativeNameType.Field, "pRects")]
		[NativeName(NativeNameType.Type, "const D3D12_RECT*")]
		public unsafe Rect32* PRects;
		[NativeName(NativeNameType.Field, "FirstSubresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstSubresource;
		[NativeName(NativeNameType.Field, "NumSubresources")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumSubresources;


	}

	[Guid("553103fb-1fe7-4557-bb38-946d7d0e7ca7")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12GraphicsCommandList1")]
	public partial struct ID3D12GraphicsCommandList1 : IComObject, IComObject<ID3D12GraphicsCommandList1>, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("553103fb-1fe7-4557-bb38-946d7d0e7ca7");

		public unsafe ID3D12GraphicsCommandList1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUIN([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[51]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] D3D12SubresourceRangeUint64* pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, pDependentSubresourceRanges);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ID3D12Resource** ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, ppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
			{
				fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, pSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
			{
				fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
				{
					fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, pDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "AtomicCopyBufferUINT64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void AtomicCopyBufferUINT64([NativeName(NativeNameType.Param, "pDstBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstBuffer, [NativeName(NativeNameType.Param, "DstOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong dstOffset, [NativeName(NativeNameType.Param, "pSrcBuffer")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcBuffer, [NativeName(NativeNameType.Param, "SrcOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong srcOffset, [NativeName(NativeNameType.Param, "Dependencies")] [NativeName(NativeNameType.Type, "UINT")] uint dependencies, [NativeName(NativeNameType.Param, "ppDependentResources")] [NativeName(NativeNameType.Type, "const ID3D12Resource**")] ref ID3D12Resource* ppDependentResources, [NativeName(NativeNameType.Param, "pDependentSubresourceRanges")] [NativeName(NativeNameType.Type, "const D3D12_SUBRESOURCE_RANGE_UINT64*")] ref D3D12SubresourceRangeUint64 pDependentSubresourceRanges)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstBuffer = &pDstBuffer)
			{
				fixed (ID3D12Resource* ppSrcBuffer = &pSrcBuffer)
				{
					fixed (ID3D12Resource** pppDependentResources = &ppDependentResources)
					{
						fixed (D3D12SubresourceRangeUint64* ppDependentSubresourceRanges = &pDependentSubresourceRanges)
						{
							((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, ulong, ID3D12Resource*, ulong, uint, ID3D12Resource**, D3D12SubresourceRangeUint64*, void>)(LpVtbl[52]))(ptr, (ID3D12Resource*)ppDstBuffer, dstOffset, (ID3D12Resource*)ppSrcBuffer, srcOffset, dependencies, (ID3D12Resource**)pppDependentResources, (D3D12SubresourceRangeUint64*)ppDependentSubresourceRanges);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "OMSetDepthBounds")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void OMSetDepthBounds([NativeName(NativeNameType.Param, "Min")] [NativeName(NativeNameType.Type, "FLOAT")] float min, [NativeName(NativeNameType.Param, "Max")] [NativeName(NativeNameType.Type, "FLOAT")] float max)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, float, float, void>)(LpVtbl[53]))(ptr, min, max);
		}

		[NativeName(NativeNameType.Func, "SetSamplePositions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetSamplePositions([NativeName(NativeNameType.Param, "NumSamplesPerPixel")] [NativeName(NativeNameType.Type, "UINT")] uint numSamplesPerPixel, [NativeName(NativeNameType.Param, "NumPixels")] [NativeName(NativeNameType.Type, "UINT")] uint numPixels, [NativeName(NativeNameType.Param, "pSamplePositions")] [NativeName(NativeNameType.Type, "D3D12_SAMPLE_POSITION*")] D3D12SamplePosition* pSamplePositions)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, D3D12SamplePosition*, void>)(LpVtbl[54]))(ptr, numSamplesPerPixel, numPixels, pSamplePositions);
		}

		[NativeName(NativeNameType.Func, "SetSamplePositions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetSamplePositions([NativeName(NativeNameType.Param, "NumSamplesPerPixel")] [NativeName(NativeNameType.Type, "UINT")] uint numSamplesPerPixel, [NativeName(NativeNameType.Param, "NumPixels")] [NativeName(NativeNameType.Type, "UINT")] uint numPixels, [NativeName(NativeNameType.Param, "pSamplePositions")] [NativeName(NativeNameType.Type, "D3D12_SAMPLE_POSITION*")] ref D3D12SamplePosition pSamplePositions)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SamplePosition* ppSamplePositions = &pSamplePositions)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, uint, D3D12SamplePosition*, void>)(LpVtbl[54]))(ptr, numSamplesPerPixel, numPixels, (D3D12SamplePosition*)ppSamplePositions);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresourceRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresourceRegion([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcRect")] [NativeName(NativeNameType.Type, "D3D12_RECT*")] Rect32* pSrcRect, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "ResolveMode")] [NativeName(NativeNameType.Type, "D3D12_RESOLVE_MODE")] D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, pDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
		}

		[NativeName(NativeNameType.Func, "ResolveSubresourceRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresourceRegion([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcRect")] [NativeName(NativeNameType.Type, "D3D12_RECT*")] Rect32* pSrcRect, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "ResolveMode")] [NativeName(NativeNameType.Type, "D3D12_RESOLVE_MODE")] D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, pSrcRect, format, resolveMode);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresourceRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresourceRegion([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcRect")] [NativeName(NativeNameType.Type, "D3D12_RECT*")] Rect32* pSrcRect, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "ResolveMode")] [NativeName(NativeNameType.Type, "D3D12_RESOLVE_MODE")] D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, pSrcRect, format, resolveMode);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresourceRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresourceRegion([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcRect")] [NativeName(NativeNameType.Type, "D3D12_RECT*")] Rect32* pSrcRect, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "ResolveMode")] [NativeName(NativeNameType.Type, "D3D12_RESOLVE_MODE")] D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, pSrcRect, format, resolveMode);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresourceRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresourceRegion([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcRect")] [NativeName(NativeNameType.Type, "D3D12_RECT*")] ref Rect32 pSrcRect, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "ResolveMode")] [NativeName(NativeNameType.Type, "D3D12_RESOLVE_MODE")] D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Rect32* ppSrcRect = &pSrcRect)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, pDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresourceRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresourceRegion([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcRect")] [NativeName(NativeNameType.Type, "D3D12_RECT*")] ref Rect32 pSrcRect, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "ResolveMode")] [NativeName(NativeNameType.Type, "D3D12_RESOLVE_MODE")] D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (Rect32* ppSrcRect = &pSrcRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, pSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresourceRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresourceRegion([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcRect")] [NativeName(NativeNameType.Type, "D3D12_RECT*")] ref Rect32 pSrcRect, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "ResolveMode")] [NativeName(NativeNameType.Type, "D3D12_RESOLVE_MODE")] D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (Rect32* ppSrcRect = &pSrcRect)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, pDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ResolveSubresourceRegion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveSubresourceRegion([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "DstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint dstSubresource, [NativeName(NativeNameType.Param, "DstX")] [NativeName(NativeNameType.Type, "UINT")] uint dstX, [NativeName(NativeNameType.Param, "DstY")] [NativeName(NativeNameType.Type, "UINT")] uint dstY, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "SrcSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint srcSubresource, [NativeName(NativeNameType.Param, "pSrcRect")] [NativeName(NativeNameType.Type, "D3D12_RECT*")] ref Rect32 pSrcRect, [NativeName(NativeNameType.Param, "Format")] [NativeName(NativeNameType.Type, "DXGI_FORMAT")] DxgiFormat format, [NativeName(NativeNameType.Param, "ResolveMode")] [NativeName(NativeNameType.Type, "D3D12_RESOLVE_MODE")] D3D12ResolveMode resolveMode)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (Rect32* ppSrcRect = &pSrcRect)
					{
						((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, ID3D12Resource*, uint, uint, uint, ID3D12Resource*, uint, Rect32*, DxgiFormat, D3D12ResolveMode, void>)(LpVtbl[55]))(ptr, (ID3D12Resource*)ppDstResource, dstSubresource, dstX, dstY, (ID3D12Resource*)ppSrcResource, srcSubresource, (Rect32*)ppSrcRect, format, resolveMode);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "SetViewInstanceMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetViewInstanceMask([NativeName(NativeNameType.Param, "Mask")] [NativeName(NativeNameType.Type, "UINT")] uint mask)
		{
			ID3D12GraphicsCommandList1* ptr = (ID3D12GraphicsCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList1*, uint, void>)(LpVtbl[56]))(ptr, mask);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, ID3D12GraphicsCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList1 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList1, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SUBRESOURCE_RANGE_UINT64")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SubresourceRangeUint64
	{
		[NativeName(NativeNameType.Field, "Subresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Subresource;
		[NativeName(NativeNameType.Field, "Range")]
		[NativeName(NativeNameType.Type, "D3D12_RANGE_UINT64")]
		public D3D12RangeUint64 Range;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RANGE_UINT64")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RangeUint64
	{
		[NativeName(NativeNameType.Field, "Begin")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Begin;
		[NativeName(NativeNameType.Field, "End")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong End;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SAMPLE_POSITION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SamplePosition
	{
		[NativeName(NativeNameType.Field, "X")]
		[NativeName(NativeNameType.Type, "INT8")]
		public sbyte X;
		[NativeName(NativeNameType.Field, "Y")]
		[NativeName(NativeNameType.Type, "INT8")]
		public sbyte Y;


	}

	[Guid("38c3e585-ff17-412c-9150-4fc6f9d72a28")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12GraphicsCommandList2")]
	public partial struct ID3D12GraphicsCommandList2 : IComObject, IComObject<ID3D12GraphicsCommandList2>, IComObject<ID3D12GraphicsCommandList1>, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("38c3e585-ff17-412c-9150-4fc6f9d72a28");

		public unsafe ID3D12GraphicsCommandList2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "WriteBufferImmediate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void WriteBufferImmediate([NativeName(NativeNameType.Param, "Count")] [NativeName(NativeNameType.Type, "UINT")] uint count, [NativeName(NativeNameType.Param, "pParams")] [NativeName(NativeNameType.Type, "const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*")] D3D12WritebufferimmediateParameter* pParams, [NativeName(NativeNameType.Param, "pModes")] [NativeName(NativeNameType.Type, "const D3D12_WRITEBUFFERIMMEDIATE_MODE*")] D3D12WritebufferimmediateMode* pModes)
		{
			ID3D12GraphicsCommandList2* ptr = (ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, D3D12WritebufferimmediateParameter*, D3D12WritebufferimmediateMode*, void>)(LpVtbl[6]))(ptr, count, pParams, pModes);
		}

		[NativeName(NativeNameType.Func, "WriteBufferImmediate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void WriteBufferImmediate([NativeName(NativeNameType.Param, "Count")] [NativeName(NativeNameType.Type, "UINT")] uint count, [NativeName(NativeNameType.Param, "pParams")] [NativeName(NativeNameType.Type, "const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*")] ref D3D12WritebufferimmediateParameter pParams, [NativeName(NativeNameType.Param, "pModes")] [NativeName(NativeNameType.Type, "const D3D12_WRITEBUFFERIMMEDIATE_MODE*")] D3D12WritebufferimmediateMode* pModes)
		{
			ID3D12GraphicsCommandList2* ptr = (ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12WritebufferimmediateParameter* ppParams = &pParams)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, D3D12WritebufferimmediateParameter*, D3D12WritebufferimmediateMode*, void>)(LpVtbl[6]))(ptr, count, (D3D12WritebufferimmediateParameter*)ppParams, pModes);
			}
		}

		[NativeName(NativeNameType.Func, "WriteBufferImmediate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void WriteBufferImmediate([NativeName(NativeNameType.Param, "Count")] [NativeName(NativeNameType.Type, "UINT")] uint count, [NativeName(NativeNameType.Param, "pParams")] [NativeName(NativeNameType.Type, "const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*")] D3D12WritebufferimmediateParameter* pParams, [NativeName(NativeNameType.Param, "pModes")] [NativeName(NativeNameType.Type, "const D3D12_WRITEBUFFERIMMEDIATE_MODE*")] ref D3D12WritebufferimmediateMode pModes)
		{
			ID3D12GraphicsCommandList2* ptr = (ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12WritebufferimmediateMode* ppModes = &pModes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, D3D12WritebufferimmediateParameter*, D3D12WritebufferimmediateMode*, void>)(LpVtbl[6]))(ptr, count, pParams, (D3D12WritebufferimmediateMode*)ppModes);
			}
		}

		[NativeName(NativeNameType.Func, "WriteBufferImmediate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void WriteBufferImmediate([NativeName(NativeNameType.Param, "Count")] [NativeName(NativeNameType.Type, "UINT")] uint count, [NativeName(NativeNameType.Param, "pParams")] [NativeName(NativeNameType.Type, "const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*")] ref D3D12WritebufferimmediateParameter pParams, [NativeName(NativeNameType.Param, "pModes")] [NativeName(NativeNameType.Type, "const D3D12_WRITEBUFFERIMMEDIATE_MODE*")] ref D3D12WritebufferimmediateMode pModes)
		{
			ID3D12GraphicsCommandList2* ptr = (ID3D12GraphicsCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12WritebufferimmediateParameter* ppParams = &pParams)
			{
				fixed (D3D12WritebufferimmediateMode* ppModes = &pModes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList2*, uint, D3D12WritebufferimmediateParameter*, D3D12WritebufferimmediateMode*, void>)(LpVtbl[6]))(ptr, count, (D3D12WritebufferimmediateParameter*)ppParams, (D3D12WritebufferimmediateMode*)ppModes);
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList1 (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12GraphicsCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12GraphicsCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList2 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList2, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d12_0000_0018 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_WRITEBUFFERIMMEDIATE_PARAMETER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12WritebufferimmediateParameter
	{
		[NativeName(NativeNameType.Field, "Dest")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong Dest;
		[NativeName(NativeNameType.Field, "Value")]
		[NativeName(NativeNameType.Type, "UINT32")]
		public uint Value;


	}

	[Guid("0ec870a6-5d7e-4c22-8cfc-5baae07616ed")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12CommandQueue")]
	public partial struct ID3D12CommandQueue : IComObject, IComObject<ID3D12CommandQueue>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0ec870a6-5d7e-4c22-8cfc-5baae07616ed");

		public unsafe ID3D12CommandQueue (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, pRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, pHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
			{
				fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] D3D12TileRangeFlags* pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, pRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
			{
				fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
				{
					fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, pHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
				{
					fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
					{
						fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, pResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
			{
				fixed (ID3D12Heap* ppHeap = &pHeap)
				{
					fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
					{
						fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
						{
							fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, pResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
			{
				fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
				{
					fixed (ID3D12Heap* ppHeap = &pHeap)
					{
						fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
						{
							fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
							{
								fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
								{
									((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, pResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "UpdateTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void UpdateTileMappings([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "NumResourceRegions")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceRegions, [NativeName(NativeNameType.Param, "pResourceRegionStartCoordinates")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pResourceRegionStartCoordinates, [NativeName(NativeNameType.Param, "pResourceRegionSizes")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pResourceRegionSizes, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "NumRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numRanges, [NativeName(NativeNameType.Param, "pRangeFlags")] [NativeName(NativeNameType.Type, "const D3D12_TILE_RANGE_FLAGS*")] ref D3D12TileRangeFlags pRangeFlags, [NativeName(NativeNameType.Param, "pHeapRangeStartOffsets")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pHeapRangeStartOffsets, [NativeName(NativeNameType.Param, "pRangeTileCounts")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pRangeTileCounts, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppResourceRegionStartCoordinates = &pResourceRegionStartCoordinates)
				{
					fixed (D3D12TileRegionSize* ppResourceRegionSizes = &pResourceRegionSizes)
					{
						fixed (ID3D12Heap* ppHeap = &pHeap)
						{
							fixed (D3D12TileRangeFlags* ppRangeFlags = &pRangeFlags)
							{
								fixed (uint* ppHeapRangeStartOffsets = &pHeapRangeStartOffsets)
								{
									fixed (uint* ppRangeTileCounts = &pRangeTileCounts)
									{
										((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, uint, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, ID3D12Heap*, uint, D3D12TileRangeFlags*, uint*, uint*, D3D12TileMappingFlags, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, numResourceRegions, (D3D12TiledResourceCoordinate*)ppResourceRegionStartCoordinates, (D3D12TileRegionSize*)ppResourceRegionSizes, (ID3D12Heap*)ppHeap, numRanges, (D3D12TileRangeFlags*)ppRangeFlags, (uint*)ppHeapRangeStartOffsets, (uint*)ppRangeTileCounts, flags);
									}
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] D3D12TileRegionSize* pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, pRegionSize, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, pSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
			{
				fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
				{
					((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, pSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
				{
					fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
					{
						((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] D3D12TiledResourceCoordinate* pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, pDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
			{
				fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
				{
					fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
					{
						fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
						{
							((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, pDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyTileMappings")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyTileMappings([NativeName(NativeNameType.Param, "pDstResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pDstResource, [NativeName(NativeNameType.Param, "pDstRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pDstRegionStartCoordinate, [NativeName(NativeNameType.Param, "pSrcResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pSrcResource, [NativeName(NativeNameType.Param, "pSrcRegionStartCoordinate")] [NativeName(NativeNameType.Type, "const D3D12_TILED_RESOURCE_COORDINATE*")] ref D3D12TiledResourceCoordinate pSrcRegionStartCoordinate, [NativeName(NativeNameType.Param, "pRegionSize")] [NativeName(NativeNameType.Type, "const D3D12_TILE_REGION_SIZE*")] ref D3D12TileRegionSize pRegionSize, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_TILE_MAPPING_FLAGS")] D3D12TileMappingFlags flags)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppDstResource = &pDstResource)
			{
				fixed (D3D12TiledResourceCoordinate* ppDstRegionStartCoordinate = &pDstRegionStartCoordinate)
				{
					fixed (ID3D12Resource* ppSrcResource = &pSrcResource)
					{
						fixed (D3D12TiledResourceCoordinate* ppSrcRegionStartCoordinate = &pSrcRegionStartCoordinate)
						{
							fixed (D3D12TileRegionSize* ppRegionSize = &pRegionSize)
							{
								((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Resource*, D3D12TiledResourceCoordinate*, ID3D12Resource*, D3D12TiledResourceCoordinate*, D3D12TileRegionSize*, D3D12TileMappingFlags, void>)(LpVtbl[1]))(ptr, (ID3D12Resource*)ppDstResource, (D3D12TiledResourceCoordinate*)ppDstRegionStartCoordinate, (ID3D12Resource*)ppSrcResource, (D3D12TiledResourceCoordinate*)ppSrcRegionStartCoordinate, (D3D12TileRegionSize*)ppRegionSize, flags);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteCommandLists")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteCommandLists([NativeName(NativeNameType.Param, "NumCommandLists")] [NativeName(NativeNameType.Type, "UINT")] uint numCommandLists, [NativeName(NativeNameType.Param, "ppCommandLists")] [NativeName(NativeNameType.Type, "const ID3D12CommandList**")] ID3D12CommandList** ppCommandLists)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, ID3D12CommandList**, void>)(LpVtbl[2]))(ptr, numCommandLists, ppCommandLists);
		}

		[NativeName(NativeNameType.Func, "ExecuteCommandLists")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteCommandLists([NativeName(NativeNameType.Param, "NumCommandLists")] [NativeName(NativeNameType.Type, "UINT")] uint numCommandLists, [NativeName(NativeNameType.Param, "ppCommandLists")] [NativeName(NativeNameType.Type, "const ID3D12CommandList**")] ref ID3D12CommandList* ppCommandLists)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandList** pppCommandLists = &ppCommandLists)
			{
				((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, uint, ID3D12CommandList**, void>)(LpVtbl[2]))(ptr, numCommandLists, (ID3D12CommandList**)pppCommandLists);
			}
		}

		[NativeName(NativeNameType.Func, "Signal")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Signal([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ID3D12Fence* pFence, [NativeName(NativeNameType.Param, "Value")] [NativeName(NativeNameType.Type, "UINT64")] ulong value)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[6]))(ptr, pFence, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Signal")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Signal([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ref ID3D12Fence pFence, [NativeName(NativeNameType.Param, "Value")] [NativeName(NativeNameType.Type, "UINT64")] ulong value)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[6]))(ptr, (ID3D12Fence*)ppFence, value);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "Wait")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Wait([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ID3D12Fence* pFence, [NativeName(NativeNameType.Param, "Value")] [NativeName(NativeNameType.Type, "UINT64")] ulong value)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[7]))(ptr, pFence, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Wait")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Wait([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ref ID3D12Fence pFence, [NativeName(NativeNameType.Param, "Value")] [NativeName(NativeNameType.Type, "UINT64")] ulong value)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ID3D12Fence*, ulong, HResult>)(LpVtbl[7]))(ptr, (ID3D12Fence*)ppFence, value);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetTimestampFrequency")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetTimestampFrequency([NativeName(NativeNameType.Param, "pFrequency")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pFrequency)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, HResult>)(LpVtbl[8]))(ptr, pFrequency);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetTimestampFrequency")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetTimestampFrequency([NativeName(NativeNameType.Param, "pFrequency")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pFrequency)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppFrequency = &pFrequency)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, HResult>)(LpVtbl[8]))(ptr, (ulong*)ppFrequency);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetClockCalibration")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetClockCalibration([NativeName(NativeNameType.Param, "pGpuTimestamp")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pGpuTimestamp, [NativeName(NativeNameType.Param, "pCpuTimestamp")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pCpuTimestamp)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[9]))(ptr, pGpuTimestamp, pCpuTimestamp);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetClockCalibration")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetClockCalibration([NativeName(NativeNameType.Param, "pGpuTimestamp")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pGpuTimestamp, [NativeName(NativeNameType.Param, "pCpuTimestamp")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pCpuTimestamp)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppGpuTimestamp = &pGpuTimestamp)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[9]))(ptr, (ulong*)ppGpuTimestamp, pCpuTimestamp);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetClockCalibration")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetClockCalibration([NativeName(NativeNameType.Param, "pGpuTimestamp")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pGpuTimestamp, [NativeName(NativeNameType.Param, "pCpuTimestamp")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pCpuTimestamp)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppCpuTimestamp = &pCpuTimestamp)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[9]))(ptr, pGpuTimestamp, (ulong*)ppCpuTimestamp);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetClockCalibration")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetClockCalibration([NativeName(NativeNameType.Param, "pGpuTimestamp")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pGpuTimestamp, [NativeName(NativeNameType.Param, "pCpuTimestamp")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pCpuTimestamp)
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppGpuTimestamp = &pGpuTimestamp)
			{
				fixed (ulong* ppCpuTimestamp = &pCpuTimestamp)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, ulong*, ulong*, HResult>)(LpVtbl[9]))(ptr, (ulong*)ppGpuTimestamp, (ulong*)ppCpuTimestamp);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_COMMAND_QUEUE_DESC")]
		public readonly unsafe D3D12CommandQueueDesc GetDesc()
		{
			ID3D12CommandQueue* ptr = (ID3D12CommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12CommandQueueDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12CommandQueue*, D3D12CommandQueueDesc>)(LpVtbl[10]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12CommandQueue value)
		{
			return Unsafe.As<ID3D12CommandQueue, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_COMMAND_QUEUE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12CommandQueueDesc
	{
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")]
		public D3D12CommandListType Type;
		[NativeName(NativeNameType.Field, "Priority")]
		[NativeName(NativeNameType.Type, "INT")]
		public int Priority;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_COMMAND_QUEUE_FLAGS")]
		public D3D12CommandQueueFlags Flags;
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;


	}

	[Guid("189819f1-1db6-4b57-be54-1821339b85f7")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device")]
	public partial struct ID3D12Device : IComObject, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("189819f1-1db6-4b57-be54-1821339b85f7");

		public unsafe ID3D12Device (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetNodeCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetNodeCount()
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint>)(LpVtbl[4]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] D3D12CommandQueueDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandQueueDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, riid, ppCommandQueue);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] ref D3D12CommandQueueDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandQueueDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandQueueDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12CommandQueueDesc*)ppDesc, riid, ppCommandQueue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] D3D12CommandQueueDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandQueueDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, (Guid*)priid, ppCommandQueue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] ref D3D12CommandQueueDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandQueueDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandQueueDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12CommandQueueDesc*)ppDesc, (Guid*)priid, ppCommandQueue);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandAllocator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandAllocator([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandAllocator")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandAllocator)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandListType, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, type, riid, ppCommandAllocator);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommandAllocator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandAllocator([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandAllocator")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandAllocator)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandListType, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, type, (Guid*)priid, ppCommandAllocator);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateGraphicsPipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateGraphicsPipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, riid, ppPipelineState);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateGraphicsPipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateGraphicsPipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12GraphicsPipelineStateDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateGraphicsPipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateGraphicsPipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateGraphicsPipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateGraphicsPipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12GraphicsPipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateComputePipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateComputePipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[8]))(ptr, pDesc, riid, ppPipelineState);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateComputePipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateComputePipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[8]))(ptr, (D3D12ComputePipelineStateDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateComputePipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateComputePipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[8]))(ptr, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateComputePipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateComputePipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[8]))(ptr, (D3D12ComputePipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "pCommandAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ID3D12CommandAllocator* pCommandAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pInitialState, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommandList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "pCommandAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ref ID3D12CommandAllocator pCommandAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pInitialState, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppCommandAllocator = &pCommandAllocator)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, (ID3D12CommandAllocator*)ppCommandAllocator, pInitialState, riid, ppCommandList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "pCommandAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ID3D12CommandAllocator* pCommandAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pInitialState, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, pCommandAllocator, (ID3D12PipelineState*)ppInitialState, riid, ppCommandList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "pCommandAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ref ID3D12CommandAllocator pCommandAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pInitialState, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppCommandAllocator = &pCommandAllocator)
			{
				fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, (ID3D12CommandAllocator*)ppCommandAllocator, (ID3D12PipelineState*)ppInitialState, riid, ppCommandList);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "pCommandAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ID3D12CommandAllocator* pCommandAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pInitialState, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, pCommandAllocator, pInitialState, (Guid*)priid, ppCommandList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "pCommandAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ref ID3D12CommandAllocator pCommandAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pInitialState, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppCommandAllocator = &pCommandAllocator)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, (ID3D12CommandAllocator*)ppCommandAllocator, pInitialState, (Guid*)priid, ppCommandList);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "pCommandAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ID3D12CommandAllocator* pCommandAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pInitialState, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, pCommandAllocator, (ID3D12PipelineState*)ppInitialState, (Guid*)priid, ppCommandList);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "pCommandAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ref ID3D12CommandAllocator pCommandAllocator, [NativeName(NativeNameType.Param, "pInitialState")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pInitialState, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppCommandAllocator = &pCommandAllocator)
			{
				fixed (ID3D12PipelineState* ppInitialState = &pInitialState)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CommandListType, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, HResult>)(LpVtbl[9]))(ptr, nodeMask, type, (ID3D12CommandAllocator*)ppCommandAllocator, (ID3D12PipelineState*)ppInitialState, (Guid*)priid, ppCommandList);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CheckFeatureSupport")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CheckFeatureSupport([NativeName(NativeNameType.Param, "Feature")] [NativeName(NativeNameType.Type, "D3D12_FEATURE")] D3D12Feature feature, [NativeName(NativeNameType.Param, "pFeatureSupportData")] [NativeName(NativeNameType.Type, "void*")] void* pFeatureSupportData, [NativeName(NativeNameType.Param, "FeatureSupportDataSize")] [NativeName(NativeNameType.Type, "UINT")] uint featureSupportDataSize)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12Feature, void*, uint, HResult>)(LpVtbl[10]))(ptr, feature, pFeatureSupportData, featureSupportDataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateDescriptorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateDescriptorHeap([NativeName(NativeNameType.Param, "pDescriptorHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_DESCRIPTOR_HEAP_DESC*")] D3D12DescriptorHeapDesc* pDescriptorHeapDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, pDescriptorHeapDesc, riid, ppvHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateDescriptorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateDescriptorHeap([NativeName(NativeNameType.Param, "pDescriptorHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_DESCRIPTOR_HEAP_DESC*")] ref D3D12DescriptorHeapDesc pDescriptorHeapDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DescriptorHeapDesc* ppDescriptorHeapDesc = &pDescriptorHeapDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, (D3D12DescriptorHeapDesc*)ppDescriptorHeapDesc, riid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateDescriptorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateDescriptorHeap([NativeName(NativeNameType.Param, "pDescriptorHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_DESCRIPTOR_HEAP_DESC*")] D3D12DescriptorHeapDesc* pDescriptorHeapDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, pDescriptorHeapDesc, (Guid*)priid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateDescriptorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateDescriptorHeap([NativeName(NativeNameType.Param, "pDescriptorHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_DESCRIPTOR_HEAP_DESC*")] ref D3D12DescriptorHeapDesc pDescriptorHeapDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DescriptorHeapDesc* ppDescriptorHeapDesc = &pDescriptorHeapDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, (D3D12DescriptorHeapDesc*)ppDescriptorHeapDesc, (Guid*)priid, ppvHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetDescriptorHandleIncrementSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetDescriptorHandleIncrementSize([NativeName(NativeNameType.Param, "DescriptorHeapType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12DescriptorHeapType, uint>)(LpVtbl[12]))(ptr, descriptorHeapType);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateRootSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateRootSignature([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pBlobWithRootSignature")] [NativeName(NativeNameType.Type, "const void*")] void* pBlobWithRootSignature, [NativeName(NativeNameType.Param, "blobLengthInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint blobLengthInBytes, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvRootSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvRootSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, void*, nuint, Guid*, void**, HResult>)(LpVtbl[13]))(ptr, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateRootSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateRootSignature([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pBlobWithRootSignature")] [NativeName(NativeNameType.Type, "const void*")] void* pBlobWithRootSignature, [NativeName(NativeNameType.Param, "blobLengthInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint blobLengthInBytes, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvRootSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvRootSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, void*, nuint, Guid*, void**, HResult>)(LpVtbl[13]))(ptr, nodeMask, pBlobWithRootSignature, blobLengthInBytes, (Guid*)priid, ppvRootSignature);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateConstantBufferView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateConstantBufferView([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_CONSTANT_BUFFER_VIEW_DESC*")] D3D12ConstantBufferViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ConstantBufferViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[14]))(ptr, pDesc, destDescriptor);
		}

		[NativeName(NativeNameType.Func, "CreateConstantBufferView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateConstantBufferView([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_CONSTANT_BUFFER_VIEW_DESC*")] ref D3D12ConstantBufferViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ConstantBufferViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ConstantBufferViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[14]))(ptr, (D3D12ConstantBufferViewDesc*)ppDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateShaderResourceView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateShaderResourceView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SHADER_RESOURCE_VIEW_DESC*")] D3D12ShaderResourceViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12ShaderResourceViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[15]))(ptr, pResource, pDesc, destDescriptor);
		}

		[NativeName(NativeNameType.Func, "CreateShaderResourceView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateShaderResourceView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SHADER_RESOURCE_VIEW_DESC*")] D3D12ShaderResourceViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12ShaderResourceViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[15]))(ptr, (ID3D12Resource*)ppResource, pDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateShaderResourceView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateShaderResourceView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SHADER_RESOURCE_VIEW_DESC*")] ref D3D12ShaderResourceViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderResourceViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12ShaderResourceViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[15]))(ptr, pResource, (D3D12ShaderResourceViewDesc*)ppDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateShaderResourceView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateShaderResourceView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SHADER_RESOURCE_VIEW_DESC*")] ref D3D12ShaderResourceViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12ShaderResourceViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12ShaderResourceViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[15]))(ptr, (ID3D12Resource*)ppResource, (D3D12ShaderResourceViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateUnorderedAccessView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pCounterResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pCounterResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_UNORDERED_ACCESS_VIEW_DESC*")] D3D12UnorderedAccessViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, pResource, pCounterResource, pDesc, destDescriptor);
		}

		[NativeName(NativeNameType.Func, "CreateUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateUnorderedAccessView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pCounterResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pCounterResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_UNORDERED_ACCESS_VIEW_DESC*")] D3D12UnorderedAccessViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, (ID3D12Resource*)ppResource, pCounterResource, pDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateUnorderedAccessView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pCounterResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pCounterResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_UNORDERED_ACCESS_VIEW_DESC*")] D3D12UnorderedAccessViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppCounterResource = &pCounterResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, pResource, (ID3D12Resource*)ppCounterResource, pDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateUnorderedAccessView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pCounterResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pCounterResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_UNORDERED_ACCESS_VIEW_DESC*")] D3D12UnorderedAccessViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Resource* ppCounterResource = &pCounterResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, (ID3D12Resource*)ppResource, (ID3D12Resource*)ppCounterResource, pDesc, destDescriptor);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateUnorderedAccessView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pCounterResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pCounterResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_UNORDERED_ACCESS_VIEW_DESC*")] ref D3D12UnorderedAccessViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12UnorderedAccessViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, pResource, pCounterResource, (D3D12UnorderedAccessViewDesc*)ppDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateUnorderedAccessView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pCounterResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pCounterResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_UNORDERED_ACCESS_VIEW_DESC*")] ref D3D12UnorderedAccessViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, (ID3D12Resource*)ppResource, pCounterResource, (D3D12UnorderedAccessViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateUnorderedAccessView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pCounterResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pCounterResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_UNORDERED_ACCESS_VIEW_DESC*")] ref D3D12UnorderedAccessViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppCounterResource = &pCounterResource)
			{
				fixed (D3D12UnorderedAccessViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, pResource, (ID3D12Resource*)ppCounterResource, (D3D12UnorderedAccessViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateUnorderedAccessView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pCounterResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pCounterResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_UNORDERED_ACCESS_VIEW_DESC*")] ref D3D12UnorderedAccessViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (ID3D12Resource* ppCounterResource = &pCounterResource)
				{
					fixed (D3D12UnorderedAccessViewDesc* ppDesc = &pDesc)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, ID3D12Resource*, D3D12UnorderedAccessViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[16]))(ptr, (ID3D12Resource*)ppResource, (ID3D12Resource*)ppCounterResource, (D3D12UnorderedAccessViewDesc*)ppDesc, destDescriptor);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateRenderTargetView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateRenderTargetView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_TARGET_VIEW_DESC*")] D3D12RenderTargetViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12RenderTargetViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[17]))(ptr, pResource, pDesc, destDescriptor);
		}

		[NativeName(NativeNameType.Func, "CreateRenderTargetView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateRenderTargetView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_TARGET_VIEW_DESC*")] D3D12RenderTargetViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12RenderTargetViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[17]))(ptr, (ID3D12Resource*)ppResource, pDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateRenderTargetView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateRenderTargetView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_TARGET_VIEW_DESC*")] ref D3D12RenderTargetViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12RenderTargetViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12RenderTargetViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[17]))(ptr, pResource, (D3D12RenderTargetViewDesc*)ppDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateRenderTargetView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateRenderTargetView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_TARGET_VIEW_DESC*")] ref D3D12RenderTargetViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12RenderTargetViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12RenderTargetViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[17]))(ptr, (ID3D12Resource*)ppResource, (D3D12RenderTargetViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateDepthStencilView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateDepthStencilView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_DEPTH_STENCIL_VIEW_DESC*")] D3D12DepthStencilViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12DepthStencilViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[18]))(ptr, pResource, pDesc, destDescriptor);
		}

		[NativeName(NativeNameType.Func, "CreateDepthStencilView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateDepthStencilView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_DEPTH_STENCIL_VIEW_DESC*")] D3D12DepthStencilViewDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12DepthStencilViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[18]))(ptr, (ID3D12Resource*)ppResource, pDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateDepthStencilView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateDepthStencilView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_DEPTH_STENCIL_VIEW_DESC*")] ref D3D12DepthStencilViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DepthStencilViewDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12DepthStencilViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[18]))(ptr, pResource, (D3D12DepthStencilViewDesc*)ppDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateDepthStencilView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateDepthStencilView([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_DEPTH_STENCIL_VIEW_DESC*")] ref D3D12DepthStencilViewDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				fixed (D3D12DepthStencilViewDesc* ppDesc = &pDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, D3D12DepthStencilViewDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[18]))(ptr, (ID3D12Resource*)ppResource, (D3D12DepthStencilViewDesc*)ppDesc, destDescriptor);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSampler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateSampler([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SAMPLER_DESC*")] D3D12SamplerDesc* pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12SamplerDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[19]))(ptr, pDesc, destDescriptor);
		}

		[NativeName(NativeNameType.Func, "CreateSampler")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateSampler([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SAMPLER_DESC*")] ref D3D12SamplerDesc pDesc, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SamplerDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12SamplerDesc*, D3D12CpuDescriptorHandle, void>)(LpVtbl[19]))(ptr, (D3D12SamplerDesc*)ppDesc, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
			{
				fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
				{
					fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptorHeapsType);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
			{
				fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
				{
					fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, pSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
			{
				fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] uint* pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
				{
					fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, pDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] D3D12CpuDescriptorHandle* pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
			{
				fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
				{
					fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, pDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptors([NativeName(NativeNameType.Param, "NumDestDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numDestDescriptorRanges, [NativeName(NativeNameType.Param, "pDestDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pDestDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pDestDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pDestDescriptorRangeSizes, [NativeName(NativeNameType.Param, "NumSrcDescriptorRanges")] [NativeName(NativeNameType.Type, "UINT")] uint numSrcDescriptorRanges, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeStarts")] [NativeName(NativeNameType.Type, "const D3D12_CPU_DESCRIPTOR_HANDLE*")] ref D3D12CpuDescriptorHandle pSrcDescriptorRangeStarts, [NativeName(NativeNameType.Param, "pSrcDescriptorRangeSizes")] [NativeName(NativeNameType.Type, "const UINT*")] ref uint pSrcDescriptorRangeSizes, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CpuDescriptorHandle* ppDestDescriptorRangeStarts = &pDestDescriptorRangeStarts)
			{
				fixed (uint* ppDestDescriptorRangeSizes = &pDestDescriptorRangeSizes)
				{
					fixed (D3D12CpuDescriptorHandle* ppSrcDescriptorRangeStarts = &pSrcDescriptorRangeStarts)
					{
						fixed (uint* ppSrcDescriptorRangeSizes = &pSrcDescriptorRangeSizes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle*, uint*, uint, D3D12CpuDescriptorHandle*, uint*, D3D12DescriptorHeapType, void>)(LpVtbl[20]))(ptr, numDestDescriptorRanges, (D3D12CpuDescriptorHandle*)ppDestDescriptorRangeStarts, (uint*)ppDestDescriptorRangeSizes, numSrcDescriptorRanges, (D3D12CpuDescriptorHandle*)ppSrcDescriptorRangeStarts, (uint*)ppSrcDescriptorRangeSizes, descriptorHeapsType);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyDescriptorsSimple")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyDescriptorsSimple([NativeName(NativeNameType.Param, "NumDescriptors")] [NativeName(NativeNameType.Type, "UINT")] uint numDescriptors, [NativeName(NativeNameType.Param, "DestDescriptorRangeStart")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptorRangeStart, [NativeName(NativeNameType.Param, "SrcDescriptorRangeStart")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle srcDescriptorRangeStart, [NativeName(NativeNameType.Param, "DescriptorHeapsType")] [NativeName(NativeNameType.Type, "D3D12_DESCRIPTOR_HEAP_TYPE")] D3D12DescriptorHeapType descriptorHeapsType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12CpuDescriptorHandle, D3D12CpuDescriptorHandle, D3D12DescriptorHeapType, void>)(LpVtbl[21]))(ptr, numDescriptors, destDescriptorRangeStart, srcDescriptorRangeStart, descriptorHeapsType);
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDescs)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, uint, D3D12ResourceDesc*, D3D12ResourceAllocationInfo>)(LpVtbl[22]))(ptr, visibleMask, numResourceDescs, pResourceDescs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDescs)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDescs = &pResourceDescs)
			{
				D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, uint, D3D12ResourceDesc*, D3D12ResourceAllocationInfo>)(LpVtbl[22]))(ptr, visibleMask, numResourceDescs, (D3D12ResourceDesc*)ppResourceDescs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCustomHeapProperties")]
		[return: NativeName(NativeNameType.Type, "D3D12_HEAP_PROPERTIES")]
		public readonly unsafe D3D12HeapProperties GetCustomHeapProperties([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "heapType")] [NativeName(NativeNameType.Type, "D3D12_HEAP_TYPE")] D3D12HeapType heapType)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12HeapProperties ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, D3D12HeapType, D3D12HeapProperties>)(LpVtbl[23]))(ptr, nodeMask, heapType);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, riidResource, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priidResource = &riidResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (Guid*)priidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[24]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] D3D12HeapDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapDesc*, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, pDesc, riid, ppvHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] ref D3D12HeapDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapDesc*, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, (D3D12HeapDesc*)ppDesc, riid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] D3D12HeapDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapDesc*, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, pDesc, (Guid*)priid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] ref D3D12HeapDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12HeapDesc*, Guid*, void**, HResult>)(LpVtbl[25]))(ptr, (D3D12HeapDesc*)ppDesc, (Guid*)priid, ppvHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, riid, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Heap*, ulong, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[26]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, pDesc, initialState, pOptimizedClearValue, riid, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, pDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[27]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHandle([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ID3D12DeviceChild* pObject, [NativeName(NativeNameType.Param, "pAttributes")] [NativeName(NativeNameType.Type, "const SECURITY_ATTRIBUTES*")] SecurityAttributes* pAttributes, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] nint* pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, pObject, pAttributes, access, name, pHandle);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHandle([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ref ID3D12DeviceChild pObject, [NativeName(NativeNameType.Param, "pAttributes")] [NativeName(NativeNameType.Type, "const SECURITY_ATTRIBUTES*")] SecurityAttributes* pAttributes, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] nint* pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, (ID3D12DeviceChild*)ppObject, pAttributes, access, name, pHandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHandle([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ID3D12DeviceChild* pObject, [NativeName(NativeNameType.Param, "pAttributes")] [NativeName(NativeNameType.Type, "const SECURITY_ATTRIBUTES*")] ref SecurityAttributes pAttributes, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] nint* pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SecurityAttributes* ppAttributes = &pAttributes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, pObject, (SecurityAttributes*)ppAttributes, access, name, pHandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHandle([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ref ID3D12DeviceChild pObject, [NativeName(NativeNameType.Param, "pAttributes")] [NativeName(NativeNameType.Type, "const SECURITY_ATTRIBUTES*")] ref SecurityAttributes pAttributes, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] nint* pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				fixed (SecurityAttributes* ppAttributes = &pAttributes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, (ID3D12DeviceChild*)ppObject, (SecurityAttributes*)ppAttributes, access, name, pHandle);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHandle([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ID3D12DeviceChild* pObject, [NativeName(NativeNameType.Param, "pAttributes")] [NativeName(NativeNameType.Type, "const SECURITY_ATTRIBUTES*")] SecurityAttributes* pAttributes, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] ref nint pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppHandle = &pHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, pObject, pAttributes, access, name, (nint*)ppHandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHandle([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ref ID3D12DeviceChild pObject, [NativeName(NativeNameType.Param, "pAttributes")] [NativeName(NativeNameType.Type, "const SECURITY_ATTRIBUTES*")] SecurityAttributes* pAttributes, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] ref nint pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				fixed (nint* ppHandle = &pHandle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, (ID3D12DeviceChild*)ppObject, pAttributes, access, name, (nint*)ppHandle);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHandle([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ID3D12DeviceChild* pObject, [NativeName(NativeNameType.Param, "pAttributes")] [NativeName(NativeNameType.Type, "const SECURITY_ATTRIBUTES*")] ref SecurityAttributes pAttributes, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] ref nint pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (SecurityAttributes* ppAttributes = &pAttributes)
			{
				fixed (nint* ppHandle = &pHandle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, pObject, (SecurityAttributes*)ppAttributes, access, name, (nint*)ppHandle);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHandle([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ref ID3D12DeviceChild pObject, [NativeName(NativeNameType.Param, "pAttributes")] [NativeName(NativeNameType.Type, "const SECURITY_ATTRIBUTES*")] ref SecurityAttributes pAttributes, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] ref nint pHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				fixed (SecurityAttributes* ppAttributes = &pAttributes)
				{
					fixed (nint* ppHandle = &pHandle)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12DeviceChild*, SecurityAttributes*, uint, char*, nint*, HResult>)(LpVtbl[28]))(ptr, (ID3D12DeviceChild*)ppObject, (SecurityAttributes*)ppAttributes, access, name, (nint*)ppHandle);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "OpenSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult OpenSharedHandle([NativeName(NativeNameType.Param, "NTHandle")] [NativeName(NativeNameType.Type, "HANDLE")] nint nTHandle, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvObj")] [NativeName(NativeNameType.Type, "void**")] void** ppvObj)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, nint, Guid*, void**, HResult>)(LpVtbl[29]))(ptr, nTHandle, riid, ppvObj);
			return ret;
		}

		[NativeName(NativeNameType.Func, "OpenSharedHandle")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult OpenSharedHandle([NativeName(NativeNameType.Param, "NTHandle")] [NativeName(NativeNameType.Type, "HANDLE")] nint nTHandle, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvObj")] [NativeName(NativeNameType.Type, "void**")] void** ppvObj)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, nint, Guid*, void**, HResult>)(LpVtbl[29]))(ptr, nTHandle, (Guid*)priid, ppvObj);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "OpenSharedHandleByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult OpenSharedHandleByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "pNTHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] nint* pNTHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, char*, uint, nint*, HResult>)(LpVtbl[30]))(ptr, name, access, pNTHandle);
			return ret;
		}

		[NativeName(NativeNameType.Func, "OpenSharedHandleByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult OpenSharedHandleByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* name, [NativeName(NativeNameType.Param, "Access")] [NativeName(NativeNameType.Type, "DWORD")] uint access, [NativeName(NativeNameType.Param, "pNTHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] ref nint pNTHandle)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppNTHandle = &pNTHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, char*, uint, nint*, HResult>)(LpVtbl[30]))(ptr, name, access, (nint*)ppNTHandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "MakeResident")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult MakeResident([NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ID3D12Pageable** ppObjects)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable**, HResult>)(LpVtbl[31]))(ptr, numObjects, ppObjects);
			return ret;
		}

		[NativeName(NativeNameType.Func, "MakeResident")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult MakeResident([NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ref ID3D12Pageable* ppObjects)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Pageable** pppObjects = &ppObjects)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable**, HResult>)(LpVtbl[31]))(ptr, numObjects, (ID3D12Pageable**)pppObjects);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "Evict")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Evict([NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ID3D12Pageable** ppObjects)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable**, HResult>)(LpVtbl[32]))(ptr, numObjects, ppObjects);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Evict")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Evict([NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ref ID3D12Pageable* ppObjects)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Pageable** pppObjects = &ppObjects)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, uint, ID3D12Pageable**, HResult>)(LpVtbl[32]))(ptr, numObjects, (ID3D12Pageable**)pppObjects);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateFence")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateFence([NativeName(NativeNameType.Param, "InitialValue")] [NativeName(NativeNameType.Type, "UINT64")] ulong initialValue, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_FENCE_FLAGS")] D3D12FenceFlags flags, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppFence")] [NativeName(NativeNameType.Type, "void**")] void** ppFence)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ulong, D3D12FenceFlags, Guid*, void**, HResult>)(LpVtbl[33]))(ptr, initialValue, flags, riid, ppFence);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateFence")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateFence([NativeName(NativeNameType.Param, "InitialValue")] [NativeName(NativeNameType.Type, "UINT64")] ulong initialValue, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_FENCE_FLAGS")] D3D12FenceFlags flags, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppFence")] [NativeName(NativeNameType.Type, "void**")] void** ppFence)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, ulong, D3D12FenceFlags, Guid*, void**, HResult>)(LpVtbl[33]))(ptr, initialValue, flags, (Guid*)priid, ppFence);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetDeviceRemovedReason")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDeviceRemovedReason()
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, HResult>)(LpVtbl[34]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppTotalBytes = &pTotalBytes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
						{
							fixed (ulong* ppTotalBytes = &pTotalBytes)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12ResourceDesc*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[35]))(ptr, (D3D12ResourceDesc*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateQueryHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateQueryHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_QUERY_HEAP_DESC*")] D3D12QueryHeapDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12QueryHeapDesc*, Guid*, void**, HResult>)(LpVtbl[36]))(ptr, pDesc, riid, ppvHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateQueryHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateQueryHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_QUERY_HEAP_DESC*")] ref D3D12QueryHeapDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12QueryHeapDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12QueryHeapDesc*, Guid*, void**, HResult>)(LpVtbl[36]))(ptr, (D3D12QueryHeapDesc*)ppDesc, riid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateQueryHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateQueryHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_QUERY_HEAP_DESC*")] D3D12QueryHeapDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12QueryHeapDesc*, Guid*, void**, HResult>)(LpVtbl[36]))(ptr, pDesc, (Guid*)priid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateQueryHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateQueryHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_QUERY_HEAP_DESC*")] ref D3D12QueryHeapDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12QueryHeapDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12QueryHeapDesc*, Guid*, void**, HResult>)(LpVtbl[36]))(ptr, (D3D12QueryHeapDesc*)ppDesc, (Guid*)priid, ppvHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SetStablePowerState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetStablePowerState([NativeName(NativeNameType.Param, "Enable")] [NativeName(NativeNameType.Type, "BOOL")] int enable)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, int, HResult>)(LpVtbl[37]))(ptr, enable);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommandSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandSignature([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_SIGNATURE_DESC*")] D3D12CommandSignatureDesc* pDesc, [NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ID3D12RootSignature* pRootSignature, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvCommandSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, pDesc, pRootSignature, riid, ppvCommandSignature);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommandSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandSignature([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_SIGNATURE_DESC*")] ref D3D12CommandSignatureDesc pDesc, [NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ID3D12RootSignature* pRootSignature, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvCommandSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandSignatureDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, (D3D12CommandSignatureDesc*)ppDesc, pRootSignature, riid, ppvCommandSignature);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandSignature([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_SIGNATURE_DESC*")] D3D12CommandSignatureDesc* pDesc, [NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ref ID3D12RootSignature pRootSignature, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvCommandSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, pDesc, (ID3D12RootSignature*)ppRootSignature, riid, ppvCommandSignature);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandSignature([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_SIGNATURE_DESC*")] ref D3D12CommandSignatureDesc pDesc, [NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ref ID3D12RootSignature pRootSignature, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvCommandSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandSignatureDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, (D3D12CommandSignatureDesc*)ppDesc, (ID3D12RootSignature*)ppRootSignature, riid, ppvCommandSignature);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandSignature([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_SIGNATURE_DESC*")] D3D12CommandSignatureDesc* pDesc, [NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ID3D12RootSignature* pRootSignature, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvCommandSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, pDesc, pRootSignature, (Guid*)priid, ppvCommandSignature);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandSignature([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_SIGNATURE_DESC*")] ref D3D12CommandSignatureDesc pDesc, [NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ID3D12RootSignature* pRootSignature, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvCommandSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandSignatureDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, (D3D12CommandSignatureDesc*)ppDesc, pRootSignature, (Guid*)priid, ppvCommandSignature);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandSignature([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_SIGNATURE_DESC*")] D3D12CommandSignatureDesc* pDesc, [NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ref ID3D12RootSignature pRootSignature, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvCommandSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, pDesc, (ID3D12RootSignature*)ppRootSignature, (Guid*)priid, ppvCommandSignature);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandSignature")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandSignature([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_SIGNATURE_DESC*")] ref D3D12CommandSignatureDesc pDesc, [NativeName(NativeNameType.Param, "pRootSignature")] [NativeName(NativeNameType.Type, "ID3D12RootSignature*")] ref ID3D12RootSignature pRootSignature, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvCommandSignature")] [NativeName(NativeNameType.Type, "void**")] void** ppvCommandSignature)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandSignatureDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12RootSignature* ppRootSignature = &pRootSignature)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, D3D12CommandSignatureDesc*, ID3D12RootSignature*, Guid*, void**, HResult>)(LpVtbl[38]))(ptr, (D3D12CommandSignatureDesc*)ppDesc, (ID3D12RootSignature*)ppRootSignature, (Guid*)priid, ppvCommandSignature);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] D3D12SubresourceTiling* pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, pNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
			{
				fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] D3D12TileShape* pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, pStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
			{
				fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
				{
					fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] D3D12PackedMipInfo* pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, pPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
			{
				fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
				{
					fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
					{
						fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, pNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
			{
				fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
				{
					fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
					{
						fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
						{
							fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, pTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceTiling")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetResourceTiling([NativeName(NativeNameType.Param, "pTiledResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTiledResource, [NativeName(NativeNameType.Param, "pNumTilesForEntireResource")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumTilesForEntireResource, [NativeName(NativeNameType.Param, "pPackedMipDesc")] [NativeName(NativeNameType.Type, "D3D12_PACKED_MIP_INFO*")] ref D3D12PackedMipInfo pPackedMipDesc, [NativeName(NativeNameType.Param, "pStandardTileShapeForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_TILE_SHAPE*")] ref D3D12TileShape pStandardTileShapeForNonPackedMips, [NativeName(NativeNameType.Param, "pNumSubresourceTilings")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumSubresourceTilings, [NativeName(NativeNameType.Param, "FirstSubresourceTilingToGet")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresourceTilingToGet, [NativeName(NativeNameType.Param, "pSubresourceTilingsForNonPackedMips")] [NativeName(NativeNameType.Type, "D3D12_SUBRESOURCE_TILING*")] ref D3D12SubresourceTiling pSubresourceTilingsForNonPackedMips)
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTiledResource = &pTiledResource)
			{
				fixed (uint* ppNumTilesForEntireResource = &pNumTilesForEntireResource)
				{
					fixed (D3D12PackedMipInfo* ppPackedMipDesc = &pPackedMipDesc)
					{
						fixed (D3D12TileShape* ppStandardTileShapeForNonPackedMips = &pStandardTileShapeForNonPackedMips)
						{
							fixed (uint* ppNumSubresourceTilings = &pNumSubresourceTilings)
							{
								fixed (D3D12SubresourceTiling* ppSubresourceTilingsForNonPackedMips = &pSubresourceTilingsForNonPackedMips)
								{
									((delegate* unmanaged[Stdcall]<ID3D12Device*, ID3D12Resource*, uint*, D3D12PackedMipInfo*, D3D12TileShape*, uint*, uint, D3D12SubresourceTiling*, void>)(LpVtbl[39]))(ptr, (ID3D12Resource*)ppTiledResource, (uint*)ppNumTilesForEntireResource, (D3D12PackedMipInfo*)ppPackedMipDesc, (D3D12TileShape*)ppStandardTileShapeForNonPackedMips, (uint*)ppNumSubresourceTilings, firstSubresourceTilingToGet, (D3D12SubresourceTiling*)ppSubresourceTilingsForNonPackedMips);
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetAdapterLuid")]
		[return: NativeName(NativeNameType.Type, "LUID")]
		public readonly unsafe Luid GetAdapterLuid()
		{
			ID3D12Device* ptr = (ID3D12Device*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Luid ret = ((delegate* unmanaged[Stdcall]<ID3D12Device*, Luid>)(LpVtbl[40]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device value)
		{
			return Unsafe.As<ID3D12Device, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device value)
		{
			return Unsafe.As<ID3D12Device, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_GRAPHICS_PIPELINE_STATE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12GraphicsPipelineStateDesc
	{
		[NativeName(NativeNameType.Field, "pRootSignature")]
		[NativeName(NativeNameType.Type, "ID3D12RootSignature*")]
		public unsafe ID3D12RootSignature* PRootSignature;
		[NativeName(NativeNameType.Field, "VS")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_BYTECODE")]
		public D3D12ShaderBytecode VS;
		[NativeName(NativeNameType.Field, "PS")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_BYTECODE")]
		public D3D12ShaderBytecode PS;
		[NativeName(NativeNameType.Field, "DS")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_BYTECODE")]
		public D3D12ShaderBytecode DS;
		[NativeName(NativeNameType.Field, "HS")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_BYTECODE")]
		public D3D12ShaderBytecode HS;
		[NativeName(NativeNameType.Field, "GS")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_BYTECODE")]
		public D3D12ShaderBytecode GS;
		[NativeName(NativeNameType.Field, "StreamOutput")]
		[NativeName(NativeNameType.Type, "D3D12_STREAM_OUTPUT_DESC")]
		public D3D12StreamOutputDesc StreamOutput;
		[NativeName(NativeNameType.Field, "BlendState")]
		[NativeName(NativeNameType.Type, "D3D12_BLEND_DESC")]
		public D3D12BlendDesc BlendState;
		[NativeName(NativeNameType.Field, "SampleMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SampleMask;
		[NativeName(NativeNameType.Field, "RasterizerState")]
		[NativeName(NativeNameType.Type, "D3D12_RASTERIZER_DESC")]
		public D3D12RasterizerDesc RasterizerState;
		[NativeName(NativeNameType.Field, "DepthStencilState")]
		[NativeName(NativeNameType.Type, "D3D12_DEPTH_STENCIL_DESC")]
		public D3D12DepthStencilDesc DepthStencilState;
		[NativeName(NativeNameType.Field, "InputLayout")]
		[NativeName(NativeNameType.Type, "D3D12_INPUT_LAYOUT_DESC")]
		public D3D12InputLayoutDesc InputLayout;
		[NativeName(NativeNameType.Field, "IBStripCutValue")]
		[NativeName(NativeNameType.Type, "D3D12_INDEX_BUFFER_STRIP_CUT_VALUE")]
		public D3D12IndexBufferStripCutValue IBStripCutValue;
		[NativeName(NativeNameType.Field, "PrimitiveTopologyType")]
		[NativeName(NativeNameType.Type, "D3D12_PRIMITIVE_TOPOLOGY_TYPE")]
		public D3D12PrimitiveTopologyType PrimitiveTopologyType;
		[NativeName(NativeNameType.Field, "NumRenderTargets")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumRenderTargets;
		[NativeName(NativeNameType.Field, "RTVFormats")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT[8]")]
		public DxgiFormat RTVFormats_0;
		public DxgiFormat RTVFormats_1;
		public DxgiFormat RTVFormats_2;
		public DxgiFormat RTVFormats_3;
		public DxgiFormat RTVFormats_4;
		public DxgiFormat RTVFormats_5;
		public DxgiFormat RTVFormats_6;
		public DxgiFormat RTVFormats_7;
		[NativeName(NativeNameType.Field, "DSVFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat DSVFormat;
		[NativeName(NativeNameType.Field, "SampleDesc")]
		[NativeName(NativeNameType.Type, "DXGI_SAMPLE_DESC")]
		public DxgiSampleDesc SampleDesc;
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "CachedPSO")]
		[NativeName(NativeNameType.Type, "D3D12_CACHED_PIPELINE_STATE")]
		public D3D12CachedPipelineState CachedPSO;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_PIPELINE_STATE_FLAGS")]
		public D3D12PipelineStateFlags Flags;


		public unsafe Span<DxgiFormat> RTVFormats
		
		{
			get
			{
				fixed (DxgiFormat* p = &this.RTVFormats_0)
				{
					return new Span<DxgiFormat>(p, 8);
				}
			}
		}
	}

	/// <summary>
	/// interface __MIDL_itf_d3d12_0000_0001 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_SHADER_BYTECODE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderBytecode
	{
		[NativeName(NativeNameType.Field, "pShaderBytecode")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PShaderBytecode;
		[NativeName(NativeNameType.Field, "BytecodeLength")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint BytecodeLength;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_STREAM_OUTPUT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12StreamOutputDesc
	{
		[NativeName(NativeNameType.Field, "pSODeclaration")]
		[NativeName(NativeNameType.Type, "const D3D12_SO_DECLARATION_ENTRY*")]
		public unsafe D3D12SoDeclarationEntry* PSODeclaration;
		[NativeName(NativeNameType.Field, "NumEntries")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumEntries;
		[NativeName(NativeNameType.Field, "pBufferStrides")]
		[NativeName(NativeNameType.Type, "const UINT*")]
		public unsafe uint* PBufferStrides;
		[NativeName(NativeNameType.Field, "NumStrides")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumStrides;
		[NativeName(NativeNameType.Field, "RasterizedStream")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RasterizedStream;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SO_DECLARATION_ENTRY")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SoDeclarationEntry
	{
		[NativeName(NativeNameType.Field, "Stream")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Stream;
		[NativeName(NativeNameType.Field, "SemanticName")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* SemanticName;
		[NativeName(NativeNameType.Field, "SemanticIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SemanticIndex;
		[NativeName(NativeNameType.Field, "StartComponent")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte StartComponent;
		[NativeName(NativeNameType.Field, "ComponentCount")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte ComponentCount;
		[NativeName(NativeNameType.Field, "OutputSlot")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte OutputSlot;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BLEND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BlendDesc
	{
		[NativeName(NativeNameType.Field, "AlphaToCoverageEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AlphaToCoverageEnable;
		[NativeName(NativeNameType.Field, "IndependentBlendEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IndependentBlendEnable;
		[NativeName(NativeNameType.Field, "RenderTarget")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_TARGET_BLEND_DESC[8]")]
		public D3D12RenderTargetBlendDesc RenderTarget_0;
		public D3D12RenderTargetBlendDesc RenderTarget_1;
		public D3D12RenderTargetBlendDesc RenderTarget_2;
		public D3D12RenderTargetBlendDesc RenderTarget_3;
		public D3D12RenderTargetBlendDesc RenderTarget_4;
		public D3D12RenderTargetBlendDesc RenderTarget_5;
		public D3D12RenderTargetBlendDesc RenderTarget_6;
		public D3D12RenderTargetBlendDesc RenderTarget_7;


		public unsafe Span<D3D12RenderTargetBlendDesc> RenderTarget
		
		{
			get
			{
				fixed (D3D12RenderTargetBlendDesc* p = &this.RenderTarget_0)
				{
					return new Span<D3D12RenderTargetBlendDesc>(p, 8);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RENDER_TARGET_BLEND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderTargetBlendDesc
	{
		[NativeName(NativeNameType.Field, "BlendEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int BlendEnable;
		[NativeName(NativeNameType.Field, "LogicOpEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int LogicOpEnable;
		[NativeName(NativeNameType.Field, "SrcBlend")]
		[NativeName(NativeNameType.Type, "D3D12_BLEND")]
		public D3D12Blend SrcBlend;
		[NativeName(NativeNameType.Field, "DestBlend")]
		[NativeName(NativeNameType.Type, "D3D12_BLEND")]
		public D3D12Blend DestBlend;
		[NativeName(NativeNameType.Field, "BlendOp")]
		[NativeName(NativeNameType.Type, "D3D12_BLEND_OP")]
		public D3D12BlendOp BlendOp;
		[NativeName(NativeNameType.Field, "SrcBlendAlpha")]
		[NativeName(NativeNameType.Type, "D3D12_BLEND")]
		public D3D12Blend SrcBlendAlpha;
		[NativeName(NativeNameType.Field, "DestBlendAlpha")]
		[NativeName(NativeNameType.Type, "D3D12_BLEND")]
		public D3D12Blend DestBlendAlpha;
		[NativeName(NativeNameType.Field, "BlendOpAlpha")]
		[NativeName(NativeNameType.Type, "D3D12_BLEND_OP")]
		public D3D12BlendOp BlendOpAlpha;
		[NativeName(NativeNameType.Field, "LogicOp")]
		[NativeName(NativeNameType.Type, "D3D12_LOGIC_OP")]
		public D3D12LogicOp LogicOp;
		[NativeName(NativeNameType.Field, "RenderTargetWriteMask")]
		[NativeName(NativeNameType.Type, "UINT8")]
		public byte RenderTargetWriteMask;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RASTERIZER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RasterizerDesc
	{
		[NativeName(NativeNameType.Field, "FillMode")]
		[NativeName(NativeNameType.Type, "D3D12_FILL_MODE")]
		public D3D12FillMode FillMode;
		[NativeName(NativeNameType.Field, "CullMode")]
		[NativeName(NativeNameType.Type, "D3D12_CULL_MODE")]
		public D3D12CullMode CullMode;
		[NativeName(NativeNameType.Field, "FrontCounterClockwise")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int FrontCounterClockwise;
		[NativeName(NativeNameType.Field, "DepthBias")]
		[NativeName(NativeNameType.Type, "INT")]
		public int DepthBias;
		[NativeName(NativeNameType.Field, "DepthBiasClamp")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float DepthBiasClamp;
		[NativeName(NativeNameType.Field, "SlopeScaledDepthBias")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float SlopeScaledDepthBias;
		[NativeName(NativeNameType.Field, "DepthClipEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DepthClipEnable;
		[NativeName(NativeNameType.Field, "MultisampleEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MultisampleEnable;
		[NativeName(NativeNameType.Field, "AntialiasedLineEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AntialiasedLineEnable;
		[NativeName(NativeNameType.Field, "ForcedSampleCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ForcedSampleCount;
		[NativeName(NativeNameType.Field, "ConservativeRaster")]
		[NativeName(NativeNameType.Type, "D3D12_CONSERVATIVE_RASTERIZATION_MODE")]
		public D3D12ConservativeRasterizationMode ConservativeRaster;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEPTH_STENCIL_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DepthStencilDesc
	{
		[NativeName(NativeNameType.Field, "DepthEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DepthEnable;
		[NativeName(NativeNameType.Field, "DepthWriteMask")]
		[NativeName(NativeNameType.Type, "D3D12_DEPTH_WRITE_MASK")]
		public D3D12DepthWriteMask DepthWriteMask;
		[NativeName(NativeNameType.Field, "DepthFunc")]
		[NativeName(NativeNameType.Type, "D3D12_COMPARISON_FUNC")]
		public D3D12ComparisonFunc DepthFunc;
		[NativeName(NativeNameType.Field, "StencilEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int StencilEnable;
		[NativeName(NativeNameType.Field, "StencilReadMask")]
		[NativeName(NativeNameType.Type, "UINT8")]
		public byte StencilReadMask;
		[NativeName(NativeNameType.Field, "StencilWriteMask")]
		[NativeName(NativeNameType.Type, "UINT8")]
		public byte StencilWriteMask;
		[NativeName(NativeNameType.Field, "FrontFace")]
		[NativeName(NativeNameType.Type, "D3D12_DEPTH_STENCILOP_DESC")]
		public D3D12DepthStencilopDesc FrontFace;
		[NativeName(NativeNameType.Field, "BackFace")]
		[NativeName(NativeNameType.Type, "D3D12_DEPTH_STENCILOP_DESC")]
		public D3D12DepthStencilopDesc BackFace;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEPTH_STENCILOP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DepthStencilopDesc
	{
		[NativeName(NativeNameType.Field, "StencilFailOp")]
		[NativeName(NativeNameType.Type, "D3D12_STENCIL_OP")]
		public D3D12StencilOp StencilFailOp;
		[NativeName(NativeNameType.Field, "StencilDepthFailOp")]
		[NativeName(NativeNameType.Type, "D3D12_STENCIL_OP")]
		public D3D12StencilOp StencilDepthFailOp;
		[NativeName(NativeNameType.Field, "StencilPassOp")]
		[NativeName(NativeNameType.Type, "D3D12_STENCIL_OP")]
		public D3D12StencilOp StencilPassOp;
		[NativeName(NativeNameType.Field, "StencilFunc")]
		[NativeName(NativeNameType.Type, "D3D12_COMPARISON_FUNC")]
		public D3D12ComparisonFunc StencilFunc;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_INPUT_LAYOUT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12InputLayoutDesc
	{
		[NativeName(NativeNameType.Field, "pInputElementDescs")]
		[NativeName(NativeNameType.Type, "const D3D12_INPUT_ELEMENT_DESC*")]
		public unsafe D3D12InputElementDesc* PInputElementDescs;
		[NativeName(NativeNameType.Field, "NumElements")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumElements;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_INPUT_ELEMENT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12InputElementDesc
	{
		[NativeName(NativeNameType.Field, "SemanticName")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* SemanticName;
		[NativeName(NativeNameType.Field, "SemanticIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SemanticIndex;
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "InputSlot")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InputSlot;
		[NativeName(NativeNameType.Field, "AlignedByteOffset")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint AlignedByteOffset;
		[NativeName(NativeNameType.Field, "InputSlotClass")]
		[NativeName(NativeNameType.Type, "D3D12_INPUT_CLASSIFICATION")]
		public D3D12InputClassification InputSlotClass;
		[NativeName(NativeNameType.Field, "InstanceDataStepRate")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstanceDataStepRate;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_CACHED_PIPELINE_STATE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12CachedPipelineState
	{
		[NativeName(NativeNameType.Field, "pCachedBlob")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PCachedBlob;
		[NativeName(NativeNameType.Field, "CachedBlobSizeInBytes")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint CachedBlobSizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_COMPUTE_PIPELINE_STATE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ComputePipelineStateDesc
	{
		[NativeName(NativeNameType.Field, "pRootSignature")]
		[NativeName(NativeNameType.Type, "ID3D12RootSignature*")]
		public unsafe ID3D12RootSignature* PRootSignature;
		[NativeName(NativeNameType.Field, "CS")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_BYTECODE")]
		public D3D12ShaderBytecode CS;
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "CachedPSO")]
		[NativeName(NativeNameType.Type, "D3D12_CACHED_PIPELINE_STATE")]
		public D3D12CachedPipelineState CachedPSO;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_PIPELINE_STATE_FLAGS")]
		public D3D12PipelineStateFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_CONSTANT_BUFFER_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ConstantBufferViewDesc
	{
		[NativeName(NativeNameType.Field, "BufferLocation")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong BufferLocation;
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SHADER_RESOURCE_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderResourceViewDesc
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12ShaderResourceViewDescUnion
		{
			[NativeName(NativeNameType.Field, "Buffer")]
			[NativeName(NativeNameType.Type, "D3D12_BUFFER_SRV")]
			[FieldOffset(0)]
			public D3D12BufferSrv Buffer;
			[NativeName(NativeNameType.Field, "Texture1D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX1D_SRV")]
			[FieldOffset(0)]
			public D3D12Tex1DSrv Texture1D;
			[NativeName(NativeNameType.Field, "Texture1DArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX1D_ARRAY_SRV")]
			[FieldOffset(0)]
			public D3D12Tex1DArraySrv Texture1DArray;
			[NativeName(NativeNameType.Field, "Texture2D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2D_SRV")]
			[FieldOffset(0)]
			public D3D12Tex2DSrv Texture2D;
			[NativeName(NativeNameType.Field, "Texture2DArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2D_ARRAY_SRV")]
			[FieldOffset(0)]
			public D3D12Tex2DArraySrv Texture2DArray;
			[NativeName(NativeNameType.Field, "Texture2DMS")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2DMS_SRV")]
			[FieldOffset(0)]
			public D3D12Tex2DmsSrv Texture2DMS;
			[NativeName(NativeNameType.Field, "Texture2DMSArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2DMS_ARRAY_SRV")]
			[FieldOffset(0)]
			public D3D12Tex2DmsArraySrv Texture2DMSArray;
			[NativeName(NativeNameType.Field, "Texture3D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX3D_SRV")]
			[FieldOffset(0)]
			public D3D12Tex3DSrv Texture3D;
			[NativeName(NativeNameType.Field, "TextureCube")]
			[NativeName(NativeNameType.Type, "D3D12_TEXCUBE_SRV")]
			[FieldOffset(0)]
			public D3D12TexcubeSrv TextureCube;
			[NativeName(NativeNameType.Field, "TextureCubeArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEXCUBE_ARRAY_SRV")]
			[FieldOffset(0)]
			public D3D12TexcubeArraySrv TextureCubeArray;
			[NativeName(NativeNameType.Field, "RaytracingAccelerationStructure")]
			[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV")]
			[FieldOffset(0)]
			public D3D12RaytracingAccelerationStructureSrv RaytracingAccelerationStructure;


		}

		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "ViewDimension")]
		[NativeName(NativeNameType.Type, "D3D12_SRV_DIMENSION")]
		public D3D12SrvDimension ViewDimension;
		[NativeName(NativeNameType.Field, "Shader4ComponentMapping")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Shader4ComponentMapping;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12ShaderResourceViewDescUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BUFFER_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BufferSrv
	{
		[NativeName(NativeNameType.Field, "FirstElement")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong FirstElement;
		[NativeName(NativeNameType.Field, "NumElements")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumElements;
		[NativeName(NativeNameType.Field, "StructureByteStride")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StructureByteStride;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_BUFFER_SRV_FLAGS")]
		public D3D12BufferSrvFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX1D_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DSrv
	{
		[NativeName(NativeNameType.Field, "MostDetailedMip")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MostDetailedMip;
		[NativeName(NativeNameType.Field, "MipLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipLevels;
		[NativeName(NativeNameType.Field, "ResourceMinLODClamp")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float ResourceMinLODClamp;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX1D_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DArraySrv
	{
		[NativeName(NativeNameType.Field, "MostDetailedMip")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MostDetailedMip;
		[NativeName(NativeNameType.Field, "MipLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipLevels;
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;
		[NativeName(NativeNameType.Field, "ResourceMinLODClamp")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float ResourceMinLODClamp;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2D_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DSrv
	{
		[NativeName(NativeNameType.Field, "MostDetailedMip")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MostDetailedMip;
		[NativeName(NativeNameType.Field, "MipLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipLevels;
		[NativeName(NativeNameType.Field, "PlaneSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PlaneSlice;
		[NativeName(NativeNameType.Field, "ResourceMinLODClamp")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float ResourceMinLODClamp;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2D_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DArraySrv
	{
		[NativeName(NativeNameType.Field, "MostDetailedMip")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MostDetailedMip;
		[NativeName(NativeNameType.Field, "MipLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipLevels;
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;
		[NativeName(NativeNameType.Field, "PlaneSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PlaneSlice;
		[NativeName(NativeNameType.Field, "ResourceMinLODClamp")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float ResourceMinLODClamp;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2DMS_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsSrv
	{
		[NativeName(NativeNameType.Field, "UnusedField_NothingToDefine")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UnusedFieldNothingToDefine;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2DMS_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsArraySrv
	{
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX3D_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex3DSrv
	{
		[NativeName(NativeNameType.Field, "MostDetailedMip")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MostDetailedMip;
		[NativeName(NativeNameType.Field, "MipLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipLevels;
		[NativeName(NativeNameType.Field, "ResourceMinLODClamp")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float ResourceMinLODClamp;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEXCUBE_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TexcubeSrv
	{
		[NativeName(NativeNameType.Field, "MostDetailedMip")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MostDetailedMip;
		[NativeName(NativeNameType.Field, "MipLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipLevels;
		[NativeName(NativeNameType.Field, "ResourceMinLODClamp")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float ResourceMinLODClamp;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEXCUBE_ARRAY_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TexcubeArraySrv
	{
		[NativeName(NativeNameType.Field, "MostDetailedMip")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MostDetailedMip;
		[NativeName(NativeNameType.Field, "MipLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipLevels;
		[NativeName(NativeNameType.Field, "First2DArrayFace")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint First2DArrayFace;
		[NativeName(NativeNameType.Field, "NumCubes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumCubes;
		[NativeName(NativeNameType.Field, "ResourceMinLODClamp")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float ResourceMinLODClamp;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingAccelerationStructureSrv
	{
		[NativeName(NativeNameType.Field, "Location")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong Location;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_UNORDERED_ACCESS_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12UnorderedAccessViewDesc
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12UnorderedAccessViewDescUnion
		{
			[NativeName(NativeNameType.Field, "Buffer")]
			[NativeName(NativeNameType.Type, "D3D12_BUFFER_UAV")]
			[FieldOffset(0)]
			public D3D12BufferUav Buffer;
			[NativeName(NativeNameType.Field, "Texture1D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX1D_UAV")]
			[FieldOffset(0)]
			public D3D12Tex1DUav Texture1D;
			[NativeName(NativeNameType.Field, "Texture1DArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX1D_ARRAY_UAV")]
			[FieldOffset(0)]
			public D3D12Tex1DArrayUav Texture1DArray;
			[NativeName(NativeNameType.Field, "Texture2D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2D_UAV")]
			[FieldOffset(0)]
			public D3D12Tex2DUav Texture2D;
			[NativeName(NativeNameType.Field, "Texture2DArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2D_ARRAY_UAV")]
			[FieldOffset(0)]
			public D3D12Tex2DArrayUav Texture2DArray;
			[NativeName(NativeNameType.Field, "Texture3D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX3D_UAV")]
			[FieldOffset(0)]
			public D3D12Tex3DUav Texture3D;


		}

		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "ViewDimension")]
		[NativeName(NativeNameType.Type, "D3D12_UAV_DIMENSION")]
		public D3D12UavDimension ViewDimension;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12UnorderedAccessViewDescUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BUFFER_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BufferUav
	{
		[NativeName(NativeNameType.Field, "FirstElement")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong FirstElement;
		[NativeName(NativeNameType.Field, "NumElements")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumElements;
		[NativeName(NativeNameType.Field, "StructureByteStride")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StructureByteStride;
		[NativeName(NativeNameType.Field, "CounterOffsetInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CounterOffsetInBytes;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_BUFFER_UAV_FLAGS")]
		public D3D12BufferUavFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX1D_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DUav
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX1D_ARRAY_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DArrayUav
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2D_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DUav
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "PlaneSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PlaneSlice;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2D_ARRAY_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DArrayUav
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;
		[NativeName(NativeNameType.Field, "PlaneSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PlaneSlice;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX3D_UAV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex3DUav
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "FirstWSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstWSlice;
		[NativeName(NativeNameType.Field, "WSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint WSize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RENDER_TARGET_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderTargetViewDesc
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12RenderTargetViewDescUnion
		{
			[NativeName(NativeNameType.Field, "Buffer")]
			[NativeName(NativeNameType.Type, "D3D12_BUFFER_RTV")]
			[FieldOffset(0)]
			public D3D12BufferRtv Buffer;
			[NativeName(NativeNameType.Field, "Texture1D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX1D_RTV")]
			[FieldOffset(0)]
			public D3D12Tex1DRtv Texture1D;
			[NativeName(NativeNameType.Field, "Texture1DArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX1D_ARRAY_RTV")]
			[FieldOffset(0)]
			public D3D12Tex1DArrayRtv Texture1DArray;
			[NativeName(NativeNameType.Field, "Texture2D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2D_RTV")]
			[FieldOffset(0)]
			public D3D12Tex2DRtv Texture2D;
			[NativeName(NativeNameType.Field, "Texture2DArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2D_ARRAY_RTV")]
			[FieldOffset(0)]
			public D3D12Tex2DArrayRtv Texture2DArray;
			[NativeName(NativeNameType.Field, "Texture2DMS")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2DMS_RTV")]
			[FieldOffset(0)]
			public D3D12Tex2DmsRtv Texture2DMS;
			[NativeName(NativeNameType.Field, "Texture2DMSArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2DMS_ARRAY_RTV")]
			[FieldOffset(0)]
			public D3D12Tex2DmsArrayRtv Texture2DMSArray;
			[NativeName(NativeNameType.Field, "Texture3D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX3D_RTV")]
			[FieldOffset(0)]
			public D3D12Tex3DRtv Texture3D;


		}

		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "ViewDimension")]
		[NativeName(NativeNameType.Type, "D3D12_RTV_DIMENSION")]
		public D3D12RtvDimension ViewDimension;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12RenderTargetViewDescUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BUFFER_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BufferRtv
	{
		[NativeName(NativeNameType.Field, "FirstElement")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong FirstElement;
		[NativeName(NativeNameType.Field, "NumElements")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumElements;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX1D_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DRtv
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX1D_ARRAY_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DArrayRtv
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2D_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DRtv
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "PlaneSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PlaneSlice;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2D_ARRAY_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DArrayRtv
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;
		[NativeName(NativeNameType.Field, "PlaneSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PlaneSlice;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2DMS_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsRtv
	{
		[NativeName(NativeNameType.Field, "UnusedField_NothingToDefine")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UnusedFieldNothingToDefine;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2DMS_ARRAY_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsArrayRtv
	{
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX3D_RTV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex3DRtv
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "FirstWSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstWSlice;
		[NativeName(NativeNameType.Field, "WSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint WSize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEPTH_STENCIL_VIEW_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DepthStencilViewDesc
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12DepthStencilViewDescUnion
		{
			[NativeName(NativeNameType.Field, "Texture1D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX1D_DSV")]
			[FieldOffset(0)]
			public D3D12Tex1DDsv Texture1D;
			[NativeName(NativeNameType.Field, "Texture1DArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX1D_ARRAY_DSV")]
			[FieldOffset(0)]
			public D3D12Tex1DArrayDsv Texture1DArray;
			[NativeName(NativeNameType.Field, "Texture2D")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2D_DSV")]
			[FieldOffset(0)]
			public D3D12Tex2DDsv Texture2D;
			[NativeName(NativeNameType.Field, "Texture2DArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2D_ARRAY_DSV")]
			[FieldOffset(0)]
			public D3D12Tex2DArrayDsv Texture2DArray;
			[NativeName(NativeNameType.Field, "Texture2DMS")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2DMS_DSV")]
			[FieldOffset(0)]
			public D3D12Tex2DmsDsv Texture2DMS;
			[NativeName(NativeNameType.Field, "Texture2DMSArray")]
			[NativeName(NativeNameType.Type, "D3D12_TEX2DMS_ARRAY_DSV")]
			[FieldOffset(0)]
			public D3D12Tex2DmsArrayDsv Texture2DMSArray;


		}

		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "ViewDimension")]
		[NativeName(NativeNameType.Type, "D3D12_DSV_DIMENSION")]
		public D3D12DsvDimension ViewDimension;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_DSV_FLAGS")]
		public D3D12DsvFlags Flags;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12DepthStencilViewDescUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX1D_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DDsv
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX1D_ARRAY_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex1DArrayDsv
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2D_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DDsv
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2D_ARRAY_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DArrayDsv
	{
		[NativeName(NativeNameType.Field, "MipSlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MipSlice;
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2DMS_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsDsv
	{
		[NativeName(NativeNameType.Field, "UnusedField_NothingToDefine")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UnusedFieldNothingToDefine;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEX2DMS_ARRAY_DSV")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Tex2DmsArrayDsv
	{
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "ArraySize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArraySize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SAMPLER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SamplerDesc
	{
		[NativeName(NativeNameType.Field, "Filter")]
		[NativeName(NativeNameType.Type, "D3D12_FILTER")]
		public D3D12Filter Filter;
		[NativeName(NativeNameType.Field, "AddressU")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_ADDRESS_MODE")]
		public D3D12TextureAddressMode AddressU;
		[NativeName(NativeNameType.Field, "AddressV")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_ADDRESS_MODE")]
		public D3D12TextureAddressMode AddressV;
		[NativeName(NativeNameType.Field, "AddressW")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_ADDRESS_MODE")]
		public D3D12TextureAddressMode AddressW;
		[NativeName(NativeNameType.Field, "MipLODBias")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MipLODBias;
		[NativeName(NativeNameType.Field, "MaxAnisotropy")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxAnisotropy;
		[NativeName(NativeNameType.Field, "ComparisonFunc")]
		[NativeName(NativeNameType.Type, "D3D12_COMPARISON_FUNC")]
		public D3D12ComparisonFunc ComparisonFunc;
		[NativeName(NativeNameType.Field, "BorderColor")]
		[NativeName(NativeNameType.Type, "FLOAT[4]")]
		public float BorderColor_0;
		public float BorderColor_1;
		public float BorderColor_2;
		public float BorderColor_3;
		[NativeName(NativeNameType.Field, "MinLOD")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MinLOD;
		[NativeName(NativeNameType.Field, "MaxLOD")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MaxLOD;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOURCE_ALLOCATION_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceAllocationInfo
	{
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SizeInBytes;
		[NativeName(NativeNameType.Field, "Alignment")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Alignment;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_CLEAR_VALUE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ClearValue
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12ClearValueUnion
		{
			[NativeName(NativeNameType.Field, "Color")]
			[NativeName(NativeNameType.Type, "FLOAT[4]")]
			[FieldOffset(0)]
			public float Color_0;
			[FieldOffset(16)]
			public float Color_1;
			[FieldOffset(32)]
			public float Color_2;
			[FieldOffset(48)]
			public float Color_3;
			[NativeName(NativeNameType.Field, "DepthStencil")]
			[NativeName(NativeNameType.Type, "D3D12_DEPTH_STENCIL_VALUE")]
			[FieldOffset(0)]
			public D3D12DepthStencilValue DepthStencil;


		}

		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12ClearValueUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEPTH_STENCIL_VALUE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DepthStencilValue
	{
		[NativeName(NativeNameType.Field, "Depth")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float Depth;
		[NativeName(NativeNameType.Field, "Stencil")]
		[NativeName(NativeNameType.Type, "UINT8")]
		public byte Stencil;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_QUERY_HEAP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12QueryHeapDesc
	{
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_QUERY_HEAP_TYPE")]
		public D3D12QueryHeapType Type;
		[NativeName(NativeNameType.Field, "Count")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Count;
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_COMMAND_SIGNATURE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12CommandSignatureDesc
	{
		[NativeName(NativeNameType.Field, "ByteStride")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ByteStride;
		[NativeName(NativeNameType.Field, "NumArgumentDescs")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumArgumentDescs;
		[NativeName(NativeNameType.Field, "pArgumentDescs")]
		[NativeName(NativeNameType.Type, "const D3D12_INDIRECT_ARGUMENT_DESC*")]
		public unsafe D3D12IndirectArgumentDesc* PArgumentDescs;
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_INDIRECT_ARGUMENT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12IndirectArgumentDesc
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12IndirectArgumentDescUnion
		{
			[NativeName(NativeNameType.StructOrClass, "")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct VertexBufferUnion
			{
				[NativeName(NativeNameType.Field, "Slot")]
				[NativeName(NativeNameType.Type, "UINT")]
				public uint Slot;


			}

			[NativeName(NativeNameType.StructOrClass, "")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct ConstantUnion
			{
				[NativeName(NativeNameType.Field, "RootParameterIndex")]
				[NativeName(NativeNameType.Type, "UINT")]
				public uint RootParameterIndex;
				[NativeName(NativeNameType.Field, "DestOffsetIn32BitValues")]
				[NativeName(NativeNameType.Type, "UINT")]
				public uint DestOffsetIn32BitValues;
				[NativeName(NativeNameType.Field, "Num32BitValuesToSet")]
				[NativeName(NativeNameType.Type, "UINT")]
				public uint Num32BitValuesToSet;


			}

			[NativeName(NativeNameType.StructOrClass, "")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct ConstantBufferViewUnion
			{
				[NativeName(NativeNameType.Field, "RootParameterIndex")]
				[NativeName(NativeNameType.Type, "UINT")]
				public uint RootParameterIndex;


			}

			[NativeName(NativeNameType.StructOrClass, "")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct ShaderResourceViewUnion
			{
				[NativeName(NativeNameType.Field, "RootParameterIndex")]
				[NativeName(NativeNameType.Type, "UINT")]
				public uint RootParameterIndex;


			}

			[NativeName(NativeNameType.StructOrClass, "")]
			[StructLayout(LayoutKind.Sequential)]
			public partial struct UnorderedAccessViewUnion
			{
				[NativeName(NativeNameType.Field, "RootParameterIndex")]
				[NativeName(NativeNameType.Type, "UINT")]
				public uint RootParameterIndex;


			}

			[NativeName(NativeNameType.Field, "VertexBuffer")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public VertexBufferUnion VertexBuffer;
			[NativeName(NativeNameType.Field, "Constant")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public ConstantUnion Constant;
			[NativeName(NativeNameType.Field, "ConstantBufferView")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public ConstantBufferViewUnion ConstantBufferView;
			[NativeName(NativeNameType.Field, "ShaderResourceView")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public ShaderResourceViewUnion ShaderResourceView;
			[NativeName(NativeNameType.Field, "UnorderedAccessView")]
			[NativeName(NativeNameType.Type, "")]
			[FieldOffset(0)]
			public UnorderedAccessViewUnion UnorderedAccessView;


		}

		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_INDIRECT_ARGUMENT_TYPE")]
		public D3D12IndirectArgumentType Type;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12IndirectArgumentDescUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_PACKED_MIP_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12PackedMipInfo
	{
		[NativeName(NativeNameType.Field, "NumStandardMips")]
		[NativeName(NativeNameType.Type, "UINT8")]
		public byte NumStandardMips;
		[NativeName(NativeNameType.Field, "NumPackedMips")]
		[NativeName(NativeNameType.Type, "UINT8")]
		public byte NumPackedMips;
		[NativeName(NativeNameType.Field, "NumTilesForPackedMips")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumTilesForPackedMips;
		[NativeName(NativeNameType.Field, "StartTileIndexInOverallResource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartTileIndexInOverallResource;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TILE_SHAPE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TileShape
	{
		[NativeName(NativeNameType.Field, "WidthInTexels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint WidthInTexels;
		[NativeName(NativeNameType.Field, "HeightInTexels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint HeightInTexels;
		[NativeName(NativeNameType.Field, "DepthInTexels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DepthInTexels;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SUBRESOURCE_TILING")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SubresourceTiling
	{
		[NativeName(NativeNameType.Field, "WidthInTiles")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint WidthInTiles;
		[NativeName(NativeNameType.Field, "HeightInTiles")]
		[NativeName(NativeNameType.Type, "UINT16")]
		public ushort HeightInTiles;
		[NativeName(NativeNameType.Field, "DepthInTiles")]
		[NativeName(NativeNameType.Type, "UINT16")]
		public ushort DepthInTiles;
		[NativeName(NativeNameType.Field, "StartTileIndexInOverallResource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartTileIndexInOverallResource;


	}

	[Guid("c64226a8-9201-46af-b4cc-53fb9ff7414f")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12PipelineLibrary")]
	public partial struct ID3D12PipelineLibrary : IComObject, IComObject<ID3D12PipelineLibrary>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c64226a8-9201-46af-b4cc-53fb9ff7414f");

		public unsafe ID3D12PipelineLibrary (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "StorePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult StorePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pPipeline")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ID3D12PipelineState* pPipeline)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, ID3D12PipelineState*, HResult>)(LpVtbl[1]))(ptr, pName, pPipeline);
			return ret;
		}

		[NativeName(NativeNameType.Func, "StorePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult StorePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pPipeline")] [NativeName(NativeNameType.Type, "ID3D12PipelineState*")] ref ID3D12PipelineState pPipeline)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12PipelineState* ppPipeline = &pPipeline)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, ID3D12PipelineState*, HResult>)(LpVtbl[1]))(ptr, pName, (ID3D12PipelineState*)ppPipeline);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pName, pDesc, riid, ppPipelineState);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pName, (D3D12GraphicsPipelineStateDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] D3D12GraphicsPipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pName, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadGraphicsPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadGraphicsPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_GRAPHICS_PIPELINE_STATE_DESC*")] ref D3D12GraphicsPipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12GraphicsPipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12GraphicsPipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pName, (D3D12GraphicsPipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pName, pDesc, riid, ppPipelineState);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pName, (D3D12ComputePipelineStateDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] D3D12ComputePipelineStateDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pName, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadComputePipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadComputePipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMPUTE_PIPELINE_STATE_DESC*")] ref D3D12ComputePipelineStateDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ComputePipelineStateDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, char*, D3D12ComputePipelineStateDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pName, (D3D12ComputePipelineStateDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetSerializedSize")]
		[return: NativeName(NativeNameType.Type, "SIZE_T")]
		public readonly unsafe nuint GetSerializedSize()
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			nuint ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, nuint>)(LpVtbl[4]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Serialize")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Serialize([NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "DataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint dataSizeInBytes)
		{
			ID3D12PipelineLibrary* ptr = (ID3D12PipelineLibrary*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary*, void*, nuint, HResult>)(LpVtbl[5]))(ptr, pData, dataSizeInBytes);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12PipelineLibrary value)
		{
			return Unsafe.As<ID3D12PipelineLibrary, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12PipelineLibrary value)
		{
			return Unsafe.As<ID3D12PipelineLibrary, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12PipelineLibrary value)
		{
			return Unsafe.As<ID3D12PipelineLibrary, IUnknown>(ref value);
		}

	}

	[Guid("80eabf42-2568-4e5e-bd82-c37f86961dc3")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12PipelineLibrary1")]
	public partial struct ID3D12PipelineLibrary1 : IComObject, IComObject<ID3D12PipelineLibrary1>, IComObject<ID3D12PipelineLibrary>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("80eabf42-2568-4e5e-bd82-c37f86961dc3");

		public unsafe ID3D12PipelineLibrary1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "LoadPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PIPELINE_STATE_STREAM_DESC*")] D3D12PipelineStateStreamDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary1* ptr = (ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, char*, D3D12PipelineStateStreamDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pName, pDesc, riid, ppPipelineState);
			return ret;
		}

		[NativeName(NativeNameType.Func, "LoadPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PIPELINE_STATE_STREAM_DESC*")] ref D3D12PipelineStateStreamDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary1* ptr = (ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PipelineStateStreamDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, char*, D3D12PipelineStateStreamDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pName, (D3D12PipelineStateStreamDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PIPELINE_STATE_STREAM_DESC*")] D3D12PipelineStateStreamDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary1* ptr = (ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, char*, D3D12PipelineStateStreamDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pName, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "LoadPipeline")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult LoadPipeline([NativeName(NativeNameType.Param, "pName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pName, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PIPELINE_STATE_STREAM_DESC*")] ref D3D12PipelineStateStreamDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12PipelineLibrary1* ptr = (ID3D12PipelineLibrary1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PipelineStateStreamDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12PipelineLibrary1*, char*, D3D12PipelineStateStreamDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pName, (D3D12PipelineStateStreamDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12PipelineLibrary (ID3D12PipelineLibrary1 value)
		{
			return Unsafe.As<ID3D12PipelineLibrary1, ID3D12PipelineLibrary>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12PipelineLibrary1 value)
		{
			return Unsafe.As<ID3D12PipelineLibrary1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12PipelineLibrary1 value)
		{
			return Unsafe.As<ID3D12PipelineLibrary1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12PipelineLibrary1 value)
		{
			return Unsafe.As<ID3D12PipelineLibrary1, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_PIPELINE_STATE_STREAM_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12PipelineStateStreamDesc
	{
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint SizeInBytes;
		[NativeName(NativeNameType.Field, "pPipelineStateSubobjectStream")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PPipelineStateSubobjectStream;


	}

	[Guid("77acce80-638e-4e65-8895-c1f23386863e")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device1")]
	public partial struct ID3D12Device1 : IComObject, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("77acce80-638e-4e65-8895-c1f23386863e");

		public unsafe ID3D12Device1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreatePipelineLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePipelineLibrary([NativeName(NativeNameType.Param, "pLibraryBlob")] [NativeName(NativeNameType.Type, "const void*")] void* pLibraryBlob, [NativeName(NativeNameType.Param, "BlobLength")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint blobLength, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineLibrary")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineLibrary)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, void*, nuint, Guid*, void**, HResult>)(LpVtbl[37]))(ptr, pLibraryBlob, blobLength, riid, ppPipelineLibrary);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreatePipelineLibrary")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePipelineLibrary([NativeName(NativeNameType.Param, "pLibraryBlob")] [NativeName(NativeNameType.Type, "const void*")] void* pLibraryBlob, [NativeName(NativeNameType.Param, "BlobLength")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint blobLength, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineLibrary")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineLibrary)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, void*, nuint, Guid*, void**, HResult>)(LpVtbl[37]))(ptr, pLibraryBlob, blobLength, (Guid*)priid, ppPipelineLibrary);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SetEventOnMultipleFenceCompletion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetEventOnMultipleFenceCompletion([NativeName(NativeNameType.Param, "ppFences")] [NativeName(NativeNameType.Type, "const ID3D12Fence**")] ID3D12Fence** ppFences, [NativeName(NativeNameType.Param, "pFenceValues")] [NativeName(NativeNameType.Type, "const UINT64*")] ulong* pFenceValues, [NativeName(NativeNameType.Param, "NumFences")] [NativeName(NativeNameType.Type, "UINT")] uint numFences, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_MULTIPLE_FENCE_WAIT_FLAGS")] D3D12MultipleFenceWaitFlags flags, [NativeName(NativeNameType.Param, "hEvent")] [NativeName(NativeNameType.Type, "HANDLE")] nint hEvent)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Fence**, ulong*, uint, D3D12MultipleFenceWaitFlags, nint, HResult>)(LpVtbl[38]))(ptr, ppFences, pFenceValues, numFences, flags, hEvent);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetEventOnMultipleFenceCompletion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetEventOnMultipleFenceCompletion([NativeName(NativeNameType.Param, "ppFences")] [NativeName(NativeNameType.Type, "const ID3D12Fence**")] ref ID3D12Fence* ppFences, [NativeName(NativeNameType.Param, "pFenceValues")] [NativeName(NativeNameType.Type, "const UINT64*")] ulong* pFenceValues, [NativeName(NativeNameType.Param, "NumFences")] [NativeName(NativeNameType.Type, "UINT")] uint numFences, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_MULTIPLE_FENCE_WAIT_FLAGS")] D3D12MultipleFenceWaitFlags flags, [NativeName(NativeNameType.Param, "hEvent")] [NativeName(NativeNameType.Type, "HANDLE")] nint hEvent)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence** pppFences = &ppFences)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Fence**, ulong*, uint, D3D12MultipleFenceWaitFlags, nint, HResult>)(LpVtbl[38]))(ptr, (ID3D12Fence**)pppFences, pFenceValues, numFences, flags, hEvent);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SetEventOnMultipleFenceCompletion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetEventOnMultipleFenceCompletion([NativeName(NativeNameType.Param, "ppFences")] [NativeName(NativeNameType.Type, "const ID3D12Fence**")] ID3D12Fence** ppFences, [NativeName(NativeNameType.Param, "pFenceValues")] [NativeName(NativeNameType.Type, "const UINT64*")] ref ulong pFenceValues, [NativeName(NativeNameType.Param, "NumFences")] [NativeName(NativeNameType.Type, "UINT")] uint numFences, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_MULTIPLE_FENCE_WAIT_FLAGS")] D3D12MultipleFenceWaitFlags flags, [NativeName(NativeNameType.Param, "hEvent")] [NativeName(NativeNameType.Type, "HANDLE")] nint hEvent)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppFenceValues = &pFenceValues)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Fence**, ulong*, uint, D3D12MultipleFenceWaitFlags, nint, HResult>)(LpVtbl[38]))(ptr, ppFences, (ulong*)ppFenceValues, numFences, flags, hEvent);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SetEventOnMultipleFenceCompletion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetEventOnMultipleFenceCompletion([NativeName(NativeNameType.Param, "ppFences")] [NativeName(NativeNameType.Type, "const ID3D12Fence**")] ref ID3D12Fence* ppFences, [NativeName(NativeNameType.Param, "pFenceValues")] [NativeName(NativeNameType.Type, "const UINT64*")] ref ulong pFenceValues, [NativeName(NativeNameType.Param, "NumFences")] [NativeName(NativeNameType.Type, "UINT")] uint numFences, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_MULTIPLE_FENCE_WAIT_FLAGS")] D3D12MultipleFenceWaitFlags flags, [NativeName(NativeNameType.Param, "hEvent")] [NativeName(NativeNameType.Type, "HANDLE")] nint hEvent)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence** pppFences = &ppFences)
			{
				fixed (ulong* ppFenceValues = &pFenceValues)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, ID3D12Fence**, ulong*, uint, D3D12MultipleFenceWaitFlags, nint, HResult>)(LpVtbl[38]))(ptr, (ID3D12Fence**)pppFences, (ulong*)ppFenceValues, numFences, flags, hEvent);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SetResidencyPriority")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetResidencyPriority([NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ID3D12Pageable** ppObjects, [NativeName(NativeNameType.Param, "pPriorities")] [NativeName(NativeNameType.Type, "const D3D12_RESIDENCY_PRIORITY*")] D3D12ResidencyPriority* pPriorities)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, ID3D12Pageable**, D3D12ResidencyPriority*, HResult>)(LpVtbl[39]))(ptr, numObjects, ppObjects, pPriorities);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetResidencyPriority")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetResidencyPriority([NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ref ID3D12Pageable* ppObjects, [NativeName(NativeNameType.Param, "pPriorities")] [NativeName(NativeNameType.Type, "const D3D12_RESIDENCY_PRIORITY*")] D3D12ResidencyPriority* pPriorities)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Pageable** pppObjects = &ppObjects)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, ID3D12Pageable**, D3D12ResidencyPriority*, HResult>)(LpVtbl[39]))(ptr, numObjects, (ID3D12Pageable**)pppObjects, pPriorities);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SetResidencyPriority")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetResidencyPriority([NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ID3D12Pageable** ppObjects, [NativeName(NativeNameType.Param, "pPriorities")] [NativeName(NativeNameType.Type, "const D3D12_RESIDENCY_PRIORITY*")] ref D3D12ResidencyPriority pPriorities)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResidencyPriority* ppPriorities = &pPriorities)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, ID3D12Pageable**, D3D12ResidencyPriority*, HResult>)(LpVtbl[39]))(ptr, numObjects, ppObjects, (D3D12ResidencyPriority*)ppPriorities);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SetResidencyPriority")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetResidencyPriority([NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ref ID3D12Pageable* ppObjects, [NativeName(NativeNameType.Param, "pPriorities")] [NativeName(NativeNameType.Type, "const D3D12_RESIDENCY_PRIORITY*")] ref D3D12ResidencyPriority pPriorities)
		{
			ID3D12Device1* ptr = (ID3D12Device1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Pageable** pppObjects = &ppObjects)
			{
				fixed (D3D12ResidencyPriority* ppPriorities = &pPriorities)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device1*, uint, ID3D12Pageable**, D3D12ResidencyPriority*, HResult>)(LpVtbl[39]))(ptr, numObjects, (ID3D12Pageable**)pppObjects, (D3D12ResidencyPriority*)ppPriorities);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device1 value)
		{
			return Unsafe.As<ID3D12Device1, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device1 value)
		{
			return Unsafe.As<ID3D12Device1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device1 value)
		{
			return Unsafe.As<ID3D12Device1, IUnknown>(ref value);
		}

	}

	[Guid("30baa41e-b15b-475c-a0bb-1af5c5b64328")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device2")]
	public partial struct ID3D12Device2 : IComObject, IComObject<ID3D12Device2>, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("30baa41e-b15b-475c-a0bb-1af5c5b64328");

		public unsafe ID3D12Device2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreatePipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PIPELINE_STATE_STREAM_DESC*")] D3D12PipelineStateStreamDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device2* ptr = (ID3D12Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device2*, D3D12PipelineStateStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pDesc, riid, ppPipelineState);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreatePipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PIPELINE_STATE_STREAM_DESC*")] ref D3D12PipelineStateStreamDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device2* ptr = (ID3D12Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PipelineStateStreamDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device2*, D3D12PipelineStateStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12PipelineStateStreamDesc*)ppDesc, riid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PIPELINE_STATE_STREAM_DESC*")] D3D12PipelineStateStreamDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device2* ptr = (ID3D12Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device2*, D3D12PipelineStateStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pDesc, (Guid*)priid, ppPipelineState);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePipelineState")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePipelineState([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PIPELINE_STATE_STREAM_DESC*")] ref D3D12PipelineStateStreamDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppPipelineState")] [NativeName(NativeNameType.Type, "void**")] void** ppPipelineState)
		{
			ID3D12Device2* ptr = (ID3D12Device2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PipelineStateStreamDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device2*, D3D12PipelineStateStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12PipelineStateStreamDesc*)ppDesc, (Guid*)priid, ppPipelineState);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device1 (ID3D12Device2 value)
		{
			return Unsafe.As<ID3D12Device2, ID3D12Device1>(ref value);
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device2 value)
		{
			return Unsafe.As<ID3D12Device2, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device2 value)
		{
			return Unsafe.As<ID3D12Device2, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device2 value)
		{
			return Unsafe.As<ID3D12Device2, IUnknown>(ref value);
		}

	}

	[Guid("81dadc15-2bad-4392-93c5-101345c4aa98")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device3")]
	public partial struct ID3D12Device3 : IComObject, IComObject<ID3D12Device3>, IComObject<ID3D12Device2>, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("81dadc15-2bad-4392-93c5-101345c4aa98");

		public unsafe ID3D12Device3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "OpenExistingHeapFromAddress")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult OpenExistingHeapFromAddress([NativeName(NativeNameType.Param, "pAddress")] [NativeName(NativeNameType.Type, "const void*")] void* pAddress, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device3* ptr = (ID3D12Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device3*, void*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pAddress, riid, ppvHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "OpenExistingHeapFromAddress")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult OpenExistingHeapFromAddress([NativeName(NativeNameType.Param, "pAddress")] [NativeName(NativeNameType.Type, "const void*")] void* pAddress, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device3* ptr = (ID3D12Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device3*, void*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pAddress, (Guid*)priid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "OpenExistingHeapFromFileMapping")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult OpenExistingHeapFromFileMapping([NativeName(NativeNameType.Param, "hFileMapping")] [NativeName(NativeNameType.Type, "HANDLE")] nint hFileMapping, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device3* ptr = (ID3D12Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device3*, nint, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, hFileMapping, riid, ppvHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "OpenExistingHeapFromFileMapping")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult OpenExistingHeapFromFileMapping([NativeName(NativeNameType.Param, "hFileMapping")] [NativeName(NativeNameType.Type, "HANDLE")] nint hFileMapping, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device3* ptr = (ID3D12Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device3*, nint, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, hFileMapping, (Guid*)priid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "EnqueueMakeResident")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnqueueMakeResident([NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_RESIDENCY_FLAGS")] D3D12ResidencyFlags flags, [NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ID3D12Pageable** ppObjects, [NativeName(NativeNameType.Param, "pFenceToSignal")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ID3D12Fence* pFenceToSignal, [NativeName(NativeNameType.Param, "FenceValueToSignal")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValueToSignal)
		{
			ID3D12Device3* ptr = (ID3D12Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device3*, D3D12ResidencyFlags, uint, ID3D12Pageable**, ID3D12Fence*, ulong, HResult>)(LpVtbl[3]))(ptr, flags, numObjects, ppObjects, pFenceToSignal, fenceValueToSignal);
			return ret;
		}

		[NativeName(NativeNameType.Func, "EnqueueMakeResident")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnqueueMakeResident([NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_RESIDENCY_FLAGS")] D3D12ResidencyFlags flags, [NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ref ID3D12Pageable* ppObjects, [NativeName(NativeNameType.Param, "pFenceToSignal")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ID3D12Fence* pFenceToSignal, [NativeName(NativeNameType.Param, "FenceValueToSignal")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValueToSignal)
		{
			ID3D12Device3* ptr = (ID3D12Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Pageable** pppObjects = &ppObjects)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device3*, D3D12ResidencyFlags, uint, ID3D12Pageable**, ID3D12Fence*, ulong, HResult>)(LpVtbl[3]))(ptr, flags, numObjects, (ID3D12Pageable**)pppObjects, pFenceToSignal, fenceValueToSignal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "EnqueueMakeResident")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnqueueMakeResident([NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_RESIDENCY_FLAGS")] D3D12ResidencyFlags flags, [NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ID3D12Pageable** ppObjects, [NativeName(NativeNameType.Param, "pFenceToSignal")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ref ID3D12Fence pFenceToSignal, [NativeName(NativeNameType.Param, "FenceValueToSignal")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValueToSignal)
		{
			ID3D12Device3* ptr = (ID3D12Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFenceToSignal = &pFenceToSignal)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device3*, D3D12ResidencyFlags, uint, ID3D12Pageable**, ID3D12Fence*, ulong, HResult>)(LpVtbl[3]))(ptr, flags, numObjects, ppObjects, (ID3D12Fence*)ppFenceToSignal, fenceValueToSignal);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "EnqueueMakeResident")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnqueueMakeResident([NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_RESIDENCY_FLAGS")] D3D12ResidencyFlags flags, [NativeName(NativeNameType.Param, "NumObjects")] [NativeName(NativeNameType.Type, "UINT")] uint numObjects, [NativeName(NativeNameType.Param, "ppObjects")] [NativeName(NativeNameType.Type, "const ID3D12Pageable**")] ref ID3D12Pageable* ppObjects, [NativeName(NativeNameType.Param, "pFenceToSignal")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ref ID3D12Fence pFenceToSignal, [NativeName(NativeNameType.Param, "FenceValueToSignal")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValueToSignal)
		{
			ID3D12Device3* ptr = (ID3D12Device3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Pageable** pppObjects = &ppObjects)
			{
				fixed (ID3D12Fence* ppFenceToSignal = &pFenceToSignal)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device3*, D3D12ResidencyFlags, uint, ID3D12Pageable**, ID3D12Fence*, ulong, HResult>)(LpVtbl[3]))(ptr, flags, numObjects, (ID3D12Pageable**)pppObjects, (ID3D12Fence*)ppFenceToSignal, fenceValueToSignal);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device2 (ID3D12Device3 value)
		{
			return Unsafe.As<ID3D12Device3, ID3D12Device2>(ref value);
		}

		public unsafe static implicit operator ID3D12Device1 (ID3D12Device3 value)
		{
			return Unsafe.As<ID3D12Device3, ID3D12Device1>(ref value);
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device3 value)
		{
			return Unsafe.As<ID3D12Device3, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device3 value)
		{
			return Unsafe.As<ID3D12Device3, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device3 value)
		{
			return Unsafe.As<ID3D12Device3, IUnknown>(ref value);
		}

	}

	[Guid("a1533d18-0ac1-4084-85b9-89a96116806b")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12ProtectedSession")]
	public partial struct ID3D12ProtectedSession : IComObject, IComObject<ID3D12ProtectedSession>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a1533d18-0ac1-4084-85b9-89a96116806b");

		public unsafe ID3D12ProtectedSession (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetStatusFence")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetStatusFence([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppFence")] [NativeName(NativeNameType.Type, "void**")] void** ppFence)
		{
			ID3D12ProtectedSession* ptr = (ID3D12ProtectedSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, riid, ppFence);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetStatusFence")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetStatusFence([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppFence")] [NativeName(NativeNameType.Type, "void**")] void** ppFence)
		{
			ID3D12ProtectedSession* ptr = (ID3D12ProtectedSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (Guid*)priid, ppFence);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetSessionStatus")]
		[return: NativeName(NativeNameType.Type, "D3D12_PROTECTED_SESSION_STATUS")]
		public readonly unsafe D3D12ProtectedSessionStatus GetSessionStatus()
		{
			ID3D12ProtectedSession* ptr = (ID3D12ProtectedSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ProtectedSessionStatus ret = ((delegate* unmanaged[Stdcall]<ID3D12ProtectedSession*, D3D12ProtectedSessionStatus>)(LpVtbl[2]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12ProtectedSession value)
		{
			return Unsafe.As<ID3D12ProtectedSession, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12ProtectedSession value)
		{
			return Unsafe.As<ID3D12ProtectedSession, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12ProtectedSession value)
		{
			return Unsafe.As<ID3D12ProtectedSession, IUnknown>(ref value);
		}

	}

	[Guid("6cd696f4-f289-40cc-8091-5a6c0a099c3d")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12ProtectedResourceSession")]
	public partial struct ID3D12ProtectedResourceSession : IComObject, IComObject<ID3D12ProtectedResourceSession>, IComObject<ID3D12ProtectedSession>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6cd696f4-f289-40cc-8091-5a6c0a099c3d");

		public unsafe ID3D12ProtectedResourceSession (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_PROTECTED_RESOURCE_SESSION_DESC")]
		public readonly unsafe D3D12ProtectedResourceSessionDesc GetDesc()
		{
			ID3D12ProtectedResourceSession* ptr = (ID3D12ProtectedResourceSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ProtectedResourceSessionDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession*, D3D12ProtectedResourceSessionDesc>)(LpVtbl[2]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12ProtectedSession (ID3D12ProtectedResourceSession value)
		{
			return Unsafe.As<ID3D12ProtectedResourceSession, ID3D12ProtectedSession>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12ProtectedResourceSession value)
		{
			return Unsafe.As<ID3D12ProtectedResourceSession, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12ProtectedResourceSession value)
		{
			return Unsafe.As<ID3D12ProtectedResourceSession, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12ProtectedResourceSession value)
		{
			return Unsafe.As<ID3D12ProtectedResourceSession, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_PROTECTED_RESOURCE_SESSION_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ProtectedResourceSessionDesc
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_PROTECTED_RESOURCE_SESSION_FLAGS")]
		public D3D12ProtectedResourceSessionFlags Flags;


	}

	[Guid("e865df17-a9ee-46f9-a463-3098315aa2e5")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device4")]
	public partial struct ID3D12Device4 : IComObject, IComObject<ID3D12Device4>, IComObject<ID3D12Device3>, IComObject<ID3D12Device2>, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("e865df17-a9ee-46f9-a463-3098315aa2e5");

		public unsafe ID3D12Device4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreateCommandList1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList1([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_FLAGS")] D3D12CommandListFlags flags, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, D3D12CommandListType, D3D12CommandListFlags, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, type, flags, riid, ppCommandList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommandList1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandList1([NativeName(NativeNameType.Param, "nodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")] D3D12CommandListType type, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_FLAGS")] D3D12CommandListFlags flags, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandList")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandList)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, D3D12CommandListType, D3D12CommandListFlags, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, type, flags, (Guid*)priid, ppCommandList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateProtectedResourceSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateProtectedResourceSession([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PROTECTED_RESOURCE_SESSION_DESC*")] D3D12ProtectedResourceSessionDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppSession")] [NativeName(NativeNameType.Type, "void**")] void** ppSession)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ProtectedResourceSessionDesc*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pDesc, riid, ppSession);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateProtectedResourceSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateProtectedResourceSession([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PROTECTED_RESOURCE_SESSION_DESC*")] ref D3D12ProtectedResourceSessionDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppSession")] [NativeName(NativeNameType.Type, "void**")] void** ppSession)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ProtectedResourceSessionDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ProtectedResourceSessionDesc*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (D3D12ProtectedResourceSessionDesc*)ppDesc, riid, ppSession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateProtectedResourceSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateProtectedResourceSession([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PROTECTED_RESOURCE_SESSION_DESC*")] D3D12ProtectedResourceSessionDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppSession")] [NativeName(NativeNameType.Type, "void**")] void** ppSession)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ProtectedResourceSessionDesc*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pDesc, (Guid*)priid, ppSession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateProtectedResourceSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateProtectedResourceSession([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PROTECTED_RESOURCE_SESSION_DESC*")] ref D3D12ProtectedResourceSessionDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppSession")] [NativeName(NativeNameType.Type, "void**")] void** ppSession)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ProtectedResourceSessionDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ProtectedResourceSessionDesc*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (D3D12ProtectedResourceSessionDesc*)ppDesc, (Guid*)priid, ppSession);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priidResource = &riidResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource1([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
						{
							fixed (Guid* priidResource = &riidResource)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] D3D12HeapDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, pDesc, pProtectedSession, riid, ppvHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] ref D3D12HeapDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (D3D12HeapDesc*)ppDesc, pProtectedSession, riid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] D3D12HeapDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, pDesc, (ID3D12ProtectedResourceSession*)ppProtectedSession, riid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] ref D3D12HeapDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (D3D12HeapDesc*)ppDesc, (ID3D12ProtectedResourceSession*)ppProtectedSession, riid, ppvHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] D3D12HeapDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, pDesc, pProtectedSession, (Guid*)priid, ppvHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] ref D3D12HeapDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (D3D12HeapDesc*)ppDesc, pProtectedSession, (Guid*)priid, ppvHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] D3D12HeapDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, pDesc, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priid, ppvHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateHeap1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] ref D3D12HeapDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppvHeap)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12HeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (D3D12HeapDesc*)ppDesc, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priid, ppvHeap);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, initialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, initialState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, initialState, pOptimizedClearValue, pProtectedSession, (Guid*)priid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, pProtectedSession, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, initialState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12ResourceDesc*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo1")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo1([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDescs, [NativeName(NativeNameType.Param, "pResourceAllocationInfo1")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO1*")] D3D12ResourceAllocationInfo1* pResourceAllocationInfo1)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, uint, D3D12ResourceDesc*, D3D12ResourceAllocationInfo1*, D3D12ResourceAllocationInfo>)(LpVtbl[8]))(ptr, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo1")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo1([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDescs, [NativeName(NativeNameType.Param, "pResourceAllocationInfo1")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO1*")] D3D12ResourceAllocationInfo1* pResourceAllocationInfo1)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDescs = &pResourceDescs)
			{
				D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, uint, D3D12ResourceDesc*, D3D12ResourceAllocationInfo1*, D3D12ResourceAllocationInfo>)(LpVtbl[8]))(ptr, visibleMask, numResourceDescs, (D3D12ResourceDesc*)ppResourceDescs, pResourceAllocationInfo1);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo1")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo1([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pResourceDescs, [NativeName(NativeNameType.Param, "pResourceAllocationInfo1")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO1*")] ref D3D12ResourceAllocationInfo1 pResourceAllocationInfo1)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceAllocationInfo1* ppResourceAllocationInfo1 = &pResourceAllocationInfo1)
			{
				D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, uint, D3D12ResourceDesc*, D3D12ResourceAllocationInfo1*, D3D12ResourceAllocationInfo>)(LpVtbl[8]))(ptr, visibleMask, numResourceDescs, pResourceDescs, (D3D12ResourceAllocationInfo1*)ppResourceAllocationInfo1);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo1")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo1([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pResourceDescs, [NativeName(NativeNameType.Param, "pResourceAllocationInfo1")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO1*")] ref D3D12ResourceAllocationInfo1 pResourceAllocationInfo1)
		{
			ID3D12Device4* ptr = (ID3D12Device4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppResourceDescs = &pResourceDescs)
			{
				fixed (D3D12ResourceAllocationInfo1* ppResourceAllocationInfo1 = &pResourceAllocationInfo1)
				{
					D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device4*, uint, uint, D3D12ResourceDesc*, D3D12ResourceAllocationInfo1*, D3D12ResourceAllocationInfo>)(LpVtbl[8]))(ptr, visibleMask, numResourceDescs, (D3D12ResourceDesc*)ppResourceDescs, (D3D12ResourceAllocationInfo1*)ppResourceAllocationInfo1);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device3 (ID3D12Device4 value)
		{
			return Unsafe.As<ID3D12Device4, ID3D12Device3>(ref value);
		}

		public unsafe static implicit operator ID3D12Device2 (ID3D12Device4 value)
		{
			return Unsafe.As<ID3D12Device4, ID3D12Device2>(ref value);
		}

		public unsafe static implicit operator ID3D12Device1 (ID3D12Device4 value)
		{
			return Unsafe.As<ID3D12Device4, ID3D12Device1>(ref value);
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device4 value)
		{
			return Unsafe.As<ID3D12Device4, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device4 value)
		{
			return Unsafe.As<ID3D12Device4, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device4 value)
		{
			return Unsafe.As<ID3D12Device4, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOURCE_ALLOCATION_INFO1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceAllocationInfo1
	{
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "Alignment")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Alignment;
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SizeInBytes;


	}

	[Guid("e667af9f-cd56-4f46-83ce-032e595d70a8")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12LifetimeOwner")]
	public partial struct ID3D12LifetimeOwner : IComObject, IComObject<ID3D12LifetimeOwner>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("e667af9f-cd56-4f46-83ce-032e595d70a8");

		public unsafe ID3D12LifetimeOwner (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "LifetimeStateUpdated")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void LifetimeStateUpdated([NativeName(NativeNameType.Param, "NewState")] [NativeName(NativeNameType.Type, "D3D12_LIFETIME_STATE")] D3D12LifetimeState newState)
		{
			ID3D12LifetimeOwner* ptr = (ID3D12LifetimeOwner*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12LifetimeOwner*, D3D12LifetimeState, void>)(*LpVtbl))(ptr, newState);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12LifetimeOwner value)
		{
			return Unsafe.As<ID3D12LifetimeOwner, IUnknown>(ref value);
		}

	}

	[Guid("f1df64b6-57fd-49cd-8807-c0eb88b45c8f")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12SwapChainAssistant")]
	public partial struct ID3D12SwapChainAssistant : IComObject, IComObject<ID3D12SwapChainAssistant>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("f1df64b6-57fd-49cd-8807-c0eb88b45c8f");

		public unsafe ID3D12SwapChainAssistant (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetLUID")]
		[return: NativeName(NativeNameType.Type, "LUID")]
		public readonly unsafe Luid GetLUID()
		{
			ID3D12SwapChainAssistant* ptr = (ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			Luid ret = ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Luid>)(*LpVtbl))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetSwapChainObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetSwapChainObject([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "void**")] void** ppv)
		{
			ID3D12SwapChainAssistant* ptr = (ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, riid, ppv);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetSwapChainObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetSwapChainObject([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "void**")] void** ppv)
		{
			ID3D12SwapChainAssistant* ptr = (ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (Guid*)priid, ppv);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCurrentResourceAndCommandQueue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetCurrentResourceAndCommandQueue([NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource, [NativeName(NativeNameType.Param, "riidQueue")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidQueue, [NativeName(NativeNameType.Param, "ppvQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppvQueue)
		{
			ID3D12SwapChainAssistant* ptr = (ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Guid*, void**, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, riidResource, ppvResource, riidQueue, ppvQueue);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCurrentResourceAndCommandQueue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetCurrentResourceAndCommandQueue([NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource, [NativeName(NativeNameType.Param, "riidQueue")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidQueue, [NativeName(NativeNameType.Param, "ppvQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppvQueue)
		{
			ID3D12SwapChainAssistant* ptr = (ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priidResource = &riidResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Guid*, void**, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (Guid*)priidResource, ppvResource, riidQueue, ppvQueue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCurrentResourceAndCommandQueue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetCurrentResourceAndCommandQueue([NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource, [NativeName(NativeNameType.Param, "riidQueue")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidQueue, [NativeName(NativeNameType.Param, "ppvQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppvQueue)
		{
			ID3D12SwapChainAssistant* ptr = (ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priidQueue = &riidQueue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Guid*, void**, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, riidResource, ppvResource, (Guid*)priidQueue, ppvQueue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetCurrentResourceAndCommandQueue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetCurrentResourceAndCommandQueue([NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource, [NativeName(NativeNameType.Param, "riidQueue")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidQueue, [NativeName(NativeNameType.Param, "ppvQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppvQueue)
		{
			ID3D12SwapChainAssistant* ptr = (ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priidResource = &riidResource)
			{
				fixed (Guid* priidQueue = &riidQueue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, Guid*, void**, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (Guid*)priidResource, ppvResource, (Guid*)priidQueue, ppvQueue);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "InsertImplicitSync")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult InsertImplicitSync()
		{
			ID3D12SwapChainAssistant* ptr = (ID3D12SwapChainAssistant*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12SwapChainAssistant*, HResult>)(LpVtbl[3]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12SwapChainAssistant value)
		{
			return Unsafe.As<ID3D12SwapChainAssistant, IUnknown>(ref value);
		}

	}

	[Guid("3fd03d36-4eb1-424a-a582-494ecb8ba813")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12LifetimeTracker")]
	public partial struct ID3D12LifetimeTracker : IComObject, IComObject<ID3D12LifetimeTracker>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3fd03d36-4eb1-424a-a582-494ecb8ba813");

		public unsafe ID3D12LifetimeTracker (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "DestroyOwnedObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult DestroyOwnedObject([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ID3D12DeviceChild* pObject)
		{
			ID3D12LifetimeTracker* ptr = (ID3D12LifetimeTracker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12LifetimeTracker*, ID3D12DeviceChild*, HResult>)(LpVtbl[1]))(ptr, pObject);
			return ret;
		}

		[NativeName(NativeNameType.Func, "DestroyOwnedObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult DestroyOwnedObject([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ref ID3D12DeviceChild pObject)
		{
			ID3D12LifetimeTracker* ptr = (ID3D12LifetimeTracker*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12LifetimeTracker*, ID3D12DeviceChild*, HResult>)(LpVtbl[1]))(ptr, (ID3D12DeviceChild*)ppObject);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12LifetimeTracker value)
		{
			return Unsafe.As<ID3D12LifetimeTracker, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12LifetimeTracker value)
		{
			return Unsafe.As<ID3D12LifetimeTracker, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12LifetimeTracker value)
		{
			return Unsafe.As<ID3D12LifetimeTracker, IUnknown>(ref value);
		}

	}

	[Guid("47016943-fca8-4594-93ea-af258b55346d")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12StateObject")]
	public partial struct ID3D12StateObject : IComObject, IComObject<ID3D12StateObject>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("47016943-fca8-4594-93ea-af258b55346d");

		public unsafe ID3D12StateObject (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12StateObject value)
		{
			return Unsafe.As<ID3D12StateObject, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12StateObject value)
		{
			return Unsafe.As<ID3D12StateObject, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12StateObject value)
		{
			return Unsafe.As<ID3D12StateObject, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12StateObject value)
		{
			return Unsafe.As<ID3D12StateObject, IUnknown>(ref value);
		}

	}

	[Guid("de5fa827-9bf9-4f26-89ff-d7f56fde3860")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12StateObjectProperties")]
	public partial struct ID3D12StateObjectProperties : IComObject, IComObject<ID3D12StateObjectProperties>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("de5fa827-9bf9-4f26-89ff-d7f56fde3860");

		public unsafe ID3D12StateObjectProperties (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetShaderIdentifier")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public readonly unsafe void* GetShaderIdentifier([NativeName(NativeNameType.Param, "pExportName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pExportName)
		{
			ID3D12StateObjectProperties* ptr = (ID3D12StateObjectProperties*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			void* ret = ((delegate* unmanaged[Stdcall]<ID3D12StateObjectProperties*, char*, void*>)(*LpVtbl))(ptr, pExportName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetShaderStackSize")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetShaderStackSize([NativeName(NativeNameType.Param, "pExportName")] [NativeName(NativeNameType.Type, "LPCWSTR")] char* pExportName)
		{
			ID3D12StateObjectProperties* ptr = (ID3D12StateObjectProperties*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12StateObjectProperties*, char*, ulong>)(LpVtbl[1]))(ptr, pExportName);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetPipelineStackSize")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetPipelineStackSize()
		{
			ID3D12StateObjectProperties* ptr = (ID3D12StateObjectProperties*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12StateObjectProperties*, ulong>)(LpVtbl[2]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetPipelineStackSize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetPipelineStackSize([NativeName(NativeNameType.Param, "PipelineStackSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64")] ulong pipelineStackSizeInBytes)
		{
			ID3D12StateObjectProperties* ptr = (ID3D12StateObjectProperties*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12StateObjectProperties*, ulong, void>)(LpVtbl[3]))(ptr, pipelineStackSizeInBytes);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12StateObjectProperties value)
		{
			return Unsafe.As<ID3D12StateObjectProperties, IUnknown>(ref value);
		}

	}

	[Guid("8b4f173b-2fea-4b80-8f58-4307191ab95d")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device5")]
	public partial struct ID3D12Device5 : IComObject, IComObject<ID3D12Device5>, IComObject<ID3D12Device4>, IComObject<ID3D12Device3>, IComObject<ID3D12Device2>, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8b4f173b-2fea-4b80-8f58-4307191ab95d");

		public unsafe ID3D12Device5 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreateLifetimeTracker")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateLifetimeTracker([NativeName(NativeNameType.Param, "pOwner")] [NativeName(NativeNameType.Type, "ID3D12LifetimeOwner*")] ID3D12LifetimeOwner* pOwner, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvTracker")] [NativeName(NativeNameType.Type, "void**")] void** ppvTracker)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12LifetimeOwner*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, pOwner, riid, ppvTracker);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateLifetimeTracker")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateLifetimeTracker([NativeName(NativeNameType.Param, "pOwner")] [NativeName(NativeNameType.Type, "ID3D12LifetimeOwner*")] ref ID3D12LifetimeOwner pOwner, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvTracker")] [NativeName(NativeNameType.Type, "void**")] void** ppvTracker)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12LifetimeOwner* ppOwner = &pOwner)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12LifetimeOwner*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (ID3D12LifetimeOwner*)ppOwner, riid, ppvTracker);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateLifetimeTracker")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateLifetimeTracker([NativeName(NativeNameType.Param, "pOwner")] [NativeName(NativeNameType.Type, "ID3D12LifetimeOwner*")] ID3D12LifetimeOwner* pOwner, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvTracker")] [NativeName(NativeNameType.Type, "void**")] void** ppvTracker)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12LifetimeOwner*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, pOwner, (Guid*)priid, ppvTracker);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateLifetimeTracker")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateLifetimeTracker([NativeName(NativeNameType.Param, "pOwner")] [NativeName(NativeNameType.Type, "ID3D12LifetimeOwner*")] ref ID3D12LifetimeOwner pOwner, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvTracker")] [NativeName(NativeNameType.Type, "void**")] void** ppvTracker)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12LifetimeOwner* ppOwner = &pOwner)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, ID3D12LifetimeOwner*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (ID3D12LifetimeOwner*)ppOwner, (Guid*)priid, ppvTracker);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "RemoveDevice")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void RemoveDevice()
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device5*, void>)(LpVtbl[7]))(ptr);
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommands")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommands([NativeName(NativeNameType.Param, "pNumMetaCommands")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumMetaCommands, [NativeName(NativeNameType.Param, "pDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_DESC*")] D3D12MetaCommandDesc* pDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint*, D3D12MetaCommandDesc*, HResult>)(LpVtbl[8]))(ptr, pNumMetaCommands, pDescs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommands")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommands([NativeName(NativeNameType.Param, "pNumMetaCommands")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumMetaCommands, [NativeName(NativeNameType.Param, "pDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_DESC*")] D3D12MetaCommandDesc* pDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumMetaCommands = &pNumMetaCommands)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint*, D3D12MetaCommandDesc*, HResult>)(LpVtbl[8]))(ptr, (uint*)ppNumMetaCommands, pDescs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommands")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommands([NativeName(NativeNameType.Param, "pNumMetaCommands")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumMetaCommands, [NativeName(NativeNameType.Param, "pDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_DESC*")] ref D3D12MetaCommandDesc pDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12MetaCommandDesc* ppDescs = &pDescs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint*, D3D12MetaCommandDesc*, HResult>)(LpVtbl[8]))(ptr, pNumMetaCommands, (D3D12MetaCommandDesc*)ppDescs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommands")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommands([NativeName(NativeNameType.Param, "pNumMetaCommands")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumMetaCommands, [NativeName(NativeNameType.Param, "pDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_DESC*")] ref D3D12MetaCommandDesc pDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumMetaCommands = &pNumMetaCommands)
			{
				fixed (D3D12MetaCommandDesc* ppDescs = &pDescs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, uint*, D3D12MetaCommandDesc*, HResult>)(LpVtbl[8]))(ptr, (uint*)ppNumMetaCommands, (D3D12MetaCommandDesc*)ppDescs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] D3D12MetaCommandParameterDesc* pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, commandId, stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] D3D12MetaCommandParameterDesc* pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, (Guid*)pcommandId, stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] D3D12MetaCommandParameterDesc* pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppTotalStructureSizeInBytes = &pTotalStructureSizeInBytes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, commandId, stage, (uint*)ppTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] D3D12MetaCommandParameterDesc* pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				fixed (uint* ppTotalStructureSizeInBytes = &pTotalStructureSizeInBytes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, (Guid*)pcommandId, stage, (uint*)ppTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] D3D12MetaCommandParameterDesc* pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppParameterCount = &pParameterCount)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, commandId, stage, pTotalStructureSizeInBytes, (uint*)ppParameterCount, pParameterDescs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] D3D12MetaCommandParameterDesc* pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				fixed (uint* ppParameterCount = &pParameterCount)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, (Guid*)pcommandId, stage, pTotalStructureSizeInBytes, (uint*)ppParameterCount, pParameterDescs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] D3D12MetaCommandParameterDesc* pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppTotalStructureSizeInBytes = &pTotalStructureSizeInBytes)
			{
				fixed (uint* ppParameterCount = &pParameterCount)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, commandId, stage, (uint*)ppTotalStructureSizeInBytes, (uint*)ppParameterCount, pParameterDescs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] D3D12MetaCommandParameterDesc* pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				fixed (uint* ppTotalStructureSizeInBytes = &pTotalStructureSizeInBytes)
				{
					fixed (uint* ppParameterCount = &pParameterCount)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, (Guid*)pcommandId, stage, (uint*)ppTotalStructureSizeInBytes, (uint*)ppParameterCount, pParameterDescs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] ref D3D12MetaCommandParameterDesc pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12MetaCommandParameterDesc* ppParameterDescs = &pParameterDescs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, commandId, stage, pTotalStructureSizeInBytes, pParameterCount, (D3D12MetaCommandParameterDesc*)ppParameterDescs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] ref D3D12MetaCommandParameterDesc pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				fixed (D3D12MetaCommandParameterDesc* ppParameterDescs = &pParameterDescs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, (Guid*)pcommandId, stage, pTotalStructureSizeInBytes, pParameterCount, (D3D12MetaCommandParameterDesc*)ppParameterDescs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] ref D3D12MetaCommandParameterDesc pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppTotalStructureSizeInBytes = &pTotalStructureSizeInBytes)
			{
				fixed (D3D12MetaCommandParameterDesc* ppParameterDescs = &pParameterDescs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, commandId, stage, (uint*)ppTotalStructureSizeInBytes, pParameterCount, (D3D12MetaCommandParameterDesc*)ppParameterDescs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] uint* pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] ref D3D12MetaCommandParameterDesc pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				fixed (uint* ppTotalStructureSizeInBytes = &pTotalStructureSizeInBytes)
				{
					fixed (D3D12MetaCommandParameterDesc* ppParameterDescs = &pParameterDescs)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, (Guid*)pcommandId, stage, (uint*)ppTotalStructureSizeInBytes, pParameterCount, (D3D12MetaCommandParameterDesc*)ppParameterDescs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] ref D3D12MetaCommandParameterDesc pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppParameterCount = &pParameterCount)
			{
				fixed (D3D12MetaCommandParameterDesc* ppParameterDescs = &pParameterDescs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, commandId, stage, pTotalStructureSizeInBytes, (uint*)ppParameterCount, (D3D12MetaCommandParameterDesc*)ppParameterDescs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] uint* pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] ref D3D12MetaCommandParameterDesc pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				fixed (uint* ppParameterCount = &pParameterCount)
				{
					fixed (D3D12MetaCommandParameterDesc* ppParameterDescs = &pParameterDescs)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, (Guid*)pcommandId, stage, pTotalStructureSizeInBytes, (uint*)ppParameterCount, (D3D12MetaCommandParameterDesc*)ppParameterDescs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] ref D3D12MetaCommandParameterDesc pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppTotalStructureSizeInBytes = &pTotalStructureSizeInBytes)
			{
				fixed (uint* ppParameterCount = &pParameterCount)
				{
					fixed (D3D12MetaCommandParameterDesc* ppParameterDescs = &pParameterDescs)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, commandId, stage, (uint*)ppTotalStructureSizeInBytes, (uint*)ppParameterCount, (D3D12MetaCommandParameterDesc*)ppParameterDescs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "EnumerateMetaCommandParameters")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult EnumerateMetaCommandParameters([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "pTotalStructureSizeInBytes")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pTotalStructureSizeInBytes, [NativeName(NativeNameType.Param, "pParameterCount")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pParameterCount, [NativeName(NativeNameType.Param, "pParameterDescs")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_DESC*")] ref D3D12MetaCommandParameterDesc pParameterDescs)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				fixed (uint* ppTotalStructureSizeInBytes = &pTotalStructureSizeInBytes)
				{
					fixed (uint* ppParameterCount = &pParameterCount)
					{
						fixed (D3D12MetaCommandParameterDesc* ppParameterDescs = &pParameterDescs)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, D3D12MetaCommandParameterStage, uint*, uint*, D3D12MetaCommandParameterDesc*, HResult>)(LpVtbl[9]))(ptr, (Guid*)pcommandId, stage, (uint*)ppTotalStructureSizeInBytes, (uint*)ppParameterCount, (D3D12MetaCommandParameterDesc*)ppParameterDescs);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateMetaCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateMetaCommand([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pCreationParametersData")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParametersData, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppMetaCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppMetaCommand)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, uint, void*, nuint, Guid*, void**, HResult>)(LpVtbl[10]))(ptr, commandId, nodeMask, pCreationParametersData, creationParametersDataSizeInBytes, riid, ppMetaCommand);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateMetaCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateMetaCommand([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pCreationParametersData")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParametersData, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppMetaCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppMetaCommand)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, uint, void*, nuint, Guid*, void**, HResult>)(LpVtbl[10]))(ptr, (Guid*)pcommandId, nodeMask, pCreationParametersData, creationParametersDataSizeInBytes, riid, ppMetaCommand);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateMetaCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateMetaCommand([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* commandId, [NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pCreationParametersData")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParametersData, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppMetaCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppMetaCommand)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, uint, void*, nuint, Guid*, void**, HResult>)(LpVtbl[10]))(ptr, commandId, nodeMask, pCreationParametersData, creationParametersDataSizeInBytes, (Guid*)priid, ppMetaCommand);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateMetaCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateMetaCommand([NativeName(NativeNameType.Param, "CommandId")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid commandId, [NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pCreationParametersData")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParametersData, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppMetaCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppMetaCommand)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcommandId = &commandId)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, Guid*, uint, void*, nuint, Guid*, void**, HResult>)(LpVtbl[10]))(ptr, (Guid*)pcommandId, nodeMask, pCreationParametersData, creationParametersDataSizeInBytes, (Guid*)priid, ppMetaCommand);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateStateObject([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] D3D12StateObjectDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppStateObject)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12StateObjectDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, pDesc, riid, ppStateObject);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateStateObject([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] ref D3D12StateObjectDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppStateObject)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12StateObjectDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12StateObjectDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, (D3D12StateObjectDesc*)ppDesc, riid, ppStateObject);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateStateObject([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] D3D12StateObjectDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppStateObject)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12StateObjectDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, pDesc, (Guid*)priid, ppStateObject);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateStateObject([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] ref D3D12StateObjectDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppStateObject)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12StateObjectDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12StateObjectDesc*, Guid*, void**, HResult>)(LpVtbl[11]))(ptr, (D3D12StateObjectDesc*)ppDesc, (Guid*)priid, ppStateObject);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetRaytracingAccelerationStructurePrebuildInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetRaytracingAccelerationStructurePrebuildInfo([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*")] D3D12BuildRaytracingAccelerationStructureInputs* pDesc, [NativeName(NativeNameType.Param, "pInfo")] [NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*")] D3D12RaytracingAccelerationStructurePrebuildInfo* pInfo)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12BuildRaytracingAccelerationStructureInputs*, D3D12RaytracingAccelerationStructurePrebuildInfo*, void>)(LpVtbl[12]))(ptr, pDesc, pInfo);
		}

		[NativeName(NativeNameType.Func, "GetRaytracingAccelerationStructurePrebuildInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetRaytracingAccelerationStructurePrebuildInfo([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*")] ref D3D12BuildRaytracingAccelerationStructureInputs pDesc, [NativeName(NativeNameType.Param, "pInfo")] [NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*")] D3D12RaytracingAccelerationStructurePrebuildInfo* pInfo)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12BuildRaytracingAccelerationStructureInputs* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12BuildRaytracingAccelerationStructureInputs*, D3D12RaytracingAccelerationStructurePrebuildInfo*, void>)(LpVtbl[12]))(ptr, (D3D12BuildRaytracingAccelerationStructureInputs*)ppDesc, pInfo);
			}
		}

		[NativeName(NativeNameType.Func, "GetRaytracingAccelerationStructurePrebuildInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetRaytracingAccelerationStructurePrebuildInfo([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*")] D3D12BuildRaytracingAccelerationStructureInputs* pDesc, [NativeName(NativeNameType.Param, "pInfo")] [NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*")] ref D3D12RaytracingAccelerationStructurePrebuildInfo pInfo)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12RaytracingAccelerationStructurePrebuildInfo* ppInfo = &pInfo)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12BuildRaytracingAccelerationStructureInputs*, D3D12RaytracingAccelerationStructurePrebuildInfo*, void>)(LpVtbl[12]))(ptr, pDesc, (D3D12RaytracingAccelerationStructurePrebuildInfo*)ppInfo);
			}
		}

		[NativeName(NativeNameType.Func, "GetRaytracingAccelerationStructurePrebuildInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetRaytracingAccelerationStructurePrebuildInfo([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*")] ref D3D12BuildRaytracingAccelerationStructureInputs pDesc, [NativeName(NativeNameType.Param, "pInfo")] [NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*")] ref D3D12RaytracingAccelerationStructurePrebuildInfo pInfo)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12BuildRaytracingAccelerationStructureInputs* ppDesc = &pDesc)
			{
				fixed (D3D12RaytracingAccelerationStructurePrebuildInfo* ppInfo = &pInfo)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12BuildRaytracingAccelerationStructureInputs*, D3D12RaytracingAccelerationStructurePrebuildInfo*, void>)(LpVtbl[12]))(ptr, (D3D12BuildRaytracingAccelerationStructureInputs*)ppDesc, (D3D12RaytracingAccelerationStructurePrebuildInfo*)ppInfo);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CheckDriverMatchingIdentifier")]
		[return: NativeName(NativeNameType.Type, "D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS")]
		public readonly unsafe D3D12DriverMatchingIdentifierStatus CheckDriverMatchingIdentifier([NativeName(NativeNameType.Param, "SerializedDataType")] [NativeName(NativeNameType.Type, "D3D12_SERIALIZED_DATA_TYPE")] D3D12SerializedDataType serializedDataType, [NativeName(NativeNameType.Param, "pIdentifierToCheck")] [NativeName(NativeNameType.Type, "const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*")] D3D12SerializedDataDriverMatchingIdentifier* pIdentifierToCheck)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12DriverMatchingIdentifierStatus ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12SerializedDataType, D3D12SerializedDataDriverMatchingIdentifier*, D3D12DriverMatchingIdentifierStatus>)(LpVtbl[13]))(ptr, serializedDataType, pIdentifierToCheck);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CheckDriverMatchingIdentifier")]
		[return: NativeName(NativeNameType.Type, "D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS")]
		public readonly unsafe D3D12DriverMatchingIdentifierStatus CheckDriverMatchingIdentifier([NativeName(NativeNameType.Param, "SerializedDataType")] [NativeName(NativeNameType.Type, "D3D12_SERIALIZED_DATA_TYPE")] D3D12SerializedDataType serializedDataType, [NativeName(NativeNameType.Param, "pIdentifierToCheck")] [NativeName(NativeNameType.Type, "const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*")] ref D3D12SerializedDataDriverMatchingIdentifier pIdentifierToCheck)
		{
			ID3D12Device5* ptr = (ID3D12Device5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SerializedDataDriverMatchingIdentifier* ppIdentifierToCheck = &pIdentifierToCheck)
			{
				D3D12DriverMatchingIdentifierStatus ret = ((delegate* unmanaged[Stdcall]<ID3D12Device5*, D3D12SerializedDataType, D3D12SerializedDataDriverMatchingIdentifier*, D3D12DriverMatchingIdentifierStatus>)(LpVtbl[13]))(ptr, serializedDataType, (D3D12SerializedDataDriverMatchingIdentifier*)ppIdentifierToCheck);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device4 (ID3D12Device5 value)
		{
			return Unsafe.As<ID3D12Device5, ID3D12Device4>(ref value);
		}

		public unsafe static implicit operator ID3D12Device3 (ID3D12Device5 value)
		{
			return Unsafe.As<ID3D12Device5, ID3D12Device3>(ref value);
		}

		public unsafe static implicit operator ID3D12Device2 (ID3D12Device5 value)
		{
			return Unsafe.As<ID3D12Device5, ID3D12Device2>(ref value);
		}

		public unsafe static implicit operator ID3D12Device1 (ID3D12Device5 value)
		{
			return Unsafe.As<ID3D12Device5, ID3D12Device1>(ref value);
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device5 value)
		{
			return Unsafe.As<ID3D12Device5, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device5 value)
		{
			return Unsafe.As<ID3D12Device5, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device5 value)
		{
			return Unsafe.As<ID3D12Device5, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_META_COMMAND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12MetaCommandDesc
	{
		[NativeName(NativeNameType.Field, "Id")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid Id;
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* Name;
		[NativeName(NativeNameType.Field, "InitializationDirtyState")]
		[NativeName(NativeNameType.Type, "D3D12_GRAPHICS_STATES")]
		public D3D12GraphicsStates InitializationDirtyState;
		[NativeName(NativeNameType.Field, "ExecutionDirtyState")]
		[NativeName(NativeNameType.Type, "D3D12_GRAPHICS_STATES")]
		public D3D12GraphicsStates ExecutionDirtyState;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_META_COMMAND_PARAMETER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12MetaCommandParameterDesc
	{
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* Name;
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_TYPE")]
		public D3D12MetaCommandParameterType Type;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_FLAGS")]
		public D3D12MetaCommandParameterFlags Flags;
		[NativeName(NativeNameType.Field, "RequiredResourceState")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")]
		public D3D12ResourceStates RequiredResourceState;
		[NativeName(NativeNameType.Field, "StructureOffset")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StructureOffset;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_STATE_OBJECT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12StateObjectDesc
	{
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_STATE_OBJECT_TYPE")]
		public D3D12StateObjectType Type;
		[NativeName(NativeNameType.Field, "NumSubobjects")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumSubobjects;
		[NativeName(NativeNameType.Field, "pSubobjects")]
		[NativeName(NativeNameType.Type, "const D3D12_STATE_SUBOBJECT*")]
		public unsafe D3D12StateSubobject* PSubobjects;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_STATE_SUBOBJECT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12StateSubobject
	{
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_STATE_SUBOBJECT_TYPE")]
		public D3D12StateSubobjectType Type;
		[NativeName(NativeNameType.Field, "pDesc")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PDesc;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BuildRaytracingAccelerationStructureInputs
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12BuildRaytracingAccelerationStructureInputsUnion
		{
			[NativeName(NativeNameType.Field, "InstanceDescs")]
			[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
			[FieldOffset(0)]
			public ulong InstanceDescs;
			[NativeName(NativeNameType.Field, "pGeometryDescs")]
			[NativeName(NativeNameType.Type, "const D3D12_RAYTRACING_GEOMETRY_DESC*")]
			[FieldOffset(0)]
			public unsafe D3D12RaytracingGeometryDesc* PGeometryDescs;
			[NativeName(NativeNameType.Field, "ppGeometryDescs")]
			[NativeName(NativeNameType.Type, "const const D3D12_RAYTRACING_GEOMETRY_DESC**")]
			[FieldOffset(0)]
			public unsafe D3D12RaytracingGeometryDesc** PpGeometryDescs;


		}

		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE")]
		public D3D12RaytracingAccelerationStructureType Type;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS")]
		public D3D12RaytracingAccelerationStructureBuildFlags Flags;
		[NativeName(NativeNameType.Field, "NumDescs")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumDescs;
		[NativeName(NativeNameType.Field, "DescsLayout")]
		[NativeName(NativeNameType.Type, "D3D12_ELEMENTS_LAYOUT")]
		public D3D12ElementsLayout DescsLayout;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12BuildRaytracingAccelerationStructureInputsUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_GEOMETRY_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingGeometryDesc
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12RaytracingGeometryDescUnion
		{
			[NativeName(NativeNameType.Field, "Triangles")]
			[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC")]
			[FieldOffset(0)]
			public D3D12RaytracingGeometryTrianglesDesc Triangles;
			[NativeName(NativeNameType.Field, "AABBs")]
			[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_GEOMETRY_AABBS_DESC")]
			[FieldOffset(0)]
			public D3D12RaytracingGeometryAabbsDesc AABBs;


		}

		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_GEOMETRY_TYPE")]
		public D3D12RaytracingGeometryType Type;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_GEOMETRY_FLAGS")]
		public D3D12RaytracingGeometryFlags Flags;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12RaytracingGeometryDescUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingGeometryTrianglesDesc
	{
		[NativeName(NativeNameType.Field, "Transform3x4")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong Transform3x4;
		[NativeName(NativeNameType.Field, "IndexFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat IndexFormat;
		[NativeName(NativeNameType.Field, "VertexFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat VertexFormat;
		[NativeName(NativeNameType.Field, "IndexCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IndexCount;
		[NativeName(NativeNameType.Field, "VertexCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint VertexCount;
		[NativeName(NativeNameType.Field, "IndexBuffer")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong IndexBuffer;
		[NativeName(NativeNameType.Field, "VertexBuffer")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE")]
		public D3D12GpuVirtualAddressAndStride VertexBuffer;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12GpuVirtualAddressAndStride
	{
		[NativeName(NativeNameType.Field, "StartAddress")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong StartAddress;
		[NativeName(NativeNameType.Field, "StrideInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong StrideInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_GEOMETRY_AABBS_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingGeometryAabbsDesc
	{
		[NativeName(NativeNameType.Field, "AABBCount")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong AABBCount;
		[NativeName(NativeNameType.Field, "AABBs")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE")]
		public D3D12GpuVirtualAddressAndStride AABBs;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingAccelerationStructurePrebuildInfo
	{
		[NativeName(NativeNameType.Field, "ResultDataMaxSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong ResultDataMaxSizeInBytes;
		[NativeName(NativeNameType.Field, "ScratchDataSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong ScratchDataSizeInBytes;
		[NativeName(NativeNameType.Field, "UpdateScratchDataSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong UpdateScratchDataSizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SerializedDataDriverMatchingIdentifier
	{
		[NativeName(NativeNameType.Field, "DriverOpaqueGUID")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid DriverOpaqueGUID;
		[NativeName(NativeNameType.Field, "DriverOpaqueVersioningData")]
		[NativeName(NativeNameType.Type, "BYTE[16]")]
		public byte DriverOpaqueVersioningData_0;
		public byte DriverOpaqueVersioningData_1;
		public byte DriverOpaqueVersioningData_2;
		public byte DriverOpaqueVersioningData_3;
		public byte DriverOpaqueVersioningData_4;
		public byte DriverOpaqueVersioningData_5;
		public byte DriverOpaqueVersioningData_6;
		public byte DriverOpaqueVersioningData_7;
		public byte DriverOpaqueVersioningData_8;
		public byte DriverOpaqueVersioningData_9;
		public byte DriverOpaqueVersioningData_10;
		public byte DriverOpaqueVersioningData_11;
		public byte DriverOpaqueVersioningData_12;
		public byte DriverOpaqueVersioningData_13;
		public byte DriverOpaqueVersioningData_14;
		public byte DriverOpaqueVersioningData_15;


	}

	[Guid("82bc481c-6b9b-4030-aedb-7ee3d1df1e63")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DeviceRemovedExtendedDataSettings")]
	public partial struct ID3D12DeviceRemovedExtendedDataSettings : IComObject, IComObject<ID3D12DeviceRemovedExtendedDataSettings>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("82bc481c-6b9b-4030-aedb-7ee3d1df1e63");

		public unsafe ID3D12DeviceRemovedExtendedDataSettings (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetAutoBreadcrumbsEnablement")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetAutoBreadcrumbsEnablement([NativeName(NativeNameType.Param, "Enablement")] [NativeName(NativeNameType.Type, "D3D12_DRED_ENABLEMENT")] D3D12DredEnablement enablement)
		{
			ID3D12DeviceRemovedExtendedDataSettings* ptr = (ID3D12DeviceRemovedExtendedDataSettings*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings*, D3D12DredEnablement, void>)(*LpVtbl))(ptr, enablement);
		}

		[NativeName(NativeNameType.Func, "SetPageFaultEnablement")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetPageFaultEnablement([NativeName(NativeNameType.Param, "Enablement")] [NativeName(NativeNameType.Type, "D3D12_DRED_ENABLEMENT")] D3D12DredEnablement enablement)
		{
			ID3D12DeviceRemovedExtendedDataSettings* ptr = (ID3D12DeviceRemovedExtendedDataSettings*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings*, D3D12DredEnablement, void>)(LpVtbl[1]))(ptr, enablement);
		}

		[NativeName(NativeNameType.Func, "SetWatsonDumpEnablement")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetWatsonDumpEnablement([NativeName(NativeNameType.Param, "Enablement")] [NativeName(NativeNameType.Type, "D3D12_DRED_ENABLEMENT")] D3D12DredEnablement enablement)
		{
			ID3D12DeviceRemovedExtendedDataSettings* ptr = (ID3D12DeviceRemovedExtendedDataSettings*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings*, D3D12DredEnablement, void>)(LpVtbl[2]))(ptr, enablement);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12DeviceRemovedExtendedDataSettings value)
		{
			return Unsafe.As<ID3D12DeviceRemovedExtendedDataSettings, IUnknown>(ref value);
		}

	}

	[Guid("dbd5ae51-3317-4f0a-adf9-1d7cedcaae0b")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DeviceRemovedExtendedDataSettings1")]
	public partial struct ID3D12DeviceRemovedExtendedDataSettings1 : IComObject, IComObject<ID3D12DeviceRemovedExtendedDataSettings1>, IComObject<ID3D12DeviceRemovedExtendedDataSettings>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("dbd5ae51-3317-4f0a-adf9-1d7cedcaae0b");

		public unsafe ID3D12DeviceRemovedExtendedDataSettings1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetBreadcrumbContextEnablement")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetBreadcrumbContextEnablement([NativeName(NativeNameType.Param, "Enablement")] [NativeName(NativeNameType.Type, "D3D12_DRED_ENABLEMENT")] D3D12DredEnablement enablement)
		{
			ID3D12DeviceRemovedExtendedDataSettings1* ptr = (ID3D12DeviceRemovedExtendedDataSettings1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedDataSettings1*, D3D12DredEnablement, void>)(LpVtbl[3]))(ptr, enablement);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceRemovedExtendedDataSettings (ID3D12DeviceRemovedExtendedDataSettings1 value)
		{
			return Unsafe.As<ID3D12DeviceRemovedExtendedDataSettings1, ID3D12DeviceRemovedExtendedDataSettings>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12DeviceRemovedExtendedDataSettings1 value)
		{
			return Unsafe.As<ID3D12DeviceRemovedExtendedDataSettings1, IUnknown>(ref value);
		}

	}

	[Guid("98931d33-5ae8-4791-aa3c-1a73a2934e71")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DeviceRemovedExtendedData")]
	public partial struct ID3D12DeviceRemovedExtendedData : IComObject, IComObject<ID3D12DeviceRemovedExtendedData>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("98931d33-5ae8-4791-aa3c-1a73a2934e71");

		public unsafe ID3D12DeviceRemovedExtendedData (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetAutoBreadcrumbsOutput")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetAutoBreadcrumbsOutput([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*")] D3D12DredAutoBreadcrumbsOutput* pOutput)
		{
			ID3D12DeviceRemovedExtendedData* ptr = (ID3D12DeviceRemovedExtendedData*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData*, D3D12DredAutoBreadcrumbsOutput*, HResult>)(*LpVtbl))(ptr, pOutput);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetAutoBreadcrumbsOutput")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetAutoBreadcrumbsOutput([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*")] ref D3D12DredAutoBreadcrumbsOutput pOutput)
		{
			ID3D12DeviceRemovedExtendedData* ptr = (ID3D12DeviceRemovedExtendedData*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DredAutoBreadcrumbsOutput* ppOutput = &pOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData*, D3D12DredAutoBreadcrumbsOutput*, HResult>)(*LpVtbl))(ptr, (D3D12DredAutoBreadcrumbsOutput*)ppOutput);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetPageFaultAllocationOutput")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPageFaultAllocationOutput([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_OUTPUT*")] D3D12DredPageFaultOutput* pOutput)
		{
			ID3D12DeviceRemovedExtendedData* ptr = (ID3D12DeviceRemovedExtendedData*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData*, D3D12DredPageFaultOutput*, HResult>)(LpVtbl[1]))(ptr, pOutput);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetPageFaultAllocationOutput")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPageFaultAllocationOutput([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_OUTPUT*")] ref D3D12DredPageFaultOutput pOutput)
		{
			ID3D12DeviceRemovedExtendedData* ptr = (ID3D12DeviceRemovedExtendedData*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DredPageFaultOutput* ppOutput = &pOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData*, D3D12DredPageFaultOutput*, HResult>)(LpVtbl[1]))(ptr, (D3D12DredPageFaultOutput*)ppOutput);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12DeviceRemovedExtendedData value)
		{
			return Unsafe.As<ID3D12DeviceRemovedExtendedData, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DredAutoBreadcrumbsOutput
	{
		[NativeName(NativeNameType.Field, "pHeadAutoBreadcrumbNode")]
		[NativeName(NativeNameType.Type, "const D3D12_AUTO_BREADCRUMB_NODE*")]
		public unsafe D3D12AutoBreadcrumbNode* PHeadAutoBreadcrumbNode;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_AUTO_BREADCRUMB_NODE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12AutoBreadcrumbNode
	{
		[NativeName(NativeNameType.Field, "pCommandListDebugNameA")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PCommandListDebugNameA;
		[NativeName(NativeNameType.Field, "pCommandListDebugNameW")]
		[NativeName(NativeNameType.Type, "const wchar*")]
		public unsafe char* PCommandListDebugNameW;
		[NativeName(NativeNameType.Field, "pCommandQueueDebugNameA")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PCommandQueueDebugNameA;
		[NativeName(NativeNameType.Field, "pCommandQueueDebugNameW")]
		[NativeName(NativeNameType.Type, "const wchar*")]
		public unsafe char* PCommandQueueDebugNameW;
		[NativeName(NativeNameType.Field, "pCommandList")]
		[NativeName(NativeNameType.Type, "ID3D12GraphicsCommandList*")]
		public unsafe ID3D12GraphicsCommandList* PCommandList;
		[NativeName(NativeNameType.Field, "pCommandQueue")]
		[NativeName(NativeNameType.Type, "ID3D12CommandQueue*")]
		public unsafe ID3D12CommandQueue* PCommandQueue;
		[NativeName(NativeNameType.Field, "BreadcrumbCount")]
		[NativeName(NativeNameType.Type, "UINT32")]
		public uint BreadcrumbCount;
		[NativeName(NativeNameType.Field, "pLastBreadcrumbValue")]
		[NativeName(NativeNameType.Type, "const UINT32*")]
		public unsafe uint* PLastBreadcrumbValue;
		[NativeName(NativeNameType.Field, "pCommandHistory")]
		[NativeName(NativeNameType.Type, "const D3D12_AUTO_BREADCRUMB_OP*")]
		public unsafe D3D12AutoBreadcrumbOp* PCommandHistory;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const D3D12_AUTO_BREADCRUMB_NODE*")]
		public unsafe D3D12AutoBreadcrumbNode* PNext;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRED_PAGE_FAULT_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DredPageFaultOutput
	{
		[NativeName(NativeNameType.Field, "PageFaultVA")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong PageFaultVA;
		[NativeName(NativeNameType.Field, "pHeadExistingAllocationNode")]
		[NativeName(NativeNameType.Type, "const D3D12_DRED_ALLOCATION_NODE*")]
		public unsafe D3D12DredAllocationNode* PHeadExistingAllocationNode;
		[NativeName(NativeNameType.Field, "pHeadRecentFreedAllocationNode")]
		[NativeName(NativeNameType.Type, "const D3D12_DRED_ALLOCATION_NODE*")]
		public unsafe D3D12DredAllocationNode* PHeadRecentFreedAllocationNode;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRED_ALLOCATION_NODE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DredAllocationNode
	{
		[NativeName(NativeNameType.Field, "ObjectNameA")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* ObjectNameA;
		[NativeName(NativeNameType.Field, "ObjectNameW")]
		[NativeName(NativeNameType.Type, "const wchar*")]
		public unsafe char* ObjectNameW;
		[NativeName(NativeNameType.Field, "AllocationType")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_ALLOCATION_TYPE")]
		public D3D12DredAllocationType AllocationType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const D3D12_DRED_ALLOCATION_NODE*")]
		public unsafe D3D12DredAllocationNode* PNext;


	}

	[Guid("9727a022-cf1d-4dda-9eba-effa653fc506")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DeviceRemovedExtendedData1")]
	public partial struct ID3D12DeviceRemovedExtendedData1 : IComObject, IComObject<ID3D12DeviceRemovedExtendedData1>, IComObject<ID3D12DeviceRemovedExtendedData>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9727a022-cf1d-4dda-9eba-effa653fc506");

		public unsafe ID3D12DeviceRemovedExtendedData1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetAutoBreadcrumbsOutput1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetAutoBreadcrumbsOutput1([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*")] D3D12DredAutoBreadcrumbsOutput1* pOutput)
		{
			ID3D12DeviceRemovedExtendedData1* ptr = (ID3D12DeviceRemovedExtendedData1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData1*, D3D12DredAutoBreadcrumbsOutput1*, HResult>)(LpVtbl[2]))(ptr, pOutput);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetAutoBreadcrumbsOutput1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetAutoBreadcrumbsOutput1([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*")] ref D3D12DredAutoBreadcrumbsOutput1 pOutput)
		{
			ID3D12DeviceRemovedExtendedData1* ptr = (ID3D12DeviceRemovedExtendedData1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DredAutoBreadcrumbsOutput1* ppOutput = &pOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData1*, D3D12DredAutoBreadcrumbsOutput1*, HResult>)(LpVtbl[2]))(ptr, (D3D12DredAutoBreadcrumbsOutput1*)ppOutput);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetPageFaultAllocationOutput1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPageFaultAllocationOutput1([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_OUTPUT1*")] D3D12DredPageFaultOutput1* pOutput)
		{
			ID3D12DeviceRemovedExtendedData1* ptr = (ID3D12DeviceRemovedExtendedData1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData1*, D3D12DredPageFaultOutput1*, HResult>)(LpVtbl[3]))(ptr, pOutput);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetPageFaultAllocationOutput1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPageFaultAllocationOutput1([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_OUTPUT1*")] ref D3D12DredPageFaultOutput1 pOutput)
		{
			ID3D12DeviceRemovedExtendedData1* ptr = (ID3D12DeviceRemovedExtendedData1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DredPageFaultOutput1* ppOutput = &pOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData1*, D3D12DredPageFaultOutput1*, HResult>)(LpVtbl[3]))(ptr, (D3D12DredPageFaultOutput1*)ppOutput);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceRemovedExtendedData (ID3D12DeviceRemovedExtendedData1 value)
		{
			return Unsafe.As<ID3D12DeviceRemovedExtendedData1, ID3D12DeviceRemovedExtendedData>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12DeviceRemovedExtendedData1 value)
		{
			return Unsafe.As<ID3D12DeviceRemovedExtendedData1, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DredAutoBreadcrumbsOutput1
	{
		[NativeName(NativeNameType.Field, "pHeadAutoBreadcrumbNode")]
		[NativeName(NativeNameType.Type, "const D3D12_AUTO_BREADCRUMB_NODE1*")]
		public unsafe D3D12AutoBreadcrumbNode1* PHeadAutoBreadcrumbNode;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_AUTO_BREADCRUMB_NODE1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12AutoBreadcrumbNode1
	{
		[NativeName(NativeNameType.Field, "pCommandListDebugNameA")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PCommandListDebugNameA;
		[NativeName(NativeNameType.Field, "pCommandListDebugNameW")]
		[NativeName(NativeNameType.Type, "const wchar*")]
		public unsafe char* PCommandListDebugNameW;
		[NativeName(NativeNameType.Field, "pCommandQueueDebugNameA")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PCommandQueueDebugNameA;
		[NativeName(NativeNameType.Field, "pCommandQueueDebugNameW")]
		[NativeName(NativeNameType.Type, "const wchar*")]
		public unsafe char* PCommandQueueDebugNameW;
		[NativeName(NativeNameType.Field, "pCommandList")]
		[NativeName(NativeNameType.Type, "ID3D12GraphicsCommandList*")]
		public unsafe ID3D12GraphicsCommandList* PCommandList;
		[NativeName(NativeNameType.Field, "pCommandQueue")]
		[NativeName(NativeNameType.Type, "ID3D12CommandQueue*")]
		public unsafe ID3D12CommandQueue* PCommandQueue;
		[NativeName(NativeNameType.Field, "BreadcrumbCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BreadcrumbCount;
		[NativeName(NativeNameType.Field, "pLastBreadcrumbValue")]
		[NativeName(NativeNameType.Type, "const UINT*")]
		public unsafe uint* PLastBreadcrumbValue;
		[NativeName(NativeNameType.Field, "pCommandHistory")]
		[NativeName(NativeNameType.Type, "const D3D12_AUTO_BREADCRUMB_OP*")]
		public unsafe D3D12AutoBreadcrumbOp* PCommandHistory;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const D3D12_AUTO_BREADCRUMB_NODE1*")]
		public unsafe D3D12AutoBreadcrumbNode1* PNext;
		[NativeName(NativeNameType.Field, "BreadcrumbContextsCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BreadcrumbContextsCount;
		[NativeName(NativeNameType.Field, "pBreadcrumbContexts")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_BREADCRUMB_CONTEXT*")]
		public unsafe D3D12DredBreadcrumbContext* PBreadcrumbContexts;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRED_BREADCRUMB_CONTEXT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DredBreadcrumbContext
	{
		[NativeName(NativeNameType.Field, "BreadcrumbIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BreadcrumbIndex;
		[NativeName(NativeNameType.Field, "pContextString")]
		[NativeName(NativeNameType.Type, "const wchar*")]
		public unsafe char* PContextString;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRED_PAGE_FAULT_OUTPUT1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DredPageFaultOutput1
	{
		[NativeName(NativeNameType.Field, "PageFaultVA")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong PageFaultVA;
		[NativeName(NativeNameType.Field, "pHeadExistingAllocationNode")]
		[NativeName(NativeNameType.Type, "const D3D12_DRED_ALLOCATION_NODE1*")]
		public unsafe D3D12DredAllocationNode1* PHeadExistingAllocationNode;
		[NativeName(NativeNameType.Field, "pHeadRecentFreedAllocationNode")]
		[NativeName(NativeNameType.Type, "const D3D12_DRED_ALLOCATION_NODE1*")]
		public unsafe D3D12DredAllocationNode1* PHeadRecentFreedAllocationNode;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRED_ALLOCATION_NODE1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DredAllocationNode1
	{
		[NativeName(NativeNameType.Field, "ObjectNameA")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* ObjectNameA;
		[NativeName(NativeNameType.Field, "ObjectNameW")]
		[NativeName(NativeNameType.Type, "const wchar*")]
		public unsafe char* ObjectNameW;
		[NativeName(NativeNameType.Field, "AllocationType")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_ALLOCATION_TYPE")]
		public D3D12DredAllocationType AllocationType;
		[NativeName(NativeNameType.Field, "pNext")]
		[NativeName(NativeNameType.Type, "const D3D12_DRED_ALLOCATION_NODE1*")]
		public unsafe D3D12DredAllocationNode1* PNext;
		[NativeName(NativeNameType.Field, "pObject")]
		[NativeName(NativeNameType.Type, "const IUnknown*")]
		public unsafe IUnknown* PObject;


	}

	[Guid("67fc5816-e4ca-4915-bf18-42541272da54")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DeviceRemovedExtendedData2")]
	public partial struct ID3D12DeviceRemovedExtendedData2 : IComObject, IComObject<ID3D12DeviceRemovedExtendedData2>, IComObject<ID3D12DeviceRemovedExtendedData1>, IComObject<ID3D12DeviceRemovedExtendedData>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("67fc5816-e4ca-4915-bf18-42541272da54");

		public unsafe ID3D12DeviceRemovedExtendedData2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetPageFaultAllocationOutput2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPageFaultAllocationOutput2([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_OUTPUT2*")] D3D12DredPageFaultOutput2* pOutput)
		{
			ID3D12DeviceRemovedExtendedData2* ptr = (ID3D12DeviceRemovedExtendedData2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData2*, D3D12DredPageFaultOutput2*, HResult>)(LpVtbl[2]))(ptr, pOutput);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetPageFaultAllocationOutput2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPageFaultAllocationOutput2([NativeName(NativeNameType.Param, "pOutput")] [NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_OUTPUT2*")] ref D3D12DredPageFaultOutput2 pOutput)
		{
			ID3D12DeviceRemovedExtendedData2* ptr = (ID3D12DeviceRemovedExtendedData2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DredPageFaultOutput2* ppOutput = &pOutput)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData2*, D3D12DredPageFaultOutput2*, HResult>)(LpVtbl[2]))(ptr, (D3D12DredPageFaultOutput2*)ppOutput);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetDeviceState")]
		[return: NativeName(NativeNameType.Type, "D3D12_DRED_DEVICE_STATE")]
		public readonly unsafe D3D12DredDeviceState GetDeviceState()
		{
			ID3D12DeviceRemovedExtendedData2* ptr = (ID3D12DeviceRemovedExtendedData2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12DredDeviceState ret = ((delegate* unmanaged[Stdcall]<ID3D12DeviceRemovedExtendedData2*, D3D12DredDeviceState>)(LpVtbl[3]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceRemovedExtendedData1 (ID3D12DeviceRemovedExtendedData2 value)
		{
			return Unsafe.As<ID3D12DeviceRemovedExtendedData2, ID3D12DeviceRemovedExtendedData1>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceRemovedExtendedData (ID3D12DeviceRemovedExtendedData2 value)
		{
			return Unsafe.As<ID3D12DeviceRemovedExtendedData2, ID3D12DeviceRemovedExtendedData>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12DeviceRemovedExtendedData2 value)
		{
			return Unsafe.As<ID3D12DeviceRemovedExtendedData2, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRED_PAGE_FAULT_OUTPUT2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DredPageFaultOutput2
	{
		[NativeName(NativeNameType.Field, "PageFaultVA")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong PageFaultVA;
		[NativeName(NativeNameType.Field, "pHeadExistingAllocationNode")]
		[NativeName(NativeNameType.Type, "const D3D12_DRED_ALLOCATION_NODE1*")]
		public unsafe D3D12DredAllocationNode1* PHeadExistingAllocationNode;
		[NativeName(NativeNameType.Field, "pHeadRecentFreedAllocationNode")]
		[NativeName(NativeNameType.Type, "const D3D12_DRED_ALLOCATION_NODE1*")]
		public unsafe D3D12DredAllocationNode1* PHeadRecentFreedAllocationNode;
		[NativeName(NativeNameType.Field, "PageFaultFlags")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_FLAGS")]
		public D3D12DredPageFaultFlags PageFaultFlags;


	}

	[Guid("c70b221b-40e4-4a17-89af-025a0727a6dc")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device6")]
	public partial struct ID3D12Device6 : IComObject, IComObject<ID3D12Device6>, IComObject<ID3D12Device5>, IComObject<ID3D12Device4>, IComObject<ID3D12Device3>, IComObject<ID3D12Device2>, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c70b221b-40e4-4a17-89af-025a0727a6dc");

		public unsafe ID3D12Device6 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetBackgroundProcessingMode")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetBackgroundProcessingMode([NativeName(NativeNameType.Param, "Mode")] [NativeName(NativeNameType.Type, "D3D12_BACKGROUND_PROCESSING_MODE")] D3D12BackgroundProcessingMode mode, [NativeName(NativeNameType.Param, "MeasurementsAction")] [NativeName(NativeNameType.Type, "D3D12_MEASUREMENTS_ACTION")] D3D12MeasurementsAction measurementsAction, [NativeName(NativeNameType.Param, "hEventToSignalUponCompletion")] [NativeName(NativeNameType.Type, "HANDLE")] nint hEventToSignalUponCompletion, [NativeName(NativeNameType.Param, "pbFurtherMeasurementsDesired")] [NativeName(NativeNameType.Type, "BOOL*")] int* pbFurtherMeasurementsDesired)
		{
			ID3D12Device6* ptr = (ID3D12Device6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device6*, D3D12BackgroundProcessingMode, D3D12MeasurementsAction, nint, int*, HResult>)(LpVtbl[8]))(ptr, mode, measurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetBackgroundProcessingMode")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetBackgroundProcessingMode([NativeName(NativeNameType.Param, "Mode")] [NativeName(NativeNameType.Type, "D3D12_BACKGROUND_PROCESSING_MODE")] D3D12BackgroundProcessingMode mode, [NativeName(NativeNameType.Param, "MeasurementsAction")] [NativeName(NativeNameType.Type, "D3D12_MEASUREMENTS_ACTION")] D3D12MeasurementsAction measurementsAction, [NativeName(NativeNameType.Param, "hEventToSignalUponCompletion")] [NativeName(NativeNameType.Type, "HANDLE")] nint hEventToSignalUponCompletion, [NativeName(NativeNameType.Param, "pbFurtherMeasurementsDesired")] [NativeName(NativeNameType.Type, "BOOL*")] ref int pbFurtherMeasurementsDesired)
		{
			ID3D12Device6* ptr = (ID3D12Device6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppbFurtherMeasurementsDesired = &pbFurtherMeasurementsDesired)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device6*, D3D12BackgroundProcessingMode, D3D12MeasurementsAction, nint, int*, HResult>)(LpVtbl[8]))(ptr, mode, measurementsAction, hEventToSignalUponCompletion, (int*)ppbFurtherMeasurementsDesired);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device5 (ID3D12Device6 value)
		{
			return Unsafe.As<ID3D12Device6, ID3D12Device5>(ref value);
		}

		public unsafe static implicit operator ID3D12Device4 (ID3D12Device6 value)
		{
			return Unsafe.As<ID3D12Device6, ID3D12Device4>(ref value);
		}

		public unsafe static implicit operator ID3D12Device3 (ID3D12Device6 value)
		{
			return Unsafe.As<ID3D12Device6, ID3D12Device3>(ref value);
		}

		public unsafe static implicit operator ID3D12Device2 (ID3D12Device6 value)
		{
			return Unsafe.As<ID3D12Device6, ID3D12Device2>(ref value);
		}

		public unsafe static implicit operator ID3D12Device1 (ID3D12Device6 value)
		{
			return Unsafe.As<ID3D12Device6, ID3D12Device1>(ref value);
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device6 value)
		{
			return Unsafe.As<ID3D12Device6, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device6 value)
		{
			return Unsafe.As<ID3D12Device6, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device6 value)
		{
			return Unsafe.As<ID3D12Device6, IUnknown>(ref value);
		}

	}

	[Guid("d6f12dd6-76fb-406e-8961-4296eefc0409")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12ProtectedResourceSession1")]
	public partial struct ID3D12ProtectedResourceSession1 : IComObject, IComObject<ID3D12ProtectedResourceSession1>, IComObject<ID3D12ProtectedResourceSession>, IComObject<ID3D12ProtectedSession>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("d6f12dd6-76fb-406e-8961-4296eefc0409");

		public unsafe ID3D12ProtectedResourceSession1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc1")]
		[return: NativeName(NativeNameType.Type, "D3D12_PROTECTED_RESOURCE_SESSION_DESC1")]
		public readonly unsafe D3D12ProtectedResourceSessionDesc1 GetDesc1()
		{
			ID3D12ProtectedResourceSession1* ptr = (ID3D12ProtectedResourceSession1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ProtectedResourceSessionDesc1 ret = ((delegate* unmanaged[Stdcall]<ID3D12ProtectedResourceSession1*, D3D12ProtectedResourceSessionDesc1>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12ProtectedResourceSession (ID3D12ProtectedResourceSession1 value)
		{
			return Unsafe.As<ID3D12ProtectedResourceSession1, ID3D12ProtectedResourceSession>(ref value);
		}

		public unsafe static implicit operator ID3D12ProtectedSession (ID3D12ProtectedResourceSession1 value)
		{
			return Unsafe.As<ID3D12ProtectedResourceSession1, ID3D12ProtectedSession>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12ProtectedResourceSession1 value)
		{
			return Unsafe.As<ID3D12ProtectedResourceSession1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12ProtectedResourceSession1 value)
		{
			return Unsafe.As<ID3D12ProtectedResourceSession1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12ProtectedResourceSession1 value)
		{
			return Unsafe.As<ID3D12ProtectedResourceSession1, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_PROTECTED_RESOURCE_SESSION_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ProtectedResourceSessionDesc1
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_PROTECTED_RESOURCE_SESSION_FLAGS")]
		public D3D12ProtectedResourceSessionFlags Flags;
		[NativeName(NativeNameType.Field, "ProtectionType")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid ProtectionType;


	}

	[Guid("5c014b53-68a1-4b9b-8bd1-dd6046b9358b")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device7")]
	public partial struct ID3D12Device7 : IComObject, IComObject<ID3D12Device7>, IComObject<ID3D12Device6>, IComObject<ID3D12Device5>, IComObject<ID3D12Device4>, IComObject<ID3D12Device3>, IComObject<ID3D12Device2>, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("5c014b53-68a1-4b9b-8bd1-dd6046b9358b");

		public unsafe ID3D12Device7 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "AddToStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddToStateObject([NativeName(NativeNameType.Param, "pAddition")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] D3D12StateObjectDesc* pAddition, [NativeName(NativeNameType.Param, "pStateObjectToGrowFrom")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ID3D12StateObject* pStateObjectToGrowFrom, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppNewStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppNewStateObject)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12StateObjectDesc*, ID3D12StateObject*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject);
			return ret;
		}

		[NativeName(NativeNameType.Func, "AddToStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddToStateObject([NativeName(NativeNameType.Param, "pAddition")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] ref D3D12StateObjectDesc pAddition, [NativeName(NativeNameType.Param, "pStateObjectToGrowFrom")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ID3D12StateObject* pStateObjectToGrowFrom, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppNewStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppNewStateObject)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12StateObjectDesc* ppAddition = &pAddition)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12StateObjectDesc*, ID3D12StateObject*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (D3D12StateObjectDesc*)ppAddition, pStateObjectToGrowFrom, riid, ppNewStateObject);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "AddToStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddToStateObject([NativeName(NativeNameType.Param, "pAddition")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] D3D12StateObjectDesc* pAddition, [NativeName(NativeNameType.Param, "pStateObjectToGrowFrom")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ref ID3D12StateObject pStateObjectToGrowFrom, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppNewStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppNewStateObject)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12StateObject* ppStateObjectToGrowFrom = &pStateObjectToGrowFrom)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12StateObjectDesc*, ID3D12StateObject*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pAddition, (ID3D12StateObject*)ppStateObjectToGrowFrom, riid, ppNewStateObject);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "AddToStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddToStateObject([NativeName(NativeNameType.Param, "pAddition")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] ref D3D12StateObjectDesc pAddition, [NativeName(NativeNameType.Param, "pStateObjectToGrowFrom")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ref ID3D12StateObject pStateObjectToGrowFrom, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppNewStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppNewStateObject)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12StateObjectDesc* ppAddition = &pAddition)
			{
				fixed (ID3D12StateObject* ppStateObjectToGrowFrom = &pStateObjectToGrowFrom)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12StateObjectDesc*, ID3D12StateObject*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (D3D12StateObjectDesc*)ppAddition, (ID3D12StateObject*)ppStateObjectToGrowFrom, riid, ppNewStateObject);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "AddToStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddToStateObject([NativeName(NativeNameType.Param, "pAddition")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] D3D12StateObjectDesc* pAddition, [NativeName(NativeNameType.Param, "pStateObjectToGrowFrom")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ID3D12StateObject* pStateObjectToGrowFrom, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppNewStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppNewStateObject)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12StateObjectDesc*, ID3D12StateObject*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pAddition, pStateObjectToGrowFrom, (Guid*)priid, ppNewStateObject);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "AddToStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddToStateObject([NativeName(NativeNameType.Param, "pAddition")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] ref D3D12StateObjectDesc pAddition, [NativeName(NativeNameType.Param, "pStateObjectToGrowFrom")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ID3D12StateObject* pStateObjectToGrowFrom, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppNewStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppNewStateObject)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12StateObjectDesc* ppAddition = &pAddition)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12StateObjectDesc*, ID3D12StateObject*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (D3D12StateObjectDesc*)ppAddition, pStateObjectToGrowFrom, (Guid*)priid, ppNewStateObject);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "AddToStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddToStateObject([NativeName(NativeNameType.Param, "pAddition")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] D3D12StateObjectDesc* pAddition, [NativeName(NativeNameType.Param, "pStateObjectToGrowFrom")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ref ID3D12StateObject pStateObjectToGrowFrom, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppNewStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppNewStateObject)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12StateObject* ppStateObjectToGrowFrom = &pStateObjectToGrowFrom)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12StateObjectDesc*, ID3D12StateObject*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pAddition, (ID3D12StateObject*)ppStateObjectToGrowFrom, (Guid*)priid, ppNewStateObject);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "AddToStateObject")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddToStateObject([NativeName(NativeNameType.Param, "pAddition")] [NativeName(NativeNameType.Type, "const D3D12_STATE_OBJECT_DESC*")] ref D3D12StateObjectDesc pAddition, [NativeName(NativeNameType.Param, "pStateObjectToGrowFrom")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ref ID3D12StateObject pStateObjectToGrowFrom, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppNewStateObject")] [NativeName(NativeNameType.Type, "void**")] void** ppNewStateObject)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12StateObjectDesc* ppAddition = &pAddition)
			{
				fixed (ID3D12StateObject* ppStateObjectToGrowFrom = &pStateObjectToGrowFrom)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12StateObjectDesc*, ID3D12StateObject*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (D3D12StateObjectDesc*)ppAddition, (ID3D12StateObject*)ppStateObjectToGrowFrom, (Guid*)priid, ppNewStateObject);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateProtectedResourceSession1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateProtectedResourceSession1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PROTECTED_RESOURCE_SESSION_DESC1*")] D3D12ProtectedResourceSessionDesc1* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppSession")] [NativeName(NativeNameType.Type, "void**")] void** ppSession)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12ProtectedResourceSessionDesc1*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pDesc, riid, ppSession);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateProtectedResourceSession1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateProtectedResourceSession1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PROTECTED_RESOURCE_SESSION_DESC1*")] ref D3D12ProtectedResourceSessionDesc1 pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppSession")] [NativeName(NativeNameType.Type, "void**")] void** ppSession)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ProtectedResourceSessionDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12ProtectedResourceSessionDesc1*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (D3D12ProtectedResourceSessionDesc1*)ppDesc, riid, ppSession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateProtectedResourceSession1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateProtectedResourceSession1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PROTECTED_RESOURCE_SESSION_DESC1*")] D3D12ProtectedResourceSessionDesc1* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppSession")] [NativeName(NativeNameType.Type, "void**")] void** ppSession)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12ProtectedResourceSessionDesc1*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pDesc, (Guid*)priid, ppSession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateProtectedResourceSession1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateProtectedResourceSession1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_PROTECTED_RESOURCE_SESSION_DESC1*")] ref D3D12ProtectedResourceSessionDesc1 pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppSession")] [NativeName(NativeNameType.Type, "void**")] void** ppSession)
		{
			ID3D12Device7* ptr = (ID3D12Device7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ProtectedResourceSessionDesc1* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device7*, D3D12ProtectedResourceSessionDesc1*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (D3D12ProtectedResourceSessionDesc1*)ppDesc, (Guid*)priid, ppSession);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device6 (ID3D12Device7 value)
		{
			return Unsafe.As<ID3D12Device7, ID3D12Device6>(ref value);
		}

		public unsafe static implicit operator ID3D12Device5 (ID3D12Device7 value)
		{
			return Unsafe.As<ID3D12Device7, ID3D12Device5>(ref value);
		}

		public unsafe static implicit operator ID3D12Device4 (ID3D12Device7 value)
		{
			return Unsafe.As<ID3D12Device7, ID3D12Device4>(ref value);
		}

		public unsafe static implicit operator ID3D12Device3 (ID3D12Device7 value)
		{
			return Unsafe.As<ID3D12Device7, ID3D12Device3>(ref value);
		}

		public unsafe static implicit operator ID3D12Device2 (ID3D12Device7 value)
		{
			return Unsafe.As<ID3D12Device7, ID3D12Device2>(ref value);
		}

		public unsafe static implicit operator ID3D12Device1 (ID3D12Device7 value)
		{
			return Unsafe.As<ID3D12Device7, ID3D12Device1>(ref value);
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device7 value)
		{
			return Unsafe.As<ID3D12Device7, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device7 value)
		{
			return Unsafe.As<ID3D12Device7, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device7 value)
		{
			return Unsafe.As<ID3D12Device7, IUnknown>(ref value);
		}

	}

	[Guid("9218e6bb-f944-4f7e-a75c-b1b2c7b701f3")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device8")]
	public partial struct ID3D12Device8 : IComObject, IComObject<ID3D12Device8>, IComObject<ID3D12Device7>, IComObject<ID3D12Device6>, IComObject<ID3D12Device5>, IComObject<ID3D12Device4>, IComObject<ID3D12Device3>, IComObject<ID3D12Device2>, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9218e6bb-f944-4f7e-a75c-b1b2c7b701f3");

		public unsafe ID3D12Device8 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo2")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo2([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDescs, [NativeName(NativeNameType.Param, "pResourceAllocationInfo1")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO1*")] D3D12ResourceAllocationInfo1* pResourceAllocationInfo1)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, uint, D3D12ResourceDesc1*, D3D12ResourceAllocationInfo1*, D3D12ResourceAllocationInfo>)(LpVtbl[2]))(ptr, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo2")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo2([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDescs, [NativeName(NativeNameType.Param, "pResourceAllocationInfo1")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO1*")] D3D12ResourceAllocationInfo1* pResourceAllocationInfo1)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDescs = &pResourceDescs)
			{
				D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, uint, D3D12ResourceDesc1*, D3D12ResourceAllocationInfo1*, D3D12ResourceAllocationInfo>)(LpVtbl[2]))(ptr, visibleMask, numResourceDescs, (D3D12ResourceDesc1*)ppResourceDescs, pResourceAllocationInfo1);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo2")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo2([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDescs, [NativeName(NativeNameType.Param, "pResourceAllocationInfo1")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO1*")] ref D3D12ResourceAllocationInfo1 pResourceAllocationInfo1)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceAllocationInfo1* ppResourceAllocationInfo1 = &pResourceAllocationInfo1)
			{
				D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, uint, D3D12ResourceDesc1*, D3D12ResourceAllocationInfo1*, D3D12ResourceAllocationInfo>)(LpVtbl[2]))(ptr, visibleMask, numResourceDescs, pResourceDescs, (D3D12ResourceAllocationInfo1*)ppResourceAllocationInfo1);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceAllocationInfo2")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO")]
		public readonly unsafe D3D12ResourceAllocationInfo GetResourceAllocationInfo2([NativeName(NativeNameType.Param, "visibleMask")] [NativeName(NativeNameType.Type, "UINT")] uint visibleMask, [NativeName(NativeNameType.Param, "numResourceDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numResourceDescs, [NativeName(NativeNameType.Param, "pResourceDescs")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDescs, [NativeName(NativeNameType.Param, "pResourceAllocationInfo1")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_ALLOCATION_INFO1*")] ref D3D12ResourceAllocationInfo1 pResourceAllocationInfo1)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDescs = &pResourceDescs)
			{
				fixed (D3D12ResourceAllocationInfo1* ppResourceAllocationInfo1 = &pResourceAllocationInfo1)
				{
					D3D12ResourceAllocationInfo ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, uint, uint, D3D12ResourceDesc1*, D3D12ResourceAllocationInfo1*, D3D12ResourceAllocationInfo>)(LpVtbl[2]))(ptr, visibleMask, numResourceDescs, (D3D12ResourceDesc1*)ppResourceDescs, (D3D12ResourceAllocationInfo1*)ppResourceAllocationInfo1);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, riidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priidResource = &riidResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, pOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource2([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
						{
							fixed (Guid* priidResource = &riidResource)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, (Guid*)priidResource, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, riid, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialState, pOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialState, pOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialState, pOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource1([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12ResourceStates, D3D12ClearValue*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialState, (D3D12ClearValue*)ppOptimizedClearValue, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSamplerFeedbackUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateSamplerFeedbackUnorderedAccessView([NativeName(NativeNameType.Param, "pTargetedResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTargetedResource, [NativeName(NativeNameType.Param, "pFeedbackResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pFeedbackResource, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, ID3D12Resource*, D3D12CpuDescriptorHandle, void>)(LpVtbl[5]))(ptr, pTargetedResource, pFeedbackResource, destDescriptor);
		}

		[NativeName(NativeNameType.Func, "CreateSamplerFeedbackUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateSamplerFeedbackUnorderedAccessView([NativeName(NativeNameType.Param, "pTargetedResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTargetedResource, [NativeName(NativeNameType.Param, "pFeedbackResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pFeedbackResource, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTargetedResource = &pTargetedResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, ID3D12Resource*, D3D12CpuDescriptorHandle, void>)(LpVtbl[5]))(ptr, (ID3D12Resource*)ppTargetedResource, pFeedbackResource, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateSamplerFeedbackUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateSamplerFeedbackUnorderedAccessView([NativeName(NativeNameType.Param, "pTargetedResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pTargetedResource, [NativeName(NativeNameType.Param, "pFeedbackResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pFeedbackResource, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppFeedbackResource = &pFeedbackResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, ID3D12Resource*, D3D12CpuDescriptorHandle, void>)(LpVtbl[5]))(ptr, pTargetedResource, (ID3D12Resource*)ppFeedbackResource, destDescriptor);
			}
		}

		[NativeName(NativeNameType.Func, "CreateSamplerFeedbackUnorderedAccessView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CreateSamplerFeedbackUnorderedAccessView([NativeName(NativeNameType.Param, "pTargetedResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pTargetedResource, [NativeName(NativeNameType.Param, "pFeedbackResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pFeedbackResource, [NativeName(NativeNameType.Param, "DestDescriptor")] [NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")] D3D12CpuDescriptorHandle destDescriptor)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppTargetedResource = &pTargetedResource)
			{
				fixed (ID3D12Resource* ppFeedbackResource = &pFeedbackResource)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, ID3D12Resource*, ID3D12Resource*, D3D12CpuDescriptorHandle, void>)(LpVtbl[5]))(ptr, (ID3D12Resource*)ppTargetedResource, (ID3D12Resource*)ppFeedbackResource, destDescriptor);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, pTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppTotalBytes = &pTotalBytes)
			{
				((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ulong* pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, pRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
			{
				fixed (ulong* ppTotalBytes = &pTotalBytes)
				{
					((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] uint* pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, pNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppNumRows = &pNumRows)
			{
				fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
				{
					fixed (ulong* ppTotalBytes = &pTotalBytes)
					{
						((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] D3D12PlacedSubresourceFootprint* pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, pLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
			{
				fixed (uint* ppNumRows = &pNumRows)
				{
					fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
					{
						fixed (ulong* ppTotalBytes = &pTotalBytes)
						{
							((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, pResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetCopyableFootprints1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void GetCopyableFootprints1([NativeName(NativeNameType.Param, "pResourceDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pResourceDesc, [NativeName(NativeNameType.Param, "FirstSubresource")] [NativeName(NativeNameType.Type, "UINT")] uint firstSubresource, [NativeName(NativeNameType.Param, "NumSubresources")] [NativeName(NativeNameType.Type, "UINT")] uint numSubresources, [NativeName(NativeNameType.Param, "BaseOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong baseOffset, [NativeName(NativeNameType.Param, "pLayouts")] [NativeName(NativeNameType.Type, "D3D12_PLACED_SUBRESOURCE_FOOTPRINT*")] ref D3D12PlacedSubresourceFootprint pLayouts, [NativeName(NativeNameType.Param, "pNumRows")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pNumRows, [NativeName(NativeNameType.Param, "pRowSizeInBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pRowSizeInBytes, [NativeName(NativeNameType.Param, "pTotalBytes")] [NativeName(NativeNameType.Type, "UINT64*")] ref ulong pTotalBytes)
		{
			ID3D12Device8* ptr = (ID3D12Device8*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppResourceDesc = &pResourceDesc)
			{
				fixed (D3D12PlacedSubresourceFootprint* ppLayouts = &pLayouts)
				{
					fixed (uint* ppNumRows = &pNumRows)
					{
						fixed (ulong* ppRowSizeInBytes = &pRowSizeInBytes)
						{
							fixed (ulong* ppTotalBytes = &pTotalBytes)
							{
								((delegate* unmanaged[Stdcall]<ID3D12Device8*, D3D12ResourceDesc1*, uint, uint, ulong, D3D12PlacedSubresourceFootprint*, uint*, ulong*, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12ResourceDesc1*)ppResourceDesc, firstSubresource, numSubresources, baseOffset, (D3D12PlacedSubresourceFootprint*)ppLayouts, (uint*)ppNumRows, (ulong*)ppRowSizeInBytes, (ulong*)ppTotalBytes);
							}
						}
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device7 (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, ID3D12Device7>(ref value);
		}

		public unsafe static implicit operator ID3D12Device6 (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, ID3D12Device6>(ref value);
		}

		public unsafe static implicit operator ID3D12Device5 (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, ID3D12Device5>(ref value);
		}

		public unsafe static implicit operator ID3D12Device4 (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, ID3D12Device4>(ref value);
		}

		public unsafe static implicit operator ID3D12Device3 (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, ID3D12Device3>(ref value);
		}

		public unsafe static implicit operator ID3D12Device2 (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, ID3D12Device2>(ref value);
		}

		public unsafe static implicit operator ID3D12Device1 (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, ID3D12Device1>(ref value);
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device8 value)
		{
			return Unsafe.As<ID3D12Device8, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOURCE_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceDesc1
	{
		[NativeName(NativeNameType.Field, "Dimension")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_DIMENSION")]
		public D3D12ResourceDimension Dimension;
		[NativeName(NativeNameType.Field, "Alignment")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Alignment;
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;
		[NativeName(NativeNameType.Field, "DepthOrArraySize")]
		[NativeName(NativeNameType.Type, "UINT16")]
		public ushort DepthOrArraySize;
		[NativeName(NativeNameType.Field, "MipLevels")]
		[NativeName(NativeNameType.Type, "UINT16")]
		public ushort MipLevels;
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "SampleDesc")]
		[NativeName(NativeNameType.Type, "DXGI_SAMPLE_DESC")]
		public DxgiSampleDesc SampleDesc;
		[NativeName(NativeNameType.Field, "Layout")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_LAYOUT")]
		public D3D12TextureLayout Layout;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_FLAGS")]
		public D3D12ResourceFlags Flags;
		[NativeName(NativeNameType.Field, "SamplerFeedbackMipRegion")]
		[NativeName(NativeNameType.Type, "D3D12_MIP_REGION")]
		public D3D12MipRegion SamplerFeedbackMipRegion;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_MIP_REGION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12MipRegion
	{
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;
		[NativeName(NativeNameType.Field, "Depth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Depth;


	}

	[Guid("9d5e227a-4430-4161-88b3-3eca6bb16e19")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Resource1")]
	public partial struct ID3D12Resource1 : IComObject, IComObject<ID3D12Resource1>, IComObject<ID3D12Resource>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("9d5e227a-4430-4161-88b3-3eca6bb16e19");

		public unsafe ID3D12Resource1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetProtectedResourceSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetProtectedResourceSession([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppProtectedSession")] [NativeName(NativeNameType.Type, "void**")] void** ppProtectedSession)
		{
			ID3D12Resource1* ptr = (ID3D12Resource1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, riid, ppProtectedSession);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetProtectedResourceSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetProtectedResourceSession([NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppProtectedSession")] [NativeName(NativeNameType.Type, "void**")] void** ppProtectedSession)
		{
			ID3D12Resource1* ptr = (ID3D12Resource1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource1*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (Guid*)priid, ppProtectedSession);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Resource (ID3D12Resource1 value)
		{
			return Unsafe.As<ID3D12Resource1, ID3D12Resource>(ref value);
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Resource1 value)
		{
			return Unsafe.As<ID3D12Resource1, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Resource1 value)
		{
			return Unsafe.As<ID3D12Resource1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Resource1 value)
		{
			return Unsafe.As<ID3D12Resource1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Resource1 value)
		{
			return Unsafe.As<ID3D12Resource1, IUnknown>(ref value);
		}

	}

	[Guid("be36ec3b-ea85-4aeb-a45a-e9d76404a495")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Resource2")]
	public partial struct ID3D12Resource2 : IComObject, IComObject<ID3D12Resource2>, IComObject<ID3D12Resource1>, IComObject<ID3D12Resource>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("be36ec3b-ea85-4aeb-a45a-e9d76404a495");

		public unsafe ID3D12Resource2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc1")]
		[return: NativeName(NativeNameType.Type, "D3D12_RESOURCE_DESC1")]
		public readonly unsafe D3D12ResourceDesc1 GetDesc1()
		{
			ID3D12Resource2* ptr = (ID3D12Resource2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ResourceDesc1 ret = ((delegate* unmanaged[Stdcall]<ID3D12Resource2*, D3D12ResourceDesc1>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Resource1 (ID3D12Resource2 value)
		{
			return Unsafe.As<ID3D12Resource2, ID3D12Resource1>(ref value);
		}

		public unsafe static implicit operator ID3D12Resource (ID3D12Resource2 value)
		{
			return Unsafe.As<ID3D12Resource2, ID3D12Resource>(ref value);
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Resource2 value)
		{
			return Unsafe.As<ID3D12Resource2, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Resource2 value)
		{
			return Unsafe.As<ID3D12Resource2, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Resource2 value)
		{
			return Unsafe.As<ID3D12Resource2, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Resource2 value)
		{
			return Unsafe.As<ID3D12Resource2, IUnknown>(ref value);
		}

	}

	[Guid("572f7389-2168-49e3-9693-d6df5871bf6d")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Heap1")]
	public partial struct ID3D12Heap1 : IComObject, IComObject<ID3D12Heap1>, IComObject<ID3D12Heap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("572f7389-2168-49e3-9693-d6df5871bf6d");

		public unsafe ID3D12Heap1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Heap (ID3D12Heap1 value)
		{
			return Unsafe.As<ID3D12Heap1, ID3D12Heap>(ref value);
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12Heap1 value)
		{
			return Unsafe.As<ID3D12Heap1, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12Heap1 value)
		{
			return Unsafe.As<ID3D12Heap1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Heap1 value)
		{
			return Unsafe.As<ID3D12Heap1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Heap1 value)
		{
			return Unsafe.As<ID3D12Heap1, IUnknown>(ref value);
		}

	}

	[Guid("6fda83a7-b84c-4e38-9ac8-c7bd22016b3d")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12GraphicsCommandList3")]
	public partial struct ID3D12GraphicsCommandList3 : IComObject, IComObject<ID3D12GraphicsCommandList3>, IComObject<ID3D12GraphicsCommandList2>, IComObject<ID3D12GraphicsCommandList1>, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6fda83a7-b84c-4e38-9ac8-c7bd22016b3d");

		public unsafe ID3D12GraphicsCommandList3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetProtectedResourceSession")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetProtectedResourceSession([NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession)
		{
			ID3D12GraphicsCommandList3* ptr = (ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12ProtectedResourceSession*, void>)(LpVtbl[1]))(ptr, pProtectedResourceSession);
		}

		[NativeName(NativeNameType.Func, "SetProtectedResourceSession")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetProtectedResourceSession([NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession)
		{
			ID3D12GraphicsCommandList3* ptr = (ID3D12GraphicsCommandList3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList3*, ID3D12ProtectedResourceSession*, void>)(LpVtbl[1]))(ptr, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList2 (ID3D12GraphicsCommandList3 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList3, ID3D12GraphicsCommandList2>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList1 (ID3D12GraphicsCommandList3 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList3, ID3D12GraphicsCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList (ID3D12GraphicsCommandList3 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList3, ID3D12GraphicsCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList3 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList3, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList3 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList3, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList3 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList3, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList3 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList3, IUnknown>(ref value);
		}

	}

	[Guid("dbb84c27-36ce-4fc9-b801-f048c46ac570")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12MetaCommand")]
	public partial struct ID3D12MetaCommand : IComObject, IComObject<ID3D12MetaCommand>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("dbb84c27-36ce-4fc9-b801-f048c46ac570");

		public unsafe ID3D12MetaCommand (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetRequiredParameterResourceSize")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetRequiredParameterResourceSize([NativeName(NativeNameType.Param, "Stage")] [NativeName(NativeNameType.Type, "D3D12_META_COMMAND_PARAMETER_STAGE")] D3D12MetaCommandParameterStage stage, [NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex)
		{
			ID3D12MetaCommand* ptr = (ID3D12MetaCommand*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12MetaCommand*, D3D12MetaCommandParameterStage, uint, ulong>)(*LpVtbl))(ptr, stage, parameterIndex);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12MetaCommand value)
		{
			return Unsafe.As<ID3D12MetaCommand, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12MetaCommand value)
		{
			return Unsafe.As<ID3D12MetaCommand, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12MetaCommand value)
		{
			return Unsafe.As<ID3D12MetaCommand, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12MetaCommand value)
		{
			return Unsafe.As<ID3D12MetaCommand, IUnknown>(ref value);
		}

	}

	[Guid("8754318e-d3a9-4541-98cf-645b50dc4874")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12GraphicsCommandList4")]
	public partial struct ID3D12GraphicsCommandList4 : IComObject, IComObject<ID3D12GraphicsCommandList4>, IComObject<ID3D12GraphicsCommandList3>, IComObject<ID3D12GraphicsCommandList2>, IComObject<ID3D12GraphicsCommandList1>, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8754318e-d3a9-4541-98cf-645b50dc4874");

		public unsafe ID3D12GraphicsCommandList4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "BeginRenderPass")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BeginRenderPass([NativeName(NativeNameType.Param, "NumRenderTargets")] [NativeName(NativeNameType.Type, "UINT")] uint numRenderTargets, [NativeName(NativeNameType.Param, "pRenderTargets")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_PASS_RENDER_TARGET_DESC*")] D3D12RenderPassRenderTargetDesc* pRenderTargets, [NativeName(NativeNameType.Param, "pDepthStencil")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*")] D3D12RenderPassDepthStencilDesc* pDepthStencil, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_FLAGS")] D3D12RenderPassFlags flags)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, D3D12RenderPassRenderTargetDesc*, D3D12RenderPassDepthStencilDesc*, D3D12RenderPassFlags, void>)(LpVtbl[1]))(ptr, numRenderTargets, pRenderTargets, pDepthStencil, flags);
		}

		[NativeName(NativeNameType.Func, "BeginRenderPass")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BeginRenderPass([NativeName(NativeNameType.Param, "NumRenderTargets")] [NativeName(NativeNameType.Type, "UINT")] uint numRenderTargets, [NativeName(NativeNameType.Param, "pRenderTargets")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_PASS_RENDER_TARGET_DESC*")] ref D3D12RenderPassRenderTargetDesc pRenderTargets, [NativeName(NativeNameType.Param, "pDepthStencil")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*")] D3D12RenderPassDepthStencilDesc* pDepthStencil, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_FLAGS")] D3D12RenderPassFlags flags)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12RenderPassRenderTargetDesc* ppRenderTargets = &pRenderTargets)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, D3D12RenderPassRenderTargetDesc*, D3D12RenderPassDepthStencilDesc*, D3D12RenderPassFlags, void>)(LpVtbl[1]))(ptr, numRenderTargets, (D3D12RenderPassRenderTargetDesc*)ppRenderTargets, pDepthStencil, flags);
			}
		}

		[NativeName(NativeNameType.Func, "BeginRenderPass")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BeginRenderPass([NativeName(NativeNameType.Param, "NumRenderTargets")] [NativeName(NativeNameType.Type, "UINT")] uint numRenderTargets, [NativeName(NativeNameType.Param, "pRenderTargets")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_PASS_RENDER_TARGET_DESC*")] D3D12RenderPassRenderTargetDesc* pRenderTargets, [NativeName(NativeNameType.Param, "pDepthStencil")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*")] ref D3D12RenderPassDepthStencilDesc pDepthStencil, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_FLAGS")] D3D12RenderPassFlags flags)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12RenderPassDepthStencilDesc* ppDepthStencil = &pDepthStencil)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, D3D12RenderPassRenderTargetDesc*, D3D12RenderPassDepthStencilDesc*, D3D12RenderPassFlags, void>)(LpVtbl[1]))(ptr, numRenderTargets, pRenderTargets, (D3D12RenderPassDepthStencilDesc*)ppDepthStencil, flags);
			}
		}

		[NativeName(NativeNameType.Func, "BeginRenderPass")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BeginRenderPass([NativeName(NativeNameType.Param, "NumRenderTargets")] [NativeName(NativeNameType.Type, "UINT")] uint numRenderTargets, [NativeName(NativeNameType.Param, "pRenderTargets")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_PASS_RENDER_TARGET_DESC*")] ref D3D12RenderPassRenderTargetDesc pRenderTargets, [NativeName(NativeNameType.Param, "pDepthStencil")] [NativeName(NativeNameType.Type, "const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*")] ref D3D12RenderPassDepthStencilDesc pDepthStencil, [NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_FLAGS")] D3D12RenderPassFlags flags)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12RenderPassRenderTargetDesc* ppRenderTargets = &pRenderTargets)
			{
				fixed (D3D12RenderPassDepthStencilDesc* ppDepthStencil = &pDepthStencil)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, uint, D3D12RenderPassRenderTargetDesc*, D3D12RenderPassDepthStencilDesc*, D3D12RenderPassFlags, void>)(LpVtbl[1]))(ptr, numRenderTargets, (D3D12RenderPassRenderTargetDesc*)ppRenderTargets, (D3D12RenderPassDepthStencilDesc*)ppDepthStencil, flags);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EndRenderPass")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EndRenderPass()
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, void>)(LpVtbl[2]))(ptr);
		}

		[NativeName(NativeNameType.Func, "InitializeMetaCommand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void InitializeMetaCommand([NativeName(NativeNameType.Param, "pMetaCommand")] [NativeName(NativeNameType.Type, "ID3D12MetaCommand*")] ID3D12MetaCommand* pMetaCommand, [NativeName(NativeNameType.Param, "pInitializationParametersData")] [NativeName(NativeNameType.Type, "const void*")] void* pInitializationParametersData, [NativeName(NativeNameType.Param, "InitializationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint initializationParametersDataSizeInBytes)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12MetaCommand*, void*, nuint, void>)(LpVtbl[3]))(ptr, pMetaCommand, pInitializationParametersData, initializationParametersDataSizeInBytes);
		}

		[NativeName(NativeNameType.Func, "InitializeMetaCommand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void InitializeMetaCommand([NativeName(NativeNameType.Param, "pMetaCommand")] [NativeName(NativeNameType.Type, "ID3D12MetaCommand*")] ref ID3D12MetaCommand pMetaCommand, [NativeName(NativeNameType.Param, "pInitializationParametersData")] [NativeName(NativeNameType.Type, "const void*")] void* pInitializationParametersData, [NativeName(NativeNameType.Param, "InitializationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint initializationParametersDataSizeInBytes)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12MetaCommand* ppMetaCommand = &pMetaCommand)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12MetaCommand*, void*, nuint, void>)(LpVtbl[3]))(ptr, (ID3D12MetaCommand*)ppMetaCommand, pInitializationParametersData, initializationParametersDataSizeInBytes);
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteMetaCommand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteMetaCommand([NativeName(NativeNameType.Param, "pMetaCommand")] [NativeName(NativeNameType.Type, "ID3D12MetaCommand*")] ID3D12MetaCommand* pMetaCommand, [NativeName(NativeNameType.Param, "pExecutionParametersData")] [NativeName(NativeNameType.Type, "const void*")] void* pExecutionParametersData, [NativeName(NativeNameType.Param, "ExecutionParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint executionParametersDataSizeInBytes)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12MetaCommand*, void*, nuint, void>)(LpVtbl[4]))(ptr, pMetaCommand, pExecutionParametersData, executionParametersDataSizeInBytes);
		}

		[NativeName(NativeNameType.Func, "ExecuteMetaCommand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteMetaCommand([NativeName(NativeNameType.Param, "pMetaCommand")] [NativeName(NativeNameType.Type, "ID3D12MetaCommand*")] ref ID3D12MetaCommand pMetaCommand, [NativeName(NativeNameType.Param, "pExecutionParametersData")] [NativeName(NativeNameType.Type, "const void*")] void* pExecutionParametersData, [NativeName(NativeNameType.Param, "ExecutionParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint executionParametersDataSizeInBytes)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12MetaCommand* ppMetaCommand = &pMetaCommand)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12MetaCommand*, void*, nuint, void>)(LpVtbl[4]))(ptr, (ID3D12MetaCommand*)ppMetaCommand, pExecutionParametersData, executionParametersDataSizeInBytes);
			}
		}

		[NativeName(NativeNameType.Func, "BuildRaytracingAccelerationStructure")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BuildRaytracingAccelerationStructure([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*")] D3D12BuildRaytracingAccelerationStructureDesc* pDesc, [NativeName(NativeNameType.Param, "NumPostbuildInfoDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numPostbuildInfoDescs, [NativeName(NativeNameType.Param, "pPostbuildInfoDescs")] [NativeName(NativeNameType.Type, "const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*")] D3D12RaytracingAccelerationStructurePostbuildInfoDesc* pPostbuildInfoDescs)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12BuildRaytracingAccelerationStructureDesc*, uint, D3D12RaytracingAccelerationStructurePostbuildInfoDesc*, void>)(LpVtbl[5]))(ptr, pDesc, numPostbuildInfoDescs, pPostbuildInfoDescs);
		}

		[NativeName(NativeNameType.Func, "BuildRaytracingAccelerationStructure")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BuildRaytracingAccelerationStructure([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*")] ref D3D12BuildRaytracingAccelerationStructureDesc pDesc, [NativeName(NativeNameType.Param, "NumPostbuildInfoDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numPostbuildInfoDescs, [NativeName(NativeNameType.Param, "pPostbuildInfoDescs")] [NativeName(NativeNameType.Type, "const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*")] D3D12RaytracingAccelerationStructurePostbuildInfoDesc* pPostbuildInfoDescs)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12BuildRaytracingAccelerationStructureDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12BuildRaytracingAccelerationStructureDesc*, uint, D3D12RaytracingAccelerationStructurePostbuildInfoDesc*, void>)(LpVtbl[5]))(ptr, (D3D12BuildRaytracingAccelerationStructureDesc*)ppDesc, numPostbuildInfoDescs, pPostbuildInfoDescs);
			}
		}

		[NativeName(NativeNameType.Func, "BuildRaytracingAccelerationStructure")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BuildRaytracingAccelerationStructure([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*")] D3D12BuildRaytracingAccelerationStructureDesc* pDesc, [NativeName(NativeNameType.Param, "NumPostbuildInfoDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numPostbuildInfoDescs, [NativeName(NativeNameType.Param, "pPostbuildInfoDescs")] [NativeName(NativeNameType.Type, "const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*")] ref D3D12RaytracingAccelerationStructurePostbuildInfoDesc pPostbuildInfoDescs)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12RaytracingAccelerationStructurePostbuildInfoDesc* ppPostbuildInfoDescs = &pPostbuildInfoDescs)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12BuildRaytracingAccelerationStructureDesc*, uint, D3D12RaytracingAccelerationStructurePostbuildInfoDesc*, void>)(LpVtbl[5]))(ptr, pDesc, numPostbuildInfoDescs, (D3D12RaytracingAccelerationStructurePostbuildInfoDesc*)ppPostbuildInfoDescs);
			}
		}

		[NativeName(NativeNameType.Func, "BuildRaytracingAccelerationStructure")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BuildRaytracingAccelerationStructure([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*")] ref D3D12BuildRaytracingAccelerationStructureDesc pDesc, [NativeName(NativeNameType.Param, "NumPostbuildInfoDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numPostbuildInfoDescs, [NativeName(NativeNameType.Param, "pPostbuildInfoDescs")] [NativeName(NativeNameType.Type, "const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*")] ref D3D12RaytracingAccelerationStructurePostbuildInfoDesc pPostbuildInfoDescs)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12BuildRaytracingAccelerationStructureDesc* ppDesc = &pDesc)
			{
				fixed (D3D12RaytracingAccelerationStructurePostbuildInfoDesc* ppPostbuildInfoDescs = &pPostbuildInfoDescs)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12BuildRaytracingAccelerationStructureDesc*, uint, D3D12RaytracingAccelerationStructurePostbuildInfoDesc*, void>)(LpVtbl[5]))(ptr, (D3D12BuildRaytracingAccelerationStructureDesc*)ppDesc, numPostbuildInfoDescs, (D3D12RaytracingAccelerationStructurePostbuildInfoDesc*)ppPostbuildInfoDescs);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EmitRaytracingAccelerationStructurePostbuildInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EmitRaytracingAccelerationStructurePostbuildInfo([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*")] D3D12RaytracingAccelerationStructurePostbuildInfoDesc* pDesc, [NativeName(NativeNameType.Param, "NumSourceAccelerationStructures")] [NativeName(NativeNameType.Type, "UINT")] uint numSourceAccelerationStructures, [NativeName(NativeNameType.Param, "pSourceAccelerationStructureData")] [NativeName(NativeNameType.Type, "const D3D12_GPU_VIRTUAL_ADDRESS*")] ulong* pSourceAccelerationStructureData)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12RaytracingAccelerationStructurePostbuildInfoDesc*, uint, ulong*, void>)(LpVtbl[6]))(ptr, pDesc, numSourceAccelerationStructures, pSourceAccelerationStructureData);
		}

		[NativeName(NativeNameType.Func, "EmitRaytracingAccelerationStructurePostbuildInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EmitRaytracingAccelerationStructurePostbuildInfo([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*")] ref D3D12RaytracingAccelerationStructurePostbuildInfoDesc pDesc, [NativeName(NativeNameType.Param, "NumSourceAccelerationStructures")] [NativeName(NativeNameType.Type, "UINT")] uint numSourceAccelerationStructures, [NativeName(NativeNameType.Param, "pSourceAccelerationStructureData")] [NativeName(NativeNameType.Type, "const D3D12_GPU_VIRTUAL_ADDRESS*")] ulong* pSourceAccelerationStructureData)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12RaytracingAccelerationStructurePostbuildInfoDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12RaytracingAccelerationStructurePostbuildInfoDesc*, uint, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12RaytracingAccelerationStructurePostbuildInfoDesc*)ppDesc, numSourceAccelerationStructures, pSourceAccelerationStructureData);
			}
		}

		[NativeName(NativeNameType.Func, "EmitRaytracingAccelerationStructurePostbuildInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EmitRaytracingAccelerationStructurePostbuildInfo([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*")] D3D12RaytracingAccelerationStructurePostbuildInfoDesc* pDesc, [NativeName(NativeNameType.Param, "NumSourceAccelerationStructures")] [NativeName(NativeNameType.Type, "UINT")] uint numSourceAccelerationStructures, [NativeName(NativeNameType.Param, "pSourceAccelerationStructureData")] [NativeName(NativeNameType.Type, "const D3D12_GPU_VIRTUAL_ADDRESS*")] ref ulong pSourceAccelerationStructureData)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ulong* ppSourceAccelerationStructureData = &pSourceAccelerationStructureData)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12RaytracingAccelerationStructurePostbuildInfoDesc*, uint, ulong*, void>)(LpVtbl[6]))(ptr, pDesc, numSourceAccelerationStructures, (ulong*)ppSourceAccelerationStructureData);
			}
		}

		[NativeName(NativeNameType.Func, "EmitRaytracingAccelerationStructurePostbuildInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EmitRaytracingAccelerationStructurePostbuildInfo([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*")] ref D3D12RaytracingAccelerationStructurePostbuildInfoDesc pDesc, [NativeName(NativeNameType.Param, "NumSourceAccelerationStructures")] [NativeName(NativeNameType.Type, "UINT")] uint numSourceAccelerationStructures, [NativeName(NativeNameType.Param, "pSourceAccelerationStructureData")] [NativeName(NativeNameType.Type, "const D3D12_GPU_VIRTUAL_ADDRESS*")] ref ulong pSourceAccelerationStructureData)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12RaytracingAccelerationStructurePostbuildInfoDesc* ppDesc = &pDesc)
			{
				fixed (ulong* ppSourceAccelerationStructureData = &pSourceAccelerationStructureData)
				{
					((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12RaytracingAccelerationStructurePostbuildInfoDesc*, uint, ulong*, void>)(LpVtbl[6]))(ptr, (D3D12RaytracingAccelerationStructurePostbuildInfoDesc*)ppDesc, numSourceAccelerationStructures, (ulong*)ppSourceAccelerationStructureData);
				}
			}
		}

		[NativeName(NativeNameType.Func, "CopyRaytracingAccelerationStructure")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void CopyRaytracingAccelerationStructure([NativeName(NativeNameType.Param, "DestAccelerationStructureData")] [NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")] ulong destAccelerationStructureData, [NativeName(NativeNameType.Param, "SourceAccelerationStructureData")] [NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")] ulong sourceAccelerationStructureData, [NativeName(NativeNameType.Param, "Mode")] [NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE")] D3D12RaytracingAccelerationStructureCopyMode mode)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ulong, ulong, D3D12RaytracingAccelerationStructureCopyMode, void>)(LpVtbl[7]))(ptr, destAccelerationStructureData, sourceAccelerationStructureData, mode);
		}

		[NativeName(NativeNameType.Func, "SetPipelineState1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetPipelineState1([NativeName(NativeNameType.Param, "pStateObject")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ID3D12StateObject* pStateObject)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12StateObject*, void>)(LpVtbl[8]))(ptr, pStateObject);
		}

		[NativeName(NativeNameType.Func, "SetPipelineState1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetPipelineState1([NativeName(NativeNameType.Param, "pStateObject")] [NativeName(NativeNameType.Type, "ID3D12StateObject*")] ref ID3D12StateObject pStateObject)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12StateObject* ppStateObject = &pStateObject)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, ID3D12StateObject*, void>)(LpVtbl[8]))(ptr, (ID3D12StateObject*)ppStateObject);
			}
		}

		[NativeName(NativeNameType.Func, "DispatchRays")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DispatchRays([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_DISPATCH_RAYS_DESC*")] D3D12DispatchRaysDesc* pDesc)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12DispatchRaysDesc*, void>)(LpVtbl[9]))(ptr, pDesc);
		}

		[NativeName(NativeNameType.Func, "DispatchRays")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DispatchRays([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_DISPATCH_RAYS_DESC*")] ref D3D12DispatchRaysDesc pDesc)
		{
			ID3D12GraphicsCommandList4* ptr = (ID3D12GraphicsCommandList4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12DispatchRaysDesc* ppDesc = &pDesc)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList4*, D3D12DispatchRaysDesc*, void>)(LpVtbl[9]))(ptr, (D3D12DispatchRaysDesc*)ppDesc);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList3 (ID3D12GraphicsCommandList4 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList4, ID3D12GraphicsCommandList3>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList2 (ID3D12GraphicsCommandList4 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList4, ID3D12GraphicsCommandList2>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList1 (ID3D12GraphicsCommandList4 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList4, ID3D12GraphicsCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList (ID3D12GraphicsCommandList4 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList4, ID3D12GraphicsCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList4 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList4, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList4 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList4, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList4 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList4, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList4 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList4, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RENDER_PASS_RENDER_TARGET_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderPassRenderTargetDesc
	{
		[NativeName(NativeNameType.Field, "cpuDescriptor")]
		[NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")]
		public D3D12CpuDescriptorHandle CpuDescriptor;
		[NativeName(NativeNameType.Field, "BeginningAccess")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_BEGINNING_ACCESS")]
		public D3D12RenderPassBeginningAccess BeginningAccess;
		[NativeName(NativeNameType.Field, "EndingAccess")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_ENDING_ACCESS")]
		public D3D12RenderPassEndingAccess EndingAccess;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RENDER_PASS_BEGINNING_ACCESS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderPassBeginningAccess
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12RenderPassBeginningAccessUnion
		{
			[NativeName(NativeNameType.Field, "Clear")]
			[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS")]
			[FieldOffset(0)]
			public D3D12RenderPassBeginningAccessClearParameters Clear;


		}

		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE")]
		public D3D12RenderPassBeginningAccessType Type;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12RenderPassBeginningAccessUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderPassBeginningAccessClearParameters
	{
		[NativeName(NativeNameType.Field, "ClearValue")]
		[NativeName(NativeNameType.Type, "D3D12_CLEAR_VALUE")]
		public D3D12ClearValue ClearValue;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RENDER_PASS_ENDING_ACCESS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderPassEndingAccess
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12RenderPassEndingAccessUnion
		{
			[NativeName(NativeNameType.Field, "Resolve")]
			[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS")]
			[FieldOffset(0)]
			public D3D12RenderPassEndingAccessResolveParameters Resolve;


		}

		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_ENDING_ACCESS_TYPE")]
		public D3D12RenderPassEndingAccessType Type;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12RenderPassEndingAccessUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderPassEndingAccessResolveParameters
	{
		[NativeName(NativeNameType.Field, "pSrcResource")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PSrcResource;
		[NativeName(NativeNameType.Field, "pDstResource")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PDstResource;
		[NativeName(NativeNameType.Field, "SubresourceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SubresourceCount;
		[NativeName(NativeNameType.Field, "pSubresourceParameters")]
		[NativeName(NativeNameType.Type, "const D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS*")]
		public unsafe D3D12RenderPassEndingAccessResolveSubresourceParameters* PSubresourceParameters;
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "ResolveMode")]
		[NativeName(NativeNameType.Type, "D3D12_RESOLVE_MODE")]
		public D3D12ResolveMode ResolveMode;
		[NativeName(NativeNameType.Field, "PreserveResolveSource")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int PreserveResolveSource;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderPassEndingAccessResolveSubresourceParameters
	{
		[NativeName(NativeNameType.Field, "SrcSubresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SrcSubresource;
		[NativeName(NativeNameType.Field, "DstSubresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DstSubresource;
		[NativeName(NativeNameType.Field, "DstX")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DstX;
		[NativeName(NativeNameType.Field, "DstY")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DstY;
		[NativeName(NativeNameType.Field, "SrcRect")]
		[NativeName(NativeNameType.Type, "D3D12_RECT")]
		public Rect32 SrcRect;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RENDER_PASS_DEPTH_STENCIL_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RenderPassDepthStencilDesc
	{
		[NativeName(NativeNameType.Field, "cpuDescriptor")]
		[NativeName(NativeNameType.Type, "D3D12_CPU_DESCRIPTOR_HANDLE")]
		public D3D12CpuDescriptorHandle CpuDescriptor;
		[NativeName(NativeNameType.Field, "DepthBeginningAccess")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_BEGINNING_ACCESS")]
		public D3D12RenderPassBeginningAccess DepthBeginningAccess;
		[NativeName(NativeNameType.Field, "StencilBeginningAccess")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_BEGINNING_ACCESS")]
		public D3D12RenderPassBeginningAccess StencilBeginningAccess;
		[NativeName(NativeNameType.Field, "DepthEndingAccess")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_ENDING_ACCESS")]
		public D3D12RenderPassEndingAccess DepthEndingAccess;
		[NativeName(NativeNameType.Field, "StencilEndingAccess")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_ENDING_ACCESS")]
		public D3D12RenderPassEndingAccess StencilEndingAccess;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BuildRaytracingAccelerationStructureDesc
	{
		[NativeName(NativeNameType.Field, "DestAccelerationStructureData")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong DestAccelerationStructureData;
		[NativeName(NativeNameType.Field, "Inputs")]
		[NativeName(NativeNameType.Type, "D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS")]
		public D3D12BuildRaytracingAccelerationStructureInputs Inputs;
		[NativeName(NativeNameType.Field, "SourceAccelerationStructureData")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong SourceAccelerationStructureData;
		[NativeName(NativeNameType.Field, "ScratchAccelerationStructureData")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong ScratchAccelerationStructureData;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingAccelerationStructurePostbuildInfoDesc
	{
		[NativeName(NativeNameType.Field, "DestBuffer")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong DestBuffer;
		[NativeName(NativeNameType.Field, "InfoType")]
		[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE")]
		public D3D12RaytracingAccelerationStructurePostbuildInfoType InfoType;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d12_0000_0049 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_DISPATCH_RAYS_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DispatchRaysDesc
	{
		[NativeName(NativeNameType.Field, "RayGenerationShaderRecord")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS_RANGE")]
		public D3D12GpuVirtualAddressRange RayGenerationShaderRecord;
		[NativeName(NativeNameType.Field, "MissShaderTable")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE")]
		public D3D12GpuVirtualAddressRangeAndStride MissShaderTable;
		[NativeName(NativeNameType.Field, "HitGroupTable")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE")]
		public D3D12GpuVirtualAddressRangeAndStride HitGroupTable;
		[NativeName(NativeNameType.Field, "CallableShaderTable")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE")]
		public D3D12GpuVirtualAddressRangeAndStride CallableShaderTable;
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;
		[NativeName(NativeNameType.Field, "Depth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Depth;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_GPU_VIRTUAL_ADDRESS_RANGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12GpuVirtualAddressRange
	{
		[NativeName(NativeNameType.Field, "StartAddress")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong StartAddress;
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12GpuVirtualAddressRangeAndStride
	{
		[NativeName(NativeNameType.Field, "StartAddress")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong StartAddress;
		[NativeName(NativeNameType.Field, "SizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SizeInBytes;
		[NativeName(NativeNameType.Field, "StrideInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong StrideInBytes;


	}

	[Guid("28e2495d-0f64-4ae4-a6ec-129255dc49a8")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12ShaderCacheSession")]
	public partial struct ID3D12ShaderCacheSession : IComObject, IComObject<ID3D12ShaderCacheSession>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("28e2495d-0f64-4ae4-a6ec-129255dc49a8");

		public unsafe ID3D12ShaderCacheSession (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "FindValue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult FindValue([NativeName(NativeNameType.Param, "pKey")] [NativeName(NativeNameType.Type, "const void*")] void* pKey, [NativeName(NativeNameType.Param, "KeySize")] [NativeName(NativeNameType.Type, "UINT")] uint keySize, [NativeName(NativeNameType.Param, "pValue")] [NativeName(NativeNameType.Type, "void*")] void* pValue, [NativeName(NativeNameType.Param, "pValueSize")] [NativeName(NativeNameType.Type, "UINT*")] uint* pValueSize)
		{
			ID3D12ShaderCacheSession* ptr = (ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, void*, uint, void*, uint*, HResult>)(LpVtbl[1]))(ptr, pKey, keySize, pValue, pValueSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "FindValue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult FindValue([NativeName(NativeNameType.Param, "pKey")] [NativeName(NativeNameType.Type, "const void*")] void* pKey, [NativeName(NativeNameType.Param, "KeySize")] [NativeName(NativeNameType.Type, "UINT")] uint keySize, [NativeName(NativeNameType.Param, "pValue")] [NativeName(NativeNameType.Type, "void*")] void* pValue, [NativeName(NativeNameType.Param, "pValueSize")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pValueSize)
		{
			ID3D12ShaderCacheSession* ptr = (ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppValueSize = &pValueSize)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, void*, uint, void*, uint*, HResult>)(LpVtbl[1]))(ptr, pKey, keySize, pValue, (uint*)ppValueSize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "StoreValue")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult StoreValue([NativeName(NativeNameType.Param, "pKey")] [NativeName(NativeNameType.Type, "const void*")] void* pKey, [NativeName(NativeNameType.Param, "KeySize")] [NativeName(NativeNameType.Type, "UINT")] uint keySize, [NativeName(NativeNameType.Param, "pValue")] [NativeName(NativeNameType.Type, "const void*")] void* pValue, [NativeName(NativeNameType.Param, "ValueSize")] [NativeName(NativeNameType.Type, "UINT")] uint valueSize)
		{
			ID3D12ShaderCacheSession* ptr = (ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, void*, uint, void*, uint, HResult>)(LpVtbl[2]))(ptr, pKey, keySize, pValue, valueSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetDeleteOnDestroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetDeleteOnDestroy()
		{
			ID3D12ShaderCacheSession* ptr = (ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, void>)(LpVtbl[3]))(ptr);
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_SHADER_CACHE_SESSION_DESC")]
		public readonly unsafe D3D12ShaderCacheSessionDesc GetDesc()
		{
			ID3D12ShaderCacheSession* ptr = (ID3D12ShaderCacheSession*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12ShaderCacheSessionDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderCacheSession*, D3D12ShaderCacheSessionDesc>)(LpVtbl[4]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12ShaderCacheSession value)
		{
			return Unsafe.As<ID3D12ShaderCacheSession, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12ShaderCacheSession value)
		{
			return Unsafe.As<ID3D12ShaderCacheSession, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12ShaderCacheSession value)
		{
			return Unsafe.As<ID3D12ShaderCacheSession, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SHADER_CACHE_SESSION_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderCacheSessionDesc
	{
		[NativeName(NativeNameType.Field, "Identifier")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid Identifier;
		[NativeName(NativeNameType.Field, "Mode")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_CACHE_MODE")]
		public D3D12ShaderCacheMode Mode;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_CACHE_FLAGS")]
		public D3D12ShaderCacheFlags Flags;
		[NativeName(NativeNameType.Field, "MaximumInMemoryCacheSizeBytes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaximumInMemoryCacheSizeBytes;
		[NativeName(NativeNameType.Field, "MaximumInMemoryCacheEntries")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaximumInMemoryCacheEntries;
		[NativeName(NativeNameType.Field, "MaximumValueFileSizeBytes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaximumValueFileSizeBytes;
		[NativeName(NativeNameType.Field, "Version")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Version;


	}

	[Guid("4c80e962-f032-4f60-bc9e-ebc2cfa1d83c")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device9")]
	public partial struct ID3D12Device9 : IComObject, IComObject<ID3D12Device9>, IComObject<ID3D12Device8>, IComObject<ID3D12Device7>, IComObject<ID3D12Device6>, IComObject<ID3D12Device5>, IComObject<ID3D12Device4>, IComObject<ID3D12Device3>, IComObject<ID3D12Device2>, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("4c80e962-f032-4f60-bc9e-ebc2cfa1d83c");

		public unsafe ID3D12Device9 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreateShaderCacheSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateShaderCacheSession([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SHADER_CACHE_SESSION_DESC*")] D3D12ShaderCacheSessionDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvSession")] [NativeName(NativeNameType.Type, "void**")] void** ppvSession)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12ShaderCacheSessionDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, riid, ppvSession);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateShaderCacheSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateShaderCacheSession([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SHADER_CACHE_SESSION_DESC*")] ref D3D12ShaderCacheSessionDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvSession")] [NativeName(NativeNameType.Type, "void**")] void** ppvSession)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderCacheSessionDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12ShaderCacheSessionDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ShaderCacheSessionDesc*)ppDesc, riid, ppvSession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateShaderCacheSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateShaderCacheSession([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SHADER_CACHE_SESSION_DESC*")] D3D12ShaderCacheSessionDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvSession")] [NativeName(NativeNameType.Type, "void**")] void** ppvSession)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12ShaderCacheSessionDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, (Guid*)priid, ppvSession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateShaderCacheSession")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateShaderCacheSession([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_SHADER_CACHE_SESSION_DESC*")] ref D3D12ShaderCacheSessionDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvSession")] [NativeName(NativeNameType.Type, "void**")] void** ppvSession)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderCacheSessionDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12ShaderCacheSessionDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ShaderCacheSessionDesc*)ppDesc, (Guid*)priid, ppvSession);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ShaderCacheControl")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ShaderCacheControl([NativeName(NativeNameType.Param, "Kinds")] [NativeName(NativeNameType.Type, "D3D12_SHADER_CACHE_KIND_FLAGS")] D3D12ShaderCacheKindFlags kinds, [NativeName(NativeNameType.Param, "Control")] [NativeName(NativeNameType.Type, "D3D12_SHADER_CACHE_CONTROL_FLAGS")] D3D12ShaderCacheControlFlags control)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12ShaderCacheKindFlags, D3D12ShaderCacheControlFlags, HResult>)(LpVtbl[6]))(ptr, kinds, control);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] D3D12CommandQueueDesc* pDesc, [NativeName(NativeNameType.Param, "CreatorID")] [NativeName(NativeNameType.Type, "const IID&")] Guid* creatorID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12CommandQueueDesc*, Guid*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, creatorID, riid, ppCommandQueue);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] ref D3D12CommandQueueDesc pDesc, [NativeName(NativeNameType.Param, "CreatorID")] [NativeName(NativeNameType.Type, "const IID&")] Guid* creatorID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandQueueDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12CommandQueueDesc*, Guid*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12CommandQueueDesc*)ppDesc, creatorID, riid, ppCommandQueue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] D3D12CommandQueueDesc* pDesc, [NativeName(NativeNameType.Param, "CreatorID")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid creatorID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcreatorID = &creatorID)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12CommandQueueDesc*, Guid*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, (Guid*)pcreatorID, riid, ppCommandQueue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] ref D3D12CommandQueueDesc pDesc, [NativeName(NativeNameType.Param, "CreatorID")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid creatorID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandQueueDesc* ppDesc = &pDesc)
			{
				fixed (Guid* pcreatorID = &creatorID)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12CommandQueueDesc*, Guid*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12CommandQueueDesc*)ppDesc, (Guid*)pcreatorID, riid, ppCommandQueue);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] D3D12CommandQueueDesc* pDesc, [NativeName(NativeNameType.Param, "CreatorID")] [NativeName(NativeNameType.Type, "const IID&")] Guid* creatorID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12CommandQueueDesc*, Guid*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, creatorID, (Guid*)priid, ppCommandQueue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] ref D3D12CommandQueueDesc pDesc, [NativeName(NativeNameType.Param, "CreatorID")] [NativeName(NativeNameType.Type, "const IID&")] Guid* creatorID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandQueueDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12CommandQueueDesc*, Guid*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12CommandQueueDesc*)ppDesc, creatorID, (Guid*)priid, ppCommandQueue);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] D3D12CommandQueueDesc* pDesc, [NativeName(NativeNameType.Param, "CreatorID")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid creatorID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pcreatorID = &creatorID)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12CommandQueueDesc*, Guid*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, pDesc, (Guid*)pcreatorID, (Guid*)priid, ppCommandQueue);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommandQueue1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommandQueue1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_COMMAND_QUEUE_DESC*")] ref D3D12CommandQueueDesc pDesc, [NativeName(NativeNameType.Param, "CreatorID")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid creatorID, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppCommandQueue")] [NativeName(NativeNameType.Type, "void**")] void** ppCommandQueue)
		{
			ID3D12Device9* ptr = (ID3D12Device9*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12CommandQueueDesc* ppDesc = &pDesc)
			{
				fixed (Guid* pcreatorID = &creatorID)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device9*, D3D12CommandQueueDesc*, Guid*, Guid*, void**, HResult>)(LpVtbl[7]))(ptr, (D3D12CommandQueueDesc*)ppDesc, (Guid*)pcreatorID, (Guid*)priid, ppCommandQueue);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device8 (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Device8>(ref value);
		}

		public unsafe static implicit operator ID3D12Device7 (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Device7>(ref value);
		}

		public unsafe static implicit operator ID3D12Device6 (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Device6>(ref value);
		}

		public unsafe static implicit operator ID3D12Device5 (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Device5>(ref value);
		}

		public unsafe static implicit operator ID3D12Device4 (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Device4>(ref value);
		}

		public unsafe static implicit operator ID3D12Device3 (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Device3>(ref value);
		}

		public unsafe static implicit operator ID3D12Device2 (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Device2>(ref value);
		}

		public unsafe static implicit operator ID3D12Device1 (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Device1>(ref value);
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device9 value)
		{
			return Unsafe.As<ID3D12Device9, IUnknown>(ref value);
		}

	}

	[Guid("517f8718-aa66-49f9-b02b-a7ab89c06031")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Device10")]
	public partial struct ID3D12Device10 : IComObject, IComObject<ID3D12Device10>, IComObject<ID3D12Device9>, IComObject<ID3D12Device8>, IComObject<ID3D12Device7>, IComObject<ID3D12Device6>, IComObject<ID3D12Device5>, IComObject<ID3D12Device4>, IComObject<ID3D12Device3>, IComObject<ID3D12Device2>, IComObject<ID3D12Device1>, IComObject<ID3D12Device>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("517f8718-aa66-49f9-b02b-a7ab89c06031");

		public unsafe ID3D12Device10 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
						{
							fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riidResource, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priidResource = &riidResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
						{
							fixed (Guid* priidResource = &riidResource)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priidResource, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
			{
				fixed (Guid* priidResource = &riidResource)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							fixed (Guid* priidResource = &riidResource)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priidResource = &riidResource)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							fixed (Guid* priidResource = &riidResource)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priidResource = &riidResource)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							fixed (Guid* priidResource = &riidResource)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							fixed (Guid* priidResource = &riidResource)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateCommittedResource3")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateCommittedResource3([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riidResource")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riidResource, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
						{
							fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
							{
								fixed (Guid* priidResource = &riidResource)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priidResource, ppvResource);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialLayout, pOptimizedClearValue, numCastableFormats, pCastableFormats, riid, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialLayout, pOptimizedClearValue, numCastableFormats, pCastableFormats, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, numCastableFormats, pCastableFormats, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, numCastableFormats, pCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, pCastableFormats, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, pCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, pCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, pCastableFormats, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialLayout, pOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialLayout, pOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialLayout, pOptimizedClearValue, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialLayout, pOptimizedClearValue, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialLayout, pOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialLayout, pOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, pOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] D3D12ResourceDesc1* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ID3D12Heap* pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreatePlacedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreatePlacedResource2([NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12Heap*")] ref ID3D12Heap pHeap, [NativeName(NativeNameType.Param, "HeapOffset")] [NativeName(NativeNameType.Type, "UINT64")] ulong heapOffset, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC1*")] ref D3D12ResourceDesc1 pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Heap* ppHeap = &pHeap)
			{
				fixed (D3D12ResourceDesc1* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, ID3D12Heap*, ulong, D3D12ResourceDesc1*, D3D12BarrierLayout, D3D12ClearValue*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (ID3D12Heap*)ppHeap, heapOffset, (D3D12ResourceDesc1*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riid, ppvResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, riid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] DxgiFormat* pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, pCastableFormats, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, pOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, pProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
			{
				fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, pOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
				{
					fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateReservedResource2")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateReservedResource2([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialLayout")] [NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")] D3D12BarrierLayout initialLayout, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pProtectedSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedSession, [NativeName(NativeNameType.Param, "NumCastableFormats")] [NativeName(NativeNameType.Type, "UINT32")] uint numCastableFormats, [NativeName(NativeNameType.Param, "pCastableFormats")] [NativeName(NativeNameType.Type, "DXGI_FORMAT*")] ref DxgiFormat pCastableFormats, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppvResource")] [NativeName(NativeNameType.Type, "void**")] void** ppvResource)
		{
			ID3D12Device10* ptr = (ID3D12Device10*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedSession = &pProtectedSession)
					{
						fixed (DxgiFormat* ppCastableFormats = &pCastableFormats)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12Device10*, D3D12ResourceDesc*, D3D12BarrierLayout, D3D12ClearValue*, ID3D12ProtectedResourceSession*, uint, DxgiFormat*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12ResourceDesc*)ppDesc, initialLayout, (D3D12ClearValue*)ppOptimizedClearValue, (ID3D12ProtectedResourceSession*)ppProtectedSession, numCastableFormats, (DxgiFormat*)ppCastableFormats, (Guid*)priid, ppvResource);
								return ret;
							}
						}
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Device9 (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device9>(ref value);
		}

		public unsafe static implicit operator ID3D12Device8 (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device8>(ref value);
		}

		public unsafe static implicit operator ID3D12Device7 (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device7>(ref value);
		}

		public unsafe static implicit operator ID3D12Device6 (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device6>(ref value);
		}

		public unsafe static implicit operator ID3D12Device5 (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device5>(ref value);
		}

		public unsafe static implicit operator ID3D12Device4 (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device4>(ref value);
		}

		public unsafe static implicit operator ID3D12Device3 (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device3>(ref value);
		}

		public unsafe static implicit operator ID3D12Device2 (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device2>(ref value);
		}

		public unsafe static implicit operator ID3D12Device1 (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device1>(ref value);
		}

		public unsafe static implicit operator ID3D12Device (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Device>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Device10 value)
		{
			return Unsafe.As<ID3D12Device10, IUnknown>(ref value);
		}

	}

	[Guid("bc66d368-7373-4943-8757-fc87dc79e476")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VirtualizationGuestDevice")]
	public partial struct ID3D12VirtualizationGuestDevice : IComObject, IComObject<ID3D12VirtualizationGuestDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("bc66d368-7373-4943-8757-fc87dc79e476");

		public unsafe ID3D12VirtualizationGuestDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "ShareWithHost")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ShareWithHost([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ID3D12DeviceChild* pObject, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] nint* pHandle)
		{
			ID3D12VirtualizationGuestDevice* ptr = (ID3D12VirtualizationGuestDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VirtualizationGuestDevice*, ID3D12DeviceChild*, nint*, HResult>)(*LpVtbl))(ptr, pObject, pHandle);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ShareWithHost")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ShareWithHost([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ref ID3D12DeviceChild pObject, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] nint* pHandle)
		{
			ID3D12VirtualizationGuestDevice* ptr = (ID3D12VirtualizationGuestDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VirtualizationGuestDevice*, ID3D12DeviceChild*, nint*, HResult>)(*LpVtbl))(ptr, (ID3D12DeviceChild*)ppObject, pHandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ShareWithHost")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ShareWithHost([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ID3D12DeviceChild* pObject, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] ref nint pHandle)
		{
			ID3D12VirtualizationGuestDevice* ptr = (ID3D12VirtualizationGuestDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nint* ppHandle = &pHandle)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VirtualizationGuestDevice*, ID3D12DeviceChild*, nint*, HResult>)(*LpVtbl))(ptr, pObject, (nint*)ppHandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ShareWithHost")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ShareWithHost([NativeName(NativeNameType.Param, "pObject")] [NativeName(NativeNameType.Type, "ID3D12DeviceChild*")] ref ID3D12DeviceChild pObject, [NativeName(NativeNameType.Param, "pHandle")] [NativeName(NativeNameType.Type, "HANDLE*")] ref nint pHandle)
		{
			ID3D12VirtualizationGuestDevice* ptr = (ID3D12VirtualizationGuestDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12DeviceChild* ppObject = &pObject)
			{
				fixed (nint* ppHandle = &pHandle)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VirtualizationGuestDevice*, ID3D12DeviceChild*, nint*, HResult>)(*LpVtbl))(ptr, (ID3D12DeviceChild*)ppObject, (nint*)ppHandle);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateFenceFd")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateFenceFd([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ID3D12Fence* pFence, [NativeName(NativeNameType.Param, "FenceValue")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValue, [NativeName(NativeNameType.Param, "pFenceFd")] [NativeName(NativeNameType.Type, "int*")] int* pFenceFd)
		{
			ID3D12VirtualizationGuestDevice* ptr = (ID3D12VirtualizationGuestDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VirtualizationGuestDevice*, ID3D12Fence*, ulong, int*, HResult>)(LpVtbl[1]))(ptr, pFence, fenceValue, pFenceFd);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateFenceFd")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateFenceFd([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ref ID3D12Fence pFence, [NativeName(NativeNameType.Param, "FenceValue")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValue, [NativeName(NativeNameType.Param, "pFenceFd")] [NativeName(NativeNameType.Type, "int*")] int* pFenceFd)
		{
			ID3D12VirtualizationGuestDevice* ptr = (ID3D12VirtualizationGuestDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VirtualizationGuestDevice*, ID3D12Fence*, ulong, int*, HResult>)(LpVtbl[1]))(ptr, (ID3D12Fence*)ppFence, fenceValue, pFenceFd);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateFenceFd")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateFenceFd([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ID3D12Fence* pFence, [NativeName(NativeNameType.Param, "FenceValue")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValue, [NativeName(NativeNameType.Param, "pFenceFd")] [NativeName(NativeNameType.Type, "int*")] ref int pFenceFd)
		{
			ID3D12VirtualizationGuestDevice* ptr = (ID3D12VirtualizationGuestDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (int* ppFenceFd = &pFenceFd)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VirtualizationGuestDevice*, ID3D12Fence*, ulong, int*, HResult>)(LpVtbl[1]))(ptr, pFence, fenceValue, (int*)ppFenceFd);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateFenceFd")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateFenceFd([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ref ID3D12Fence pFence, [NativeName(NativeNameType.Param, "FenceValue")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValue, [NativeName(NativeNameType.Param, "pFenceFd")] [NativeName(NativeNameType.Type, "int*")] ref int pFenceFd)
		{
			ID3D12VirtualizationGuestDevice* ptr = (ID3D12VirtualizationGuestDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				fixed (int* ppFenceFd = &pFenceFd)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VirtualizationGuestDevice*, ID3D12Fence*, ulong, int*, HResult>)(LpVtbl[1]))(ptr, (ID3D12Fence*)ppFence, fenceValue, (int*)ppFenceFd);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12VirtualizationGuestDevice value)
		{
			return Unsafe.As<ID3D12VirtualizationGuestDevice, IUnknown>(ref value);
		}

	}

	[Guid("7071e1f0-e84b-4b33-974f-12fa49de65c5")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Tools")]
	public partial struct ID3D12Tools : IComObject, IComObject<ID3D12Tools>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("7071e1f0-e84b-4b33-974f-12fa49de65c5");

		public unsafe ID3D12Tools (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "EnableShaderInstrumentation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EnableShaderInstrumentation([NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable)
		{
			ID3D12Tools* ptr = (ID3D12Tools*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Tools*, int, void>)(*LpVtbl))(ptr, bEnable);
		}

		[NativeName(NativeNameType.Func, "ShaderInstrumentationEnabled")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int ShaderInstrumentationEnabled()
		{
			ID3D12Tools* ptr = (ID3D12Tools*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12Tools*, int>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12Tools value)
		{
			return Unsafe.As<ID3D12Tools, IUnknown>(ref value);
		}

	}

	[Guid("e9eb5314-33aa-42b2-a718-d77f58b1f1c7")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12SDKConfiguration")]
	public partial struct ID3D12SDKConfiguration : IComObject, IComObject<ID3D12SDKConfiguration>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("e9eb5314-33aa-42b2-a718-d77f58b1f1c7");

		public unsafe ID3D12SDKConfiguration (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetSDKVersion")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetSDKVersion([NativeName(NativeNameType.Param, "SDKVersion")] [NativeName(NativeNameType.Type, "UINT")] uint sDKVersion, [NativeName(NativeNameType.Param, "SDKPath")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* sDKPath)
		{
			ID3D12SDKConfiguration* ptr = (ID3D12SDKConfiguration*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12SDKConfiguration*, uint, byte*, HResult>)(*LpVtbl))(ptr, sDKVersion, sDKPath);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12SDKConfiguration value)
		{
			return Unsafe.As<ID3D12SDKConfiguration, IUnknown>(ref value);
		}

	}

	[Guid("55050859-4024-474c-87f5-6472eaee44ea")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12GraphicsCommandList5")]
	public partial struct ID3D12GraphicsCommandList5 : IComObject, IComObject<ID3D12GraphicsCommandList5>, IComObject<ID3D12GraphicsCommandList4>, IComObject<ID3D12GraphicsCommandList3>, IComObject<ID3D12GraphicsCommandList2>, IComObject<ID3D12GraphicsCommandList1>, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("55050859-4024-474c-87f5-6472eaee44ea");

		public unsafe ID3D12GraphicsCommandList5 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "RSSetShadingRate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void RSSetShadingRate([NativeName(NativeNameType.Param, "baseShadingRate")] [NativeName(NativeNameType.Type, "D3D12_SHADING_RATE")] D3D12ShadingRate baseShadingRate, [NativeName(NativeNameType.Param, "combiners")] [NativeName(NativeNameType.Type, "const D3D12_SHADING_RATE_COMBINER*")] D3D12ShadingRateCombiner* combiners)
		{
			ID3D12GraphicsCommandList5* ptr = (ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, D3D12ShadingRate, D3D12ShadingRateCombiner*, void>)(LpVtbl[9]))(ptr, baseShadingRate, combiners);
		}

		[NativeName(NativeNameType.Func, "RSSetShadingRate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void RSSetShadingRate([NativeName(NativeNameType.Param, "baseShadingRate")] [NativeName(NativeNameType.Type, "D3D12_SHADING_RATE")] D3D12ShadingRate baseShadingRate, [NativeName(NativeNameType.Param, "combiners")] [NativeName(NativeNameType.Type, "const D3D12_SHADING_RATE_COMBINER*")] ref D3D12ShadingRateCombiner combiners)
		{
			ID3D12GraphicsCommandList5* ptr = (ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShadingRateCombiner* pcombiners = &combiners)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, D3D12ShadingRate, D3D12ShadingRateCombiner*, void>)(LpVtbl[9]))(ptr, baseShadingRate, (D3D12ShadingRateCombiner*)pcombiners);
			}
		}

		[NativeName(NativeNameType.Func, "RSSetShadingRateImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void RSSetShadingRateImage([NativeName(NativeNameType.Param, "shadingRateImage")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* shadingRateImage)
		{
			ID3D12GraphicsCommandList5* ptr = (ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, void>)(LpVtbl[10]))(ptr, shadingRateImage);
		}

		[NativeName(NativeNameType.Func, "RSSetShadingRateImage")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void RSSetShadingRateImage([NativeName(NativeNameType.Param, "shadingRateImage")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource shadingRateImage)
		{
			ID3D12GraphicsCommandList5* ptr = (ID3D12GraphicsCommandList5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* pshadingRateImage = &shadingRateImage)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList5*, ID3D12Resource*, void>)(LpVtbl[10]))(ptr, (ID3D12Resource*)pshadingRateImage);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList4 (ID3D12GraphicsCommandList5 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList5, ID3D12GraphicsCommandList4>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList3 (ID3D12GraphicsCommandList5 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList5, ID3D12GraphicsCommandList3>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList2 (ID3D12GraphicsCommandList5 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList5, ID3D12GraphicsCommandList2>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList1 (ID3D12GraphicsCommandList5 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList5, ID3D12GraphicsCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList (ID3D12GraphicsCommandList5 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList5, ID3D12GraphicsCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList5 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList5, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList5 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList5, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList5 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList5, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList5 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList5, IUnknown>(ref value);
		}

	}

	[Guid("c3827890-e548-4cfa-96cf-5689a9370f80")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12GraphicsCommandList6")]
	public partial struct ID3D12GraphicsCommandList6 : IComObject, IComObject<ID3D12GraphicsCommandList6>, IComObject<ID3D12GraphicsCommandList5>, IComObject<ID3D12GraphicsCommandList4>, IComObject<ID3D12GraphicsCommandList3>, IComObject<ID3D12GraphicsCommandList2>, IComObject<ID3D12GraphicsCommandList1>, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c3827890-e548-4cfa-96cf-5689a9370f80");

		public unsafe ID3D12GraphicsCommandList6 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "DispatchMesh")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DispatchMesh([NativeName(NativeNameType.Param, "ThreadGroupCountX")] [NativeName(NativeNameType.Type, "UINT")] uint threadGroupCountX, [NativeName(NativeNameType.Param, "ThreadGroupCountY")] [NativeName(NativeNameType.Type, "UINT")] uint threadGroupCountY, [NativeName(NativeNameType.Param, "ThreadGroupCountZ")] [NativeName(NativeNameType.Type, "UINT")] uint threadGroupCountZ)
		{
			ID3D12GraphicsCommandList6* ptr = (ID3D12GraphicsCommandList6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList6*, uint, uint, uint, void>)(LpVtbl[2]))(ptr, threadGroupCountX, threadGroupCountY, threadGroupCountZ);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList5 (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, ID3D12GraphicsCommandList5>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList4 (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, ID3D12GraphicsCommandList4>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList3 (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, ID3D12GraphicsCommandList3>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList2 (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, ID3D12GraphicsCommandList2>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList1 (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, ID3D12GraphicsCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, ID3D12GraphicsCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList6 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList6, IUnknown>(ref value);
		}

	}

	[Guid("dd171223-8b61-4769-90e3-160ccde4e2c1")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12GraphicsCommandList7")]
	public partial struct ID3D12GraphicsCommandList7 : IComObject, IComObject<ID3D12GraphicsCommandList7>, IComObject<ID3D12GraphicsCommandList6>, IComObject<ID3D12GraphicsCommandList5>, IComObject<ID3D12GraphicsCommandList4>, IComObject<ID3D12GraphicsCommandList3>, IComObject<ID3D12GraphicsCommandList2>, IComObject<ID3D12GraphicsCommandList1>, IComObject<ID3D12GraphicsCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("dd171223-8b61-4769-90e3-160ccde4e2c1");

		public unsafe ID3D12GraphicsCommandList7 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "Barrier")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void Barrier([NativeName(NativeNameType.Param, "NumBarrierGroups")] [NativeName(NativeNameType.Type, "UINT32")] uint numBarrierGroups, [NativeName(NativeNameType.Param, "pBarrierGroups")] [NativeName(NativeNameType.Type, "const D3D12_BARRIER_GROUP*")] D3D12BarrierGroup* pBarrierGroups)
		{
			ID3D12GraphicsCommandList7* ptr = (ID3D12GraphicsCommandList7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, D3D12BarrierGroup*, void>)(LpVtbl[1]))(ptr, numBarrierGroups, pBarrierGroups);
		}

		[NativeName(NativeNameType.Func, "Barrier")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void Barrier([NativeName(NativeNameType.Param, "NumBarrierGroups")] [NativeName(NativeNameType.Type, "UINT32")] uint numBarrierGroups, [NativeName(NativeNameType.Param, "pBarrierGroups")] [NativeName(NativeNameType.Type, "const D3D12_BARRIER_GROUP*")] ref D3D12BarrierGroup pBarrierGroups)
		{
			ID3D12GraphicsCommandList7* ptr = (ID3D12GraphicsCommandList7*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12BarrierGroup* ppBarrierGroups = &pBarrierGroups)
			{
				((delegate* unmanaged[Stdcall]<ID3D12GraphicsCommandList7*, uint, D3D12BarrierGroup*, void>)(LpVtbl[1]))(ptr, numBarrierGroups, (D3D12BarrierGroup*)ppBarrierGroups);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList6 (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12GraphicsCommandList6>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList5 (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12GraphicsCommandList5>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList4 (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12GraphicsCommandList4>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList3 (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12GraphicsCommandList3>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList2 (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12GraphicsCommandList2>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList1 (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12GraphicsCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12GraphicsCommandList (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12GraphicsCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12GraphicsCommandList7 value)
		{
			return Unsafe.As<ID3D12GraphicsCommandList7, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BARRIER_GROUP")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BarrierGroup
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12BarrierGroupUnion
		{
			[NativeName(NativeNameType.Field, "pGlobalBarriers")]
			[NativeName(NativeNameType.Type, "const D3D12_GLOBAL_BARRIER*")]
			[FieldOffset(0)]
			public unsafe D3D12GlobalBarrier* PGlobalBarriers;
			[NativeName(NativeNameType.Field, "pTextureBarriers")]
			[NativeName(NativeNameType.Type, "const D3D12_TEXTURE_BARRIER*")]
			[FieldOffset(0)]
			public unsafe D3D12TextureBarrier* PTextureBarriers;
			[NativeName(NativeNameType.Field, "pBufferBarriers")]
			[NativeName(NativeNameType.Type, "const D3D12_BUFFER_BARRIER*")]
			[FieldOffset(0)]
			public unsafe D3D12BufferBarrier* PBufferBarriers;


		}

		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_TYPE")]
		public D3D12BarrierType Type;
		[NativeName(NativeNameType.Field, "NumBarriers")]
		[NativeName(NativeNameType.Type, "UINT32")]
		public uint NumBarriers;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12BarrierGroupUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_GLOBAL_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12GlobalBarrier
	{
		[NativeName(NativeNameType.Field, "SyncBefore")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_SYNC")]
		public D3D12BarrierSync SyncBefore;
		[NativeName(NativeNameType.Field, "SyncAfter")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_SYNC")]
		public D3D12BarrierSync SyncAfter;
		[NativeName(NativeNameType.Field, "AccessBefore")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_ACCESS")]
		public D3D12BarrierAccess AccessBefore;
		[NativeName(NativeNameType.Field, "AccessAfter")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_ACCESS")]
		public D3D12BarrierAccess AccessAfter;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_TEXTURE_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12TextureBarrier
	{
		[NativeName(NativeNameType.Field, "SyncBefore")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_SYNC")]
		public D3D12BarrierSync SyncBefore;
		[NativeName(NativeNameType.Field, "SyncAfter")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_SYNC")]
		public D3D12BarrierSync SyncAfter;
		[NativeName(NativeNameType.Field, "AccessBefore")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_ACCESS")]
		public D3D12BarrierAccess AccessBefore;
		[NativeName(NativeNameType.Field, "AccessAfter")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_ACCESS")]
		public D3D12BarrierAccess AccessAfter;
		[NativeName(NativeNameType.Field, "LayoutBefore")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")]
		public D3D12BarrierLayout LayoutBefore;
		[NativeName(NativeNameType.Field, "LayoutAfter")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_LAYOUT")]
		public D3D12BarrierLayout LayoutAfter;
		[NativeName(NativeNameType.Field, "pResource")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PResource;
		[NativeName(NativeNameType.Field, "Subresources")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_SUBRESOURCE_RANGE")]
		public D3D12BarrierSubresourceRange Subresources;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_TEXTURE_BARRIER_FLAGS")]
		public D3D12TextureBarrierFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BARRIER_SUBRESOURCE_RANGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BarrierSubresourceRange
	{
		[NativeName(NativeNameType.Field, "IndexOrFirstMipLevel")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IndexOrFirstMipLevel;
		[NativeName(NativeNameType.Field, "NumMipLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumMipLevels;
		[NativeName(NativeNameType.Field, "FirstArraySlice")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstArraySlice;
		[NativeName(NativeNameType.Field, "NumArraySlices")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumArraySlices;
		[NativeName(NativeNameType.Field, "FirstPlane")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstPlane;
		[NativeName(NativeNameType.Field, "NumPlanes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumPlanes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BUFFER_BARRIER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BufferBarrier
	{
		[NativeName(NativeNameType.Field, "SyncBefore")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_SYNC")]
		public D3D12BarrierSync SyncBefore;
		[NativeName(NativeNameType.Field, "SyncAfter")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_SYNC")]
		public D3D12BarrierSync SyncAfter;
		[NativeName(NativeNameType.Field, "AccessBefore")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_ACCESS")]
		public D3D12BarrierAccess AccessBefore;
		[NativeName(NativeNameType.Field, "AccessAfter")]
		[NativeName(NativeNameType.Type, "D3D12_BARRIER_ACCESS")]
		public D3D12BarrierAccess AccessAfter;
		[NativeName(NativeNameType.Field, "pResource")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PResource;
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Size;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEPTH_STENCIL_DESC1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DepthStencilDesc1
	{
		[NativeName(NativeNameType.Field, "DepthEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DepthEnable;
		[NativeName(NativeNameType.Field, "DepthWriteMask")]
		[NativeName(NativeNameType.Type, "D3D12_DEPTH_WRITE_MASK")]
		public D3D12DepthWriteMask DepthWriteMask;
		[NativeName(NativeNameType.Field, "DepthFunc")]
		[NativeName(NativeNameType.Type, "D3D12_COMPARISON_FUNC")]
		public D3D12ComparisonFunc DepthFunc;
		[NativeName(NativeNameType.Field, "StencilEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int StencilEnable;
		[NativeName(NativeNameType.Field, "StencilReadMask")]
		[NativeName(NativeNameType.Type, "UINT8")]
		public byte StencilReadMask;
		[NativeName(NativeNameType.Field, "StencilWriteMask")]
		[NativeName(NativeNameType.Type, "UINT8")]
		public byte StencilWriteMask;
		[NativeName(NativeNameType.Field, "FrontFace")]
		[NativeName(NativeNameType.Type, "D3D12_DEPTH_STENCILOP_DESC")]
		public D3D12DepthStencilopDesc FrontFace;
		[NativeName(NativeNameType.Field, "BackFace")]
		[NativeName(NativeNameType.Type, "D3D12_DEPTH_STENCILOP_DESC")]
		public D3D12DepthStencilopDesc BackFace;
		[NativeName(NativeNameType.Field, "DepthBoundsTestEnable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DepthBoundsTestEnable;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RT_FORMAT_ARRAY")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RtFormatArray
	{
		[NativeName(NativeNameType.Field, "RTFormats")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT[8]")]
		public DxgiFormat RTFormats_0;
		public DxgiFormat RTFormats_1;
		public DxgiFormat RTFormats_2;
		public DxgiFormat RTFormats_3;
		public DxgiFormat RTFormats_4;
		public DxgiFormat RTFormats_5;
		public DxgiFormat RTFormats_6;
		public DxgiFormat RTFormats_7;
		[NativeName(NativeNameType.Field, "NumRenderTargets")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumRenderTargets;


		public unsafe Span<DxgiFormat> RTFormats
		
		{
			get
			{
				fixed (DxgiFormat* p = &this.RTFormats_0)
				{
					return new Span<DxgiFormat>(p, 8);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options
	{
		[NativeName(NativeNameType.Field, "DoublePrecisionFloatShaderOps")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DoublePrecisionFloatShaderOps;
		[NativeName(NativeNameType.Field, "OutputMergerLogicOp")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int OutputMergerLogicOp;
		[NativeName(NativeNameType.Field, "MinPrecisionSupport")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_MIN_PRECISION_SUPPORT")]
		public D3D12ShaderMinPrecisionSupport MinPrecisionSupport;
		[NativeName(NativeNameType.Field, "TiledResourcesTier")]
		[NativeName(NativeNameType.Type, "D3D12_TILED_RESOURCES_TIER")]
		public D3D12TiledResourcesTier TiledResourcesTier;
		[NativeName(NativeNameType.Field, "ResourceBindingTier")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_BINDING_TIER")]
		public D3D12ResourceBindingTier ResourceBindingTier;
		[NativeName(NativeNameType.Field, "PSSpecifiedStencilRefSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int PSSpecifiedStencilRefSupported;
		[NativeName(NativeNameType.Field, "TypedUAVLoadAdditionalFormats")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int TypedUAVLoadAdditionalFormats;
		[NativeName(NativeNameType.Field, "ROVsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ROVsSupported;
		[NativeName(NativeNameType.Field, "ConservativeRasterizationTier")]
		[NativeName(NativeNameType.Type, "D3D12_CONSERVATIVE_RASTERIZATION_TIER")]
		public D3D12ConservativeRasterizationTier ConservativeRasterizationTier;
		[NativeName(NativeNameType.Field, "MaxGPUVirtualAddressBitsPerResource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxGPUVirtualAddressBitsPerResource;
		[NativeName(NativeNameType.Field, "StandardSwizzle64KBSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int StandardSwizzle64KBSupported;
		[NativeName(NativeNameType.Field, "CrossNodeSharingTier")]
		[NativeName(NativeNameType.Type, "D3D12_CROSS_NODE_SHARING_TIER")]
		public D3D12CrossNodeSharingTier CrossNodeSharingTier;
		[NativeName(NativeNameType.Field, "CrossAdapterRowMajorTextureSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int CrossAdapterRowMajorTextureSupported;
		[NativeName(NativeNameType.Field, "VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
		[NativeName(NativeNameType.Field, "ResourceHeapTier")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_HEAP_TIER")]
		public D3D12ResourceHeapTier ResourceHeapTier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options1
	{
		[NativeName(NativeNameType.Field, "WaveOps")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int WaveOps;
		[NativeName(NativeNameType.Field, "WaveLaneCountMin")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint WaveLaneCountMin;
		[NativeName(NativeNameType.Field, "WaveLaneCountMax")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint WaveLaneCountMax;
		[NativeName(NativeNameType.Field, "TotalLaneCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TotalLaneCount;
		[NativeName(NativeNameType.Field, "ExpandedComputeResourceStates")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int ExpandedComputeResourceStates;
		[NativeName(NativeNameType.Field, "Int64ShaderOps")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Int64ShaderOps;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options2
	{
		[NativeName(NativeNameType.Field, "DepthBoundsTestSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DepthBoundsTestSupported;
		[NativeName(NativeNameType.Field, "ProgrammableSamplePositionsTier")]
		[NativeName(NativeNameType.Type, "D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER")]
		public D3D12ProgrammableSamplePositionsTier ProgrammableSamplePositionsTier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_ROOT_SIGNATURE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataRootSignature
	{
		[NativeName(NativeNameType.Field, "HighestVersion")]
		[NativeName(NativeNameType.Type, "D3D_ROOT_SIGNATURE_VERSION")]
		public D3DRootSignatureVersion HighestVersion;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_ARCHITECTURE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataArchitecture
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "TileBasedRenderer")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int TileBasedRenderer;
		[NativeName(NativeNameType.Field, "UMA")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int UMA;
		[NativeName(NativeNameType.Field, "CacheCoherentUMA")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int CacheCoherentUMA;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_ARCHITECTURE1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataArchitecture1
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "TileBasedRenderer")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int TileBasedRenderer;
		[NativeName(NativeNameType.Field, "UMA")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int UMA;
		[NativeName(NativeNameType.Field, "CacheCoherentUMA")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int CacheCoherentUMA;
		[NativeName(NativeNameType.Field, "IsolatedMMU")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsolatedMMU;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_FEATURE_LEVELS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataFeatureLevels
	{
		[NativeName(NativeNameType.Field, "NumFeatureLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumFeatureLevels;
		[NativeName(NativeNameType.Field, "pFeatureLevelsRequested")]
		[NativeName(NativeNameType.Type, "const D3D_FEATURE_LEVEL*")]
		public unsafe D3DFeatureLevel* PFeatureLevelsRequested;
		[NativeName(NativeNameType.Field, "MaxSupportedFeatureLevel")]
		[NativeName(NativeNameType.Type, "D3D_FEATURE_LEVEL")]
		public D3DFeatureLevel MaxSupportedFeatureLevel;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_SHADER_MODEL")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataShaderModel
	{
		[NativeName(NativeNameType.Field, "HighestShaderModel")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_MODEL")]
		public D3DShaderModel HighestShaderModel;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_FORMAT_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataFormatSupport
	{
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "Support1")]
		[NativeName(NativeNameType.Type, "D3D12_FORMAT_SUPPORT1")]
		public D3D12FormatSupport1 Support1;
		[NativeName(NativeNameType.Field, "Support2")]
		[NativeName(NativeNameType.Type, "D3D12_FORMAT_SUPPORT2")]
		public D3D12FormatSupport2 Support2;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataMultisampleQualityLevels
	{
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "SampleCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SampleCount;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS")]
		public D3D12MultisampleQualityLevelFlags Flags;
		[NativeName(NativeNameType.Field, "NumQualityLevels")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumQualityLevels;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_FORMAT_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataFormatInfo
	{
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "PlaneCount")]
		[NativeName(NativeNameType.Type, "UINT8")]
		public byte PlaneCount;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataGpuVirtualAddressSupport
	{
		[NativeName(NativeNameType.Field, "MaxGPUVirtualAddressBitsPerResource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxGPUVirtualAddressBitsPerResource;
		[NativeName(NativeNameType.Field, "MaxGPUVirtualAddressBitsPerProcess")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxGPUVirtualAddressBitsPerProcess;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_SHADER_CACHE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataShaderCache
	{
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_CACHE_SUPPORT_FLAGS")]
		public D3D12ShaderCacheSupportFlags SupportFlags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataCommandQueuePriority
	{
		[NativeName(NativeNameType.Field, "CommandListType")]
		[NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_TYPE")]
		public D3D12CommandListType CommandListType;
		[NativeName(NativeNameType.Field, "Priority")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Priority;
		[NativeName(NativeNameType.Field, "PriorityForTypeIsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int PriorityForTypeIsSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS3")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options3
	{
		[NativeName(NativeNameType.Field, "CopyQueueTimestampQueriesSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int CopyQueueTimestampQueriesSupported;
		[NativeName(NativeNameType.Field, "CastingFullyTypedFormatSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int CastingFullyTypedFormatSupported;
		[NativeName(NativeNameType.Field, "WriteBufferImmediateSupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_SUPPORT_FLAGS")]
		public D3D12CommandListSupportFlags WriteBufferImmediateSupportFlags;
		[NativeName(NativeNameType.Field, "ViewInstancingTier")]
		[NativeName(NativeNameType.Type, "D3D12_VIEW_INSTANCING_TIER")]
		public D3D12ViewInstancingTier ViewInstancingTier;
		[NativeName(NativeNameType.Field, "BarycentricsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int BarycentricsSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_EXISTING_HEAPS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataExistingHeaps
	{
		[NativeName(NativeNameType.Field, "Supported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Supported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_DISPLAYABLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataDisplayable
	{
		[NativeName(NativeNameType.Field, "DisplayableTexture")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DisplayableTexture;
		[NativeName(NativeNameType.Field, "SharedResourceCompatibilityTier")]
		[NativeName(NativeNameType.Type, "D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER")]
		public D3D12SharedResourceCompatibilityTier SharedResourceCompatibilityTier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS4")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options4
	{
		[NativeName(NativeNameType.Field, "MSAA64KBAlignedTextureSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MSAA64KBAlignedTextureSupported;
		[NativeName(NativeNameType.Field, "SharedResourceCompatibilityTier")]
		[NativeName(NativeNameType.Type, "D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER")]
		public D3D12SharedResourceCompatibilityTier SharedResourceCompatibilityTier;
		[NativeName(NativeNameType.Field, "Native16BitShaderOpsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Native16BitShaderOpsSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_SERIALIZATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataSerialization
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "HeapSerializationTier")]
		[NativeName(NativeNameType.Type, "D3D12_HEAP_SERIALIZATION_TIER")]
		public D3D12HeapSerializationTier HeapSerializationTier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_CROSS_NODE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataCrossNode
	{
		[NativeName(NativeNameType.Field, "SharingTier")]
		[NativeName(NativeNameType.Type, "D3D12_CROSS_NODE_SHARING_TIER")]
		public D3D12CrossNodeSharingTier SharingTier;
		[NativeName(NativeNameType.Field, "AtomicShaderInstructions")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AtomicShaderInstructions;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS5")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options5
	{
		[NativeName(NativeNameType.Field, "SRVOnlyTiledResourceTier3")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int SRVOnlyTiledResourceTier3;
		[NativeName(NativeNameType.Field, "RenderPassesTier")]
		[NativeName(NativeNameType.Type, "D3D12_RENDER_PASS_TIER")]
		public D3D12RenderPassTier RenderPassesTier;
		[NativeName(NativeNameType.Field, "RaytracingTier")]
		[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_TIER")]
		public D3D12RaytracingTier RaytracingTier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS6")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options6
	{
		[NativeName(NativeNameType.Field, "AdditionalShadingRatesSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AdditionalShadingRatesSupported;
		[NativeName(NativeNameType.Field, "PerPrimitiveShadingRateSupportedWithViewportIndexing")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int PerPrimitiveShadingRateSupportedWithViewportIndexing;
		[NativeName(NativeNameType.Field, "VariableShadingRateTier")]
		[NativeName(NativeNameType.Type, "D3D12_VARIABLE_SHADING_RATE_TIER")]
		public D3D12VariableShadingRateTier VariableShadingRateTier;
		[NativeName(NativeNameType.Field, "ShadingRateImageTileSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ShadingRateImageTileSize;
		[NativeName(NativeNameType.Field, "BackgroundProcessingSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int BackgroundProcessingSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS7")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options7
	{
		[NativeName(NativeNameType.Field, "MeshShaderTier")]
		[NativeName(NativeNameType.Type, "D3D12_MESH_SHADER_TIER")]
		public D3D12MeshShaderTier MeshShaderTier;
		[NativeName(NativeNameType.Field, "SamplerFeedbackTier")]
		[NativeName(NativeNameType.Type, "D3D12_SAMPLER_FEEDBACK_TIER")]
		public D3D12SamplerFeedbackTier SamplerFeedbackTier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_QUERY_META_COMMAND")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataQueryMetaCommand
	{
		[NativeName(NativeNameType.Field, "CommandId")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid CommandId;
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "pQueryInputData")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PQueryInputData;
		[NativeName(NativeNameType.Field, "QueryInputDataSizeInBytes")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint QueryInputDataSizeInBytes;
		[NativeName(NativeNameType.Field, "pQueryOutputData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PQueryOutputData;
		[NativeName(NativeNameType.Field, "QueryOutputDataSizeInBytes")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint QueryOutputDataSizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS8")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options8
	{
		[NativeName(NativeNameType.Field, "UnalignedBlockTexturesSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int UnalignedBlockTexturesSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS9")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options9
	{
		[NativeName(NativeNameType.Field, "MeshShaderPipelineStatsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MeshShaderPipelineStatsSupported;
		[NativeName(NativeNameType.Field, "MeshShaderSupportsFullRangeRenderTargetArrayIndex")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MeshShaderSupportsFullRangeRenderTargetArrayIndex;
		[NativeName(NativeNameType.Field, "AtomicInt64OnTypedResourceSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AtomicInt64OnTypedResourceSupported;
		[NativeName(NativeNameType.Field, "AtomicInt64OnGroupSharedSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AtomicInt64OnGroupSharedSupported;
		[NativeName(NativeNameType.Field, "DerivativesInMeshAndAmplificationShadersSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int DerivativesInMeshAndAmplificationShadersSupported;
		[NativeName(NativeNameType.Field, "WaveMMATier")]
		[NativeName(NativeNameType.Type, "D3D12_WAVE_MMA_TIER")]
		public D3D12WaveMmaTier WaveMMATier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS10")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options10
	{
		[NativeName(NativeNameType.Field, "VariableRateShadingSumCombinerSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int VariableRateShadingSumCombinerSupported;
		[NativeName(NativeNameType.Field, "MeshShaderPerPrimitiveShadingRateSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int MeshShaderPerPrimitiveShadingRateSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS11")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options11
	{
		[NativeName(NativeNameType.Field, "AtomicInt64OnDescriptorHeapResourceSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AtomicInt64OnDescriptorHeapResourceSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS12")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options12
	{
		[NativeName(NativeNameType.Field, "MSPrimitivesPipelineStatisticIncludesCulledPrimitives")]
		[NativeName(NativeNameType.Type, "D3D12_TRI_STATE")]
		public D3D12TriState MSPrimitivesPipelineStatisticIncludesCulledPrimitives;
		[NativeName(NativeNameType.Field, "EnhancedBarriersSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int EnhancedBarriersSupported;
		[NativeName(NativeNameType.Field, "RelaxedFormatCastingSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int RelaxedFormatCastingSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_D3D12_OPTIONS13")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataD3D12Options13
	{
		[NativeName(NativeNameType.Field, "UnrestrictedBufferTextureCopyPitchSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int UnrestrictedBufferTextureCopyPitchSupported;
		[NativeName(NativeNameType.Field, "UnrestrictedVertexElementAlignmentSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int UnrestrictedVertexElementAlignmentSupported;
		[NativeName(NativeNameType.Field, "InvertedViewportHeightFlipsYSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int InvertedViewportHeightFlipsYSupported;
		[NativeName(NativeNameType.Field, "InvertedViewportDepthFlipsZSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int InvertedViewportDepthFlipsZSupported;
		[NativeName(NativeNameType.Field, "TextureCopyBetweenDimensionsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int TextureCopyBetweenDimensionsSupported;
		[NativeName(NativeNameType.Field, "AlphaBlendFactorSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int AlphaBlendFactorSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SUBRESOURCE_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SubresourceInfo
	{
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "RowPitch")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RowPitch;
		[NativeName(NativeNameType.Field, "DepthPitch")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DepthPitch;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIEW_INSTANCE_LOCATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ViewInstanceLocation
	{
		[NativeName(NativeNameType.Field, "ViewportArrayIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ViewportArrayIndex;
		[NativeName(NativeNameType.Field, "RenderTargetArrayIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RenderTargetArrayIndex;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIEW_INSTANCING_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ViewInstancingDesc
	{
		[NativeName(NativeNameType.Field, "ViewInstanceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ViewInstanceCount;
		[NativeName(NativeNameType.Field, "pViewInstanceLocations")]
		[NativeName(NativeNameType.Type, "const D3D12_VIEW_INSTANCE_LOCATION*")]
		public unsafe D3D12ViewInstanceLocation* PViewInstanceLocations;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIEW_INSTANCING_FLAGS")]
		public D3D12ViewInstancingFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_QUERY_DATA_PIPELINE_STATISTICS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12QueryDataPipelineStatistics
	{
		[NativeName(NativeNameType.Field, "IAVertices")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong IAVertices;
		[NativeName(NativeNameType.Field, "IAPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong IAPrimitives;
		[NativeName(NativeNameType.Field, "VSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong VSInvocations;
		[NativeName(NativeNameType.Field, "GSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong GSInvocations;
		[NativeName(NativeNameType.Field, "GSPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong GSPrimitives;
		[NativeName(NativeNameType.Field, "CInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CInvocations;
		[NativeName(NativeNameType.Field, "CPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CPrimitives;
		[NativeName(NativeNameType.Field, "PSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong PSInvocations;
		[NativeName(NativeNameType.Field, "HSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong HSInvocations;
		[NativeName(NativeNameType.Field, "DSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong DSInvocations;
		[NativeName(NativeNameType.Field, "CSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CSInvocations;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_QUERY_DATA_PIPELINE_STATISTICS1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12QueryDataPipelineStatistics1
	{
		[NativeName(NativeNameType.Field, "IAVertices")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong IAVertices;
		[NativeName(NativeNameType.Field, "IAPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong IAPrimitives;
		[NativeName(NativeNameType.Field, "VSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong VSInvocations;
		[NativeName(NativeNameType.Field, "GSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong GSInvocations;
		[NativeName(NativeNameType.Field, "GSPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong GSPrimitives;
		[NativeName(NativeNameType.Field, "CInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CInvocations;
		[NativeName(NativeNameType.Field, "CPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CPrimitives;
		[NativeName(NativeNameType.Field, "PSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong PSInvocations;
		[NativeName(NativeNameType.Field, "HSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong HSInvocations;
		[NativeName(NativeNameType.Field, "DSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong DSInvocations;
		[NativeName(NativeNameType.Field, "CSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CSInvocations;
		[NativeName(NativeNameType.Field, "ASInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong ASInvocations;
		[NativeName(NativeNameType.Field, "MSInvocations")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MSInvocations;
		[NativeName(NativeNameType.Field, "MSPrimitives")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MSPrimitives;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_QUERY_DATA_SO_STATISTICS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12QueryDataSoStatistics
	{
		[NativeName(NativeNameType.Field, "NumPrimitivesWritten")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong NumPrimitivesWritten;
		[NativeName(NativeNameType.Field, "PrimitivesStorageNeeded")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong PrimitivesStorageNeeded;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRAW_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DrawArguments
	{
		[NativeName(NativeNameType.Field, "VertexCountPerInstance")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint VertexCountPerInstance;
		[NativeName(NativeNameType.Field, "InstanceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstanceCount;
		[NativeName(NativeNameType.Field, "StartVertexLocation")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartVertexLocation;
		[NativeName(NativeNameType.Field, "StartInstanceLocation")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartInstanceLocation;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DRAW_INDEXED_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DrawIndexedArguments
	{
		[NativeName(NativeNameType.Field, "IndexCountPerInstance")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IndexCountPerInstance;
		[NativeName(NativeNameType.Field, "InstanceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstanceCount;
		[NativeName(NativeNameType.Field, "StartIndexLocation")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartIndexLocation;
		[NativeName(NativeNameType.Field, "BaseVertexLocation")]
		[NativeName(NativeNameType.Type, "INT")]
		public int BaseVertexLocation;
		[NativeName(NativeNameType.Field, "StartInstanceLocation")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartInstanceLocation;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DISPATCH_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DispatchArguments
	{
		[NativeName(NativeNameType.Field, "ThreadGroupCountX")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ThreadGroupCountX;
		[NativeName(NativeNameType.Field, "ThreadGroupCountY")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ThreadGroupCountY;
		[NativeName(NativeNameType.Field, "ThreadGroupCountZ")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ThreadGroupCountZ;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataProtectedResourceSessionSupport
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Support")]
		[NativeName(NativeNameType.Type, "D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS")]
		public D3D12ProtectedResourceSessionSupportFlags Support;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_STATE_OBJECT_CONFIG")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12StateObjectConfig
	{
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_STATE_OBJECT_FLAGS")]
		public D3D12StateObjectFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_GLOBAL_ROOT_SIGNATURE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12GlobalRootSignature
	{
		[NativeName(NativeNameType.Field, "pGlobalRootSignature")]
		[NativeName(NativeNameType.Type, "ID3D12RootSignature*")]
		public unsafe ID3D12RootSignature* PGlobalRootSignature;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_LOCAL_ROOT_SIGNATURE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12LocalRootSignature
	{
		[NativeName(NativeNameType.Field, "pLocalRootSignature")]
		[NativeName(NativeNameType.Type, "ID3D12RootSignature*")]
		public unsafe ID3D12RootSignature* PLocalRootSignature;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_NODE_MASK")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12NodeMask
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_EXPORT_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ExportDesc
	{
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* Name;
		[NativeName(NativeNameType.Field, "ExportToRename")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* ExportToRename;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_EXPORT_FLAGS")]
		public D3D12ExportFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DXIL_LIBRARY_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DxilLibraryDesc
	{
		[NativeName(NativeNameType.Field, "DXILLibrary")]
		[NativeName(NativeNameType.Type, "D3D12_SHADER_BYTECODE")]
		public D3D12ShaderBytecode DXILLibrary;
		[NativeName(NativeNameType.Field, "NumExports")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumExports;
		[NativeName(NativeNameType.Field, "pExports")]
		[NativeName(NativeNameType.Type, "D3D12_EXPORT_DESC*")]
		public unsafe D3D12ExportDesc* PExports;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_EXISTING_COLLECTION_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ExistingCollectionDesc
	{
		[NativeName(NativeNameType.Field, "pExistingCollection")]
		[NativeName(NativeNameType.Type, "ID3D12StateObject*")]
		public unsafe ID3D12StateObject* PExistingCollection;
		[NativeName(NativeNameType.Field, "NumExports")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumExports;
		[NativeName(NativeNameType.Field, "pExports")]
		[NativeName(NativeNameType.Type, "D3D12_EXPORT_DESC*")]
		public unsafe D3D12ExportDesc* PExports;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SubobjectToExportsAssociation
	{
		[NativeName(NativeNameType.Field, "pSubobjectToAssociate")]
		[NativeName(NativeNameType.Type, "const D3D12_STATE_SUBOBJECT*")]
		public unsafe D3D12StateSubobject* PSubobjectToAssociate;
		[NativeName(NativeNameType.Field, "NumExports")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumExports;
		[NativeName(NativeNameType.Field, "pExports")]
		[NativeName(NativeNameType.Type, "LPCWSTR*")]
		public unsafe char** PExports;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DxilSubobjectToExportsAssociation
	{
		[NativeName(NativeNameType.Field, "SubobjectToAssociate")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* SubobjectToAssociate;
		[NativeName(NativeNameType.Field, "NumExports")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumExports;
		[NativeName(NativeNameType.Field, "pExports")]
		[NativeName(NativeNameType.Type, "LPCWSTR*")]
		public unsafe char** PExports;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_HIT_GROUP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12HitGroupDesc
	{
		[NativeName(NativeNameType.Field, "HitGroupExport")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* HitGroupExport;
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_HIT_GROUP_TYPE")]
		public D3D12HitGroupType Type;
		[NativeName(NativeNameType.Field, "AnyHitShaderImport")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* AnyHitShaderImport;
		[NativeName(NativeNameType.Field, "ClosestHitShaderImport")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* ClosestHitShaderImport;
		[NativeName(NativeNameType.Field, "IntersectionShaderImport")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* IntersectionShaderImport;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_SHADER_CONFIG")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingShaderConfig
	{
		[NativeName(NativeNameType.Field, "MaxPayloadSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxPayloadSizeInBytes;
		[NativeName(NativeNameType.Field, "MaxAttributeSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxAttributeSizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_PIPELINE_CONFIG")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingPipelineConfig
	{
		[NativeName(NativeNameType.Field, "MaxTraceRecursionDepth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxTraceRecursionDepth;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_PIPELINE_CONFIG1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingPipelineConfig1
	{
		[NativeName(NativeNameType.Field, "MaxTraceRecursionDepth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxTraceRecursionDepth;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_PIPELINE_FLAGS")]
		public D3D12RaytracingPipelineFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_AABB")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingAabb
	{
		[NativeName(NativeNameType.Field, "MinX")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MinX;
		[NativeName(NativeNameType.Field, "MinY")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MinY;
		[NativeName(NativeNameType.Field, "MinZ")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MinZ;
		[NativeName(NativeNameType.Field, "MaxX")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MaxX;
		[NativeName(NativeNameType.Field, "MaxY")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MaxY;
		[NativeName(NativeNameType.Field, "MaxZ")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float MaxZ;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingAccelerationStructurePostbuildInfoCompactedSizeDesc
	{
		[NativeName(NativeNameType.Field, "CompactedSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CompactedSizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingAccelerationStructurePostbuildInfoToolsVisualizationDesc
	{
		[NativeName(NativeNameType.Field, "DecodedSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong DecodedSizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12BuildRaytracingAccelerationStructureToolsVisualizationHeader
	{
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE")]
		public D3D12RaytracingAccelerationStructureType Type;
		[NativeName(NativeNameType.Field, "NumDescs")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumDescs;


	}

	/// <summary>
	/// Regarding D3D12_BUILD_RAY_TRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER above,<br/>
	/// depending on Type field, NumDescs above is followed by either:<br/>
	/// D3D12_RAY_TRACING_INSTANCE_DESC InstanceDescs[NumDescs]<br/>
	/// or D3D12_RAY_TRACING_GEOMETRY_DESC GeometryDescs[NumDescs].<br/>
	/// There is 4 bytes of padding between GeometryDesc structs in the array so alignment is natural when viewed by CPU.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingAccelerationStructurePostbuildInfoSerializationDesc
	{
		[NativeName(NativeNameType.Field, "SerializedSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SerializedSizeInBytes;
		[NativeName(NativeNameType.Field, "NumBottomLevelAccelerationStructurePointers")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong NumBottomLevelAccelerationStructurePointers;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SerializedRaytracingAccelerationStructureHeader
	{
		[NativeName(NativeNameType.Field, "DriverMatchingIdentifier")]
		[NativeName(NativeNameType.Type, "D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER")]
		public D3D12SerializedDataDriverMatchingIdentifier DriverMatchingIdentifier;
		[NativeName(NativeNameType.Field, "SerializedSizeInBytesIncludingHeader")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SerializedSizeInBytesIncludingHeader;
		[NativeName(NativeNameType.Field, "DeserializedSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong DeserializedSizeInBytes;
		[NativeName(NativeNameType.Field, "NumBottomLevelAccelerationStructurePointersAfterHeader")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong NumBottomLevelAccelerationStructurePointersAfterHeader;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingAccelerationStructurePostbuildInfoCurrentSizeDesc
	{
		[NativeName(NativeNameType.Field, "CurrentSizeInBytes")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong CurrentSizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RAYTRACING_INSTANCE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12RaytracingInstanceDesc
	{
		[NativeName(NativeNameType.Field, "Transform")]
		[NativeName(NativeNameType.Type, "FLOAT[4][3]")]
		public unsafe float* Transform_0;
		public unsafe float* Transform_1;
		public unsafe float* Transform_2;
		[NativeName(NativeNameType.Field, "InstanceID")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstanceID;
		[NativeName(NativeNameType.Field, "InstanceMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstanceMask;
		[NativeName(NativeNameType.Field, "InstanceContributionToHitGroupIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstanceContributionToHitGroupIndex;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Flags;
		[NativeName(NativeNameType.Field, "AccelerationStructure")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_VIRTUAL_ADDRESS")]
		public ulong AccelerationStructure;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEVICE_REMOVED_EXTENDED_DATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DeviceRemovedExtendedData
	{
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_FLAGS")]
		public D3D12DredFlags Flags;
		[NativeName(NativeNameType.Field, "pHeadAutoBreadcrumbNode")]
		[NativeName(NativeNameType.Type, "D3D12_AUTO_BREADCRUMB_NODE*")]
		public unsafe D3D12AutoBreadcrumbNode* PHeadAutoBreadcrumbNode;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEVICE_REMOVED_EXTENDED_DATA1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DeviceRemovedExtendedData1
	{
		[NativeName(NativeNameType.Field, "DeviceRemovedReason")]
		[NativeName(NativeNameType.Type, "HRESULT")]
		public HResult DeviceRemovedReason;
		[NativeName(NativeNameType.Field, "AutoBreadcrumbsOutput")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT")]
		public D3D12DredAutoBreadcrumbsOutput AutoBreadcrumbsOutput;
		[NativeName(NativeNameType.Field, "PageFaultOutput")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_OUTPUT")]
		public D3D12DredPageFaultOutput PageFaultOutput;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEVICE_REMOVED_EXTENDED_DATA2")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DeviceRemovedExtendedData2
	{
		[NativeName(NativeNameType.Field, "DeviceRemovedReason")]
		[NativeName(NativeNameType.Type, "HRESULT")]
		public HResult DeviceRemovedReason;
		[NativeName(NativeNameType.Field, "AutoBreadcrumbsOutput")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1")]
		public D3D12DredAutoBreadcrumbsOutput1 AutoBreadcrumbsOutput;
		[NativeName(NativeNameType.Field, "PageFaultOutput")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_OUTPUT1")]
		public D3D12DredPageFaultOutput1 PageFaultOutput;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEVICE_REMOVED_EXTENDED_DATA3")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DeviceRemovedExtendedData3
	{
		[NativeName(NativeNameType.Field, "DeviceRemovedReason")]
		[NativeName(NativeNameType.Type, "HRESULT")]
		public HResult DeviceRemovedReason;
		[NativeName(NativeNameType.Field, "AutoBreadcrumbsOutput")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1")]
		public D3D12DredAutoBreadcrumbsOutput1 AutoBreadcrumbsOutput;
		[NativeName(NativeNameType.Field, "PageFaultOutput")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_PAGE_FAULT_OUTPUT2")]
		public D3D12DredPageFaultOutput2 PageFaultOutput;
		[NativeName(NativeNameType.Field, "DeviceState")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_DEVICE_STATE")]
		public D3D12DredDeviceState DeviceState;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VersionedDeviceRemovedExtendedData
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VersionedDeviceRemovedExtendedDataUnion
		{
			[NativeName(NativeNameType.Field, "Dred_1_0")]
			[NativeName(NativeNameType.Type, "D3D12_DEVICE_REMOVED_EXTENDED_DATA")]
			[FieldOffset(0)]
			public D3D12DeviceRemovedExtendedData Dred10;
			[NativeName(NativeNameType.Field, "Dred_1_1")]
			[NativeName(NativeNameType.Type, "D3D12_DEVICE_REMOVED_EXTENDED_DATA1")]
			[FieldOffset(0)]
			public D3D12DeviceRemovedExtendedData1 Dred11;
			[NativeName(NativeNameType.Field, "Dred_1_2")]
			[NativeName(NativeNameType.Type, "D3D12_DEVICE_REMOVED_EXTENDED_DATA2")]
			[FieldOffset(0)]
			public D3D12DeviceRemovedExtendedData2 Dred12;
			[NativeName(NativeNameType.Field, "Dred_1_3")]
			[NativeName(NativeNameType.Type, "D3D12_DEVICE_REMOVED_EXTENDED_DATA3")]
			[FieldOffset(0)]
			public D3D12DeviceRemovedExtendedData3 Dred13;


		}

		[NativeName(NativeNameType.Field, "Version")]
		[NativeName(NativeNameType.Type, "D3D12_DRED_VERSION")]
		public D3D12DredVersion Version;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VersionedDeviceRemovedExtendedDataUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataProtectedResourceSessionTypeCount
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Count")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Count;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataProtectedResourceSessionTypes
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Count")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Count;
		[NativeName(NativeNameType.Field, "pTypes")]
		[NativeName(NativeNameType.Type, "GUID*")]
		public unsafe Guid* PTypes;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d12_0000_0055 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_SUBRESOURCE_DATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SubresourceData
	{
		[NativeName(NativeNameType.Field, "pData")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PData;
		[NativeName(NativeNameType.Field, "RowPitch")]
		[NativeName(NativeNameType.Type, "LONG_PTR")]
		public nint RowPitch;
		[NativeName(NativeNameType.Field, "SlicePitch")]
		[NativeName(NativeNameType.Type, "LONG_PTR")]
		public nint SlicePitch;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_MEMCPY_DEST")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12MemcpyDest
	{
		[NativeName(NativeNameType.Field, "pData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PData;
		[NativeName(NativeNameType.Field, "RowPitch")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint RowPitch;
		[NativeName(NativeNameType.Field, "SlicePitch")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint SlicePitch;


	}

	[Guid("344488b7-6846-474b-b989-f027448245e0")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Debug")]
	public partial struct ID3D12Debug : IComObject, IComObject<ID3D12Debug>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("344488b7-6846-474b-b989-f027448245e0");

		public unsafe ID3D12Debug (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "EnableDebugLayer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EnableDebugLayer()
		{
			ID3D12Debug* ptr = (ID3D12Debug*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Debug*, void>)(*LpVtbl))(ptr);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12Debug value)
		{
			return Unsafe.As<ID3D12Debug, IUnknown>(ref value);
		}

	}

	[Guid("affaa4ca-63fe-4d8e-b8ad-159000af4304")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Debug1")]
	public partial struct ID3D12Debug1 : IComObject, IComObject<ID3D12Debug1>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("affaa4ca-63fe-4d8e-b8ad-159000af4304");

		public unsafe ID3D12Debug1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetEnableGPUBasedValidation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetEnableGPUBasedValidation([NativeName(NativeNameType.Param, "Enable")] [NativeName(NativeNameType.Type, "BOOL")] int enable)
		{
			ID3D12Debug1* ptr = (ID3D12Debug1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Debug1*, int, void>)(LpVtbl[1]))(ptr, enable);
		}

		[NativeName(NativeNameType.Func, "SetEnableSynchronizedCommandQueueValidation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetEnableSynchronizedCommandQueueValidation([NativeName(NativeNameType.Param, "Enable")] [NativeName(NativeNameType.Type, "BOOL")] int enable)
		{
			ID3D12Debug1* ptr = (ID3D12Debug1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Debug1*, int, void>)(LpVtbl[2]))(ptr, enable);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12Debug1 value)
		{
			return Unsafe.As<ID3D12Debug1, IUnknown>(ref value);
		}

	}

	[Guid("93a665c4-a3b2-4e5d-b692-a26ae14e3374")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Debug2")]
	public partial struct ID3D12Debug2 : IComObject, IComObject<ID3D12Debug2>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("93a665c4-a3b2-4e5d-b692-a26ae14e3374");

		public unsafe ID3D12Debug2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetGPUBasedValidationFlags")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetGPUBasedValidationFlags([NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_GPU_BASED_VALIDATION_FLAGS")] D3D12GpuBasedValidationFlags flags)
		{
			ID3D12Debug2* ptr = (ID3D12Debug2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Debug2*, D3D12GpuBasedValidationFlags, void>)(*LpVtbl))(ptr, flags);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12Debug2 value)
		{
			return Unsafe.As<ID3D12Debug2, IUnknown>(ref value);
		}

	}

	[Guid("5cf4e58f-f671-4ff1-a542-3686e3d153d1")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Debug3")]
	public partial struct ID3D12Debug3 : IComObject, IComObject<ID3D12Debug3>, IComObject<ID3D12Debug>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("5cf4e58f-f671-4ff1-a542-3686e3d153d1");

		public unsafe ID3D12Debug3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Debug (ID3D12Debug3 value)
		{
			return Unsafe.As<ID3D12Debug3, ID3D12Debug>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Debug3 value)
		{
			return Unsafe.As<ID3D12Debug3, IUnknown>(ref value);
		}

	}

	[Guid("014b816e-9ec5-4a2f-a845-ffbe441ce13a")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Debug4")]
	public partial struct ID3D12Debug4 : IComObject, IComObject<ID3D12Debug4>, IComObject<ID3D12Debug3>, IComObject<ID3D12Debug>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("014b816e-9ec5-4a2f-a845-ffbe441ce13a");

		public unsafe ID3D12Debug4 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "DisableDebugLayer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DisableDebugLayer()
		{
			ID3D12Debug4* ptr = (ID3D12Debug4*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Debug4*, void>)(LpVtbl[3]))(ptr);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Debug3 (ID3D12Debug4 value)
		{
			return Unsafe.As<ID3D12Debug4, ID3D12Debug3>(ref value);
		}

		public unsafe static implicit operator ID3D12Debug (ID3D12Debug4 value)
		{
			return Unsafe.As<ID3D12Debug4, ID3D12Debug>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Debug4 value)
		{
			return Unsafe.As<ID3D12Debug4, IUnknown>(ref value);
		}

	}

	[Guid("548d6b12-09fa-40e0-9069-5dcd589a52c9")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Debug5")]
	public partial struct ID3D12Debug5 : IComObject, IComObject<ID3D12Debug5>, IComObject<ID3D12Debug4>, IComObject<ID3D12Debug3>, IComObject<ID3D12Debug>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("548d6b12-09fa-40e0-9069-5dcd589a52c9");

		public unsafe ID3D12Debug5 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetEnableAutoName")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetEnableAutoName([NativeName(NativeNameType.Param, "Enable")] [NativeName(NativeNameType.Type, "BOOL")] int enable)
		{
			ID3D12Debug5* ptr = (ID3D12Debug5*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Debug5*, int, void>)(LpVtbl[1]))(ptr, enable);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Debug4 (ID3D12Debug5 value)
		{
			return Unsafe.As<ID3D12Debug5, ID3D12Debug4>(ref value);
		}

		public unsafe static implicit operator ID3D12Debug3 (ID3D12Debug5 value)
		{
			return Unsafe.As<ID3D12Debug5, ID3D12Debug3>(ref value);
		}

		public unsafe static implicit operator ID3D12Debug (ID3D12Debug5 value)
		{
			return Unsafe.As<ID3D12Debug5, ID3D12Debug>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Debug5 value)
		{
			return Unsafe.As<ID3D12Debug5, IUnknown>(ref value);
		}

	}

	[Guid("82a816d6-5d01-4157-97d0-4975463fd1ed")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12Debug6")]
	public partial struct ID3D12Debug6 : IComObject, IComObject<ID3D12Debug6>, IComObject<ID3D12Debug5>, IComObject<ID3D12Debug4>, IComObject<ID3D12Debug3>, IComObject<ID3D12Debug>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("82a816d6-5d01-4157-97d0-4975463fd1ed");

		public unsafe ID3D12Debug6 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetForceLegacyBarrierValidation")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetForceLegacyBarrierValidation([NativeName(NativeNameType.Param, "Enable")] [NativeName(NativeNameType.Type, "BOOL")] int enable)
		{
			ID3D12Debug6* ptr = (ID3D12Debug6*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12Debug6*, int, void>)(LpVtbl[1]))(ptr, enable);
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Debug5 (ID3D12Debug6 value)
		{
			return Unsafe.As<ID3D12Debug6, ID3D12Debug5>(ref value);
		}

		public unsafe static implicit operator ID3D12Debug4 (ID3D12Debug6 value)
		{
			return Unsafe.As<ID3D12Debug6, ID3D12Debug4>(ref value);
		}

		public unsafe static implicit operator ID3D12Debug3 (ID3D12Debug6 value)
		{
			return Unsafe.As<ID3D12Debug6, ID3D12Debug3>(ref value);
		}

		public unsafe static implicit operator ID3D12Debug (ID3D12Debug6 value)
		{
			return Unsafe.As<ID3D12Debug6, ID3D12Debug>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12Debug6 value)
		{
			return Unsafe.As<ID3D12Debug6, IUnknown>(ref value);
		}

	}

	[Guid("a9b71770-d099-4a65-a698-3dee10020f88")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DebugDevice1")]
	public partial struct ID3D12DebugDevice1 : IComObject, IComObject<ID3D12DebugDevice1>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("a9b71770-d099-4a65-a698-3dee10020f88");

		public unsafe ID3D12DebugDevice1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetDebugParameter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetDebugParameter([NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_DEBUG_DEVICE_PARAMETER_TYPE")] D3D12DebugDeviceParameterType type, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize)
		{
			ID3D12DebugDevice1* ptr = (ID3D12DebugDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, D3D12DebugDeviceParameterType, void*, uint, HResult>)(*LpVtbl))(ptr, type, pData, dataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDebugParameter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDebugParameter([NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_DEBUG_DEVICE_PARAMETER_TYPE")] D3D12DebugDeviceParameterType type, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize)
		{
			ID3D12DebugDevice1* ptr = (ID3D12DebugDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, D3D12DebugDeviceParameterType, void*, uint, HResult>)(LpVtbl[1]))(ptr, type, pData, dataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ReportLiveDeviceObjects")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ReportLiveDeviceObjects([NativeName(NativeNameType.Param, "Flags")] [NativeName(NativeNameType.Type, "D3D12_RLDO_FLAGS")] D3D12RldoFlags flags)
		{
			ID3D12DebugDevice1* ptr = (ID3D12DebugDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice1*, D3D12RldoFlags, HResult>)(LpVtbl[2]))(ptr, flags);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12DebugDevice1 value)
		{
			return Unsafe.As<ID3D12DebugDevice1, IUnknown>(ref value);
		}

	}

	[Guid("3febd6dd-4973-4787-8194-e45f9e28923e")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DebugDevice")]
	public partial struct ID3D12DebugDevice : IComObject, IComObject<ID3D12DebugDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3febd6dd-4973-4787-8194-e45f9e28923e");

		public unsafe ID3D12DebugDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetFeatureMask")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetFeatureMask([NativeName(NativeNameType.Param, "Mask")] [NativeName(NativeNameType.Type, "D3D12_DEBUG_FEATURE")] D3D12DebugFeature mask)
		{
			ID3D12DebugDevice* ptr = (ID3D12DebugDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, D3D12DebugFeature, HResult>)(*LpVtbl))(ptr, mask);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetFeatureMask")]
		[return: NativeName(NativeNameType.Type, "D3D12_DEBUG_FEATURE")]
		public readonly unsafe D3D12DebugFeature GetFeatureMask()
		{
			ID3D12DebugDevice* ptr = (ID3D12DebugDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12DebugFeature ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugDevice*, D3D12DebugFeature>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12DebugDevice value)
		{
			return Unsafe.As<ID3D12DebugDevice, IUnknown>(ref value);
		}

	}

	[Guid("60eccbc1-378d-4df1-894c-f8ac5ce4d7dd")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DebugDevice2")]
	public partial struct ID3D12DebugDevice2 : IComObject, IComObject<ID3D12DebugDevice2>, IComObject<ID3D12DebugDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("60eccbc1-378d-4df1-894c-f8ac5ce4d7dd");

		public unsafe ID3D12DebugDevice2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DebugDevice (ID3D12DebugDevice2 value)
		{
			return Unsafe.As<ID3D12DebugDevice2, ID3D12DebugDevice>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12DebugDevice2 value)
		{
			return Unsafe.As<ID3D12DebugDevice2, IUnknown>(ref value);
		}

	}

	[Guid("09e0bf36-54ac-484f-8847-4baeeab6053a")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DebugCommandQueue")]
	public partial struct ID3D12DebugCommandQueue : IComObject, IComObject<ID3D12DebugCommandQueue>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("09e0bf36-54ac-484f-8847-4baeeab6053a");

		public unsafe ID3D12DebugCommandQueue (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "AssertResourceState")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int AssertResourceState([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Subresource")] [NativeName(NativeNameType.Type, "UINT")] uint subresource, [NativeName(NativeNameType.Param, "State")] [NativeName(NativeNameType.Type, "UINT")] uint state)
		{
			ID3D12DebugCommandQueue* ptr = (ID3D12DebugCommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, ID3D12Resource*, uint, uint, int>)(*LpVtbl))(ptr, pResource, subresource, state);
			return ret;
		}

		[NativeName(NativeNameType.Func, "AssertResourceState")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int AssertResourceState([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Subresource")] [NativeName(NativeNameType.Type, "UINT")] uint subresource, [NativeName(NativeNameType.Param, "State")] [NativeName(NativeNameType.Type, "UINT")] uint state)
		{
			ID3D12DebugCommandQueue* ptr = (ID3D12DebugCommandQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				int ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandQueue*, ID3D12Resource*, uint, uint, int>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, subresource, state);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12DebugCommandQueue value)
		{
			return Unsafe.As<ID3D12DebugCommandQueue, IUnknown>(ref value);
		}

	}

	[Guid("102ca951-311b-4b01-b11f-ecb83e061b37")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DebugCommandList1")]
	public partial struct ID3D12DebugCommandList1 : IComObject, IComObject<ID3D12DebugCommandList1>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("102ca951-311b-4b01-b11f-ecb83e061b37");

		public unsafe ID3D12DebugCommandList1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetDebugParameter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetDebugParameter([NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE")] D3D12DebugCommandListParameterType type, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "const void*")] void* pData, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize)
		{
			ID3D12DebugCommandList1* ptr = (ID3D12DebugCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, D3D12DebugCommandListParameterType, void*, uint, HResult>)(LpVtbl[1]))(ptr, type, pData, dataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDebugParameter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDebugParameter([NativeName(NativeNameType.Param, "Type")] [NativeName(NativeNameType.Type, "D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE")] D3D12DebugCommandListParameterType type, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize)
		{
			ID3D12DebugCommandList1* ptr = (ID3D12DebugCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12DebugCommandList1*, D3D12DebugCommandListParameterType, void*, uint, HResult>)(LpVtbl[2]))(ptr, type, pData, dataSize);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12DebugCommandList1 value)
		{
			return Unsafe.As<ID3D12DebugCommandList1, IUnknown>(ref value);
		}

	}

	[Guid("09e0bf36-54ac-484f-8847-4baeeab6053f")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DebugCommandList")]
	public partial struct ID3D12DebugCommandList : IComObject, IComObject<ID3D12DebugCommandList>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("09e0bf36-54ac-484f-8847-4baeeab6053f");

		public unsafe ID3D12DebugCommandList (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12DebugCommandList value)
		{
			return Unsafe.As<ID3D12DebugCommandList, IUnknown>(ref value);
		}

	}

	[Guid("aeb575cf-4e06-48be-ba3b-c450fc96652e")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12DebugCommandList2")]
	public partial struct ID3D12DebugCommandList2 : IComObject, IComObject<ID3D12DebugCommandList2>, IComObject<ID3D12DebugCommandList>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("aeb575cf-4e06-48be-ba3b-c450fc96652e");

		public unsafe ID3D12DebugCommandList2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12DebugCommandList (ID3D12DebugCommandList2 value)
		{
			return Unsafe.As<ID3D12DebugCommandList2, ID3D12DebugCommandList>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12DebugCommandList2 value)
		{
			return Unsafe.As<ID3D12DebugCommandList2, IUnknown>(ref value);
		}

	}

	[Guid("0adf7d52-929c-4e61-addb-ffed30de66ef")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12SharingContract")]
	public partial struct ID3D12SharingContract : IComObject, IComObject<ID3D12SharingContract>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0adf7d52-929c-4e61-addb-ffed30de66ef");

		public unsafe ID3D12SharingContract (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "Present")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void Present([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ID3D12Resource* pResource, [NativeName(NativeNameType.Param, "Subresource")] [NativeName(NativeNameType.Type, "UINT")] uint subresource, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "HWND")] nint window)
		{
			ID3D12SharingContract* ptr = (ID3D12SharingContract*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Resource*, uint, nint, void>)(*LpVtbl))(ptr, pResource, subresource, window);
		}

		[NativeName(NativeNameType.Func, "Present")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void Present([NativeName(NativeNameType.Param, "pResource")] [NativeName(NativeNameType.Type, "ID3D12Resource*")] ref ID3D12Resource pResource, [NativeName(NativeNameType.Param, "Subresource")] [NativeName(NativeNameType.Type, "UINT")] uint subresource, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "HWND")] nint window)
		{
			ID3D12SharingContract* ptr = (ID3D12SharingContract*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Resource* ppResource = &pResource)
			{
				((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Resource*, uint, nint, void>)(*LpVtbl))(ptr, (ID3D12Resource*)ppResource, subresource, window);
			}
		}

		[NativeName(NativeNameType.Func, "SharedFenceSignal")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SharedFenceSignal([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ID3D12Fence* pFence, [NativeName(NativeNameType.Param, "FenceValue")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValue)
		{
			ID3D12SharingContract* ptr = (ID3D12SharingContract*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Fence*, ulong, void>)(LpVtbl[1]))(ptr, pFence, fenceValue);
		}

		[NativeName(NativeNameType.Func, "SharedFenceSignal")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SharedFenceSignal([NativeName(NativeNameType.Param, "pFence")] [NativeName(NativeNameType.Type, "ID3D12Fence*")] ref ID3D12Fence pFence, [NativeName(NativeNameType.Param, "FenceValue")] [NativeName(NativeNameType.Type, "UINT64")] ulong fenceValue)
		{
			ID3D12SharingContract* ptr = (ID3D12SharingContract*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Fence* ppFence = &pFence)
			{
				((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, ID3D12Fence*, ulong, void>)(LpVtbl[1]))(ptr, (ID3D12Fence*)ppFence, fenceValue);
			}
		}

		[NativeName(NativeNameType.Func, "BeginCapturableWork")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BeginCapturableWork([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid)
		{
			ID3D12SharingContract* ptr = (ID3D12SharingContract*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(LpVtbl[2]))(ptr, guid);
		}

		[NativeName(NativeNameType.Func, "BeginCapturableWork")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void BeginCapturableWork([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid)
		{
			ID3D12SharingContract* ptr = (ID3D12SharingContract*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(LpVtbl[2]))(ptr, (Guid*)pguid);
			}
		}

		[NativeName(NativeNameType.Func, "EndCapturableWork")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EndCapturableWork([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] Guid* guid)
		{
			ID3D12SharingContract* ptr = (ID3D12SharingContract*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(LpVtbl[3]))(ptr, guid);
		}

		[NativeName(NativeNameType.Func, "EndCapturableWork")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EndCapturableWork([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "const GUID&")] ref Guid guid)
		{
			ID3D12SharingContract* ptr = (ID3D12SharingContract*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* pguid = &guid)
			{
				((delegate* unmanaged[Stdcall]<ID3D12SharingContract*, Guid*, void>)(LpVtbl[3]))(ptr, (Guid*)pguid);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12SharingContract value)
		{
			return Unsafe.As<ID3D12SharingContract, IUnknown>(ref value);
		}

	}

	[Guid("0742a90b-c387-483f-b946-30a7e4e61458")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12InfoQueue")]
	public partial struct ID3D12InfoQueue : IComObject, IComObject<ID3D12InfoQueue>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0742a90b-c387-483f-b946-30a7e4e61458");

		public unsafe ID3D12InfoQueue (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "SetMessageCountLimit")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetMessageCountLimit([NativeName(NativeNameType.Param, "MessageCountLimit")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageCountLimit)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, HResult>)(*LpVtbl))(ptr, messageCountLimit);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ClearStoredMessages")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearStoredMessages()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(LpVtbl[1]))(ptr);
		}

		[NativeName(NativeNameType.Func, "GetMessageA")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetMessageA([NativeName(NativeNameType.Param, "MessageIndex")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageIndex, [NativeName(NativeNameType.Param, "pMessage")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE*")] D3D12Message* pMessage, [NativeName(NativeNameType.Param, "pMessageByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pMessageByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, D3D12Message*, nuint*, HResult>)(LpVtbl[2]))(ptr, messageIndex, pMessage, pMessageByteLength);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMessageA")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetMessageA([NativeName(NativeNameType.Param, "MessageIndex")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageIndex, [NativeName(NativeNameType.Param, "pMessage")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE*")] ref D3D12Message pMessage, [NativeName(NativeNameType.Param, "pMessageByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pMessageByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Message* ppMessage = &pMessage)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, D3D12Message*, nuint*, HResult>)(LpVtbl[2]))(ptr, messageIndex, (D3D12Message*)ppMessage, pMessageByteLength);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetMessageA")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetMessageA([NativeName(NativeNameType.Param, "MessageIndex")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageIndex, [NativeName(NativeNameType.Param, "pMessage")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE*")] D3D12Message* pMessage, [NativeName(NativeNameType.Param, "pMessageByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pMessageByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppMessageByteLength = &pMessageByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, D3D12Message*, nuint*, HResult>)(LpVtbl[2]))(ptr, messageIndex, pMessage, (nuint*)ppMessageByteLength);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetMessageA")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetMessageA([NativeName(NativeNameType.Param, "MessageIndex")] [NativeName(NativeNameType.Type, "UINT64")] ulong messageIndex, [NativeName(NativeNameType.Param, "pMessage")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE*")] ref D3D12Message pMessage, [NativeName(NativeNameType.Param, "pMessageByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pMessageByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12Message* ppMessage = &pMessage)
			{
				fixed (nuint* ppMessageByteLength = &pMessageByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong, D3D12Message*, nuint*, HResult>)(LpVtbl[2]))(ptr, messageIndex, (D3D12Message*)ppMessage, (nuint*)ppMessageByteLength);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetNumMessagesAllowedByStorageFilter")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumMessagesAllowedByStorageFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(LpVtbl[3]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetNumMessagesDeniedByStorageFilter")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumMessagesDeniedByStorageFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(LpVtbl[4]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetNumStoredMessages")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumStoredMessages()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(LpVtbl[5]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetNumStoredMessagesAllowedByRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumStoredMessagesAllowedByRetrievalFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(LpVtbl[6]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetNumMessagesDiscardedByMessageCountLimit")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetNumMessagesDiscardedByMessageCountLimit()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(LpVtbl[7]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMessageCountLimit")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetMessageCountLimit()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, ulong>)(LpVtbl[8]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "AddStorageFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddStorageFilterEntries([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] D3D12InfoQueueFilter* pFilter)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, HResult>)(LpVtbl[9]))(ptr, pFilter);
			return ret;
		}

		[NativeName(NativeNameType.Func, "AddStorageFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddStorageFilterEntries([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] ref D3D12InfoQueueFilter pFilter)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, HResult>)(LpVtbl[9]))(ptr, (D3D12InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] D3D12InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, nuint*, HResult>)(LpVtbl[10]))(ptr, pFilter, pFilterByteLength);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] ref D3D12InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, nuint*, HResult>)(LpVtbl[10]))(ptr, (D3D12InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] D3D12InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, nuint*, HResult>)(LpVtbl[10]))(ptr, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] ref D3D12InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, nuint*, HResult>)(LpVtbl[10]))(ptr, (D3D12InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearStorageFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearStorageFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(LpVtbl[11]))(ptr);
		}

		[NativeName(NativeNameType.Func, "PushEmptyStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult PushEmptyStorageFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, HResult>)(LpVtbl[12]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "PushCopyOfStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult PushCopyOfStorageFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, HResult>)(LpVtbl[13]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "PushStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult PushStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] D3D12InfoQueueFilter* pFilter)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, HResult>)(LpVtbl[14]))(ptr, pFilter);
			return ret;
		}

		[NativeName(NativeNameType.Func, "PushStorageFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult PushStorageFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] ref D3D12InfoQueueFilter pFilter)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, HResult>)(LpVtbl[14]))(ptr, (D3D12InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "PopStorageFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void PopStorageFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(LpVtbl[15]))(ptr);
		}

		[NativeName(NativeNameType.Func, "GetStorageFilterStackSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetStorageFilterStackSize()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, uint>)(LpVtbl[16]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "AddRetrievalFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddRetrievalFilterEntries([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] D3D12InfoQueueFilter* pFilter)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, HResult>)(LpVtbl[17]))(ptr, pFilter);
			return ret;
		}

		[NativeName(NativeNameType.Func, "AddRetrievalFilterEntries")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddRetrievalFilterEntries([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] ref D3D12InfoQueueFilter pFilter)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, HResult>)(LpVtbl[17]))(ptr, (D3D12InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] D3D12InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, nuint*, HResult>)(LpVtbl[18]))(ptr, pFilter, pFilterByteLength);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] ref D3D12InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] nuint* pFilterByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, nuint*, HResult>)(LpVtbl[18]))(ptr, (D3D12InfoQueueFilter*)ppFilter, pFilterByteLength);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] D3D12InfoQueueFilter* pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (nuint* ppFilterByteLength = &pFilterByteLength)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, nuint*, HResult>)(LpVtbl[18]))(ptr, pFilter, (nuint*)ppFilterByteLength);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] ref D3D12InfoQueueFilter pFilter, [NativeName(NativeNameType.Param, "pFilterByteLength")] [NativeName(NativeNameType.Type, "SIZE_T*")] ref nuint pFilterByteLength)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12InfoQueueFilter* ppFilter = &pFilter)
			{
				fixed (nuint* ppFilterByteLength = &pFilterByteLength)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, nuint*, HResult>)(LpVtbl[18]))(ptr, (D3D12InfoQueueFilter*)ppFilter, (nuint*)ppFilterByteLength);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ClearRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearRetrievalFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(LpVtbl[19]))(ptr);
		}

		[NativeName(NativeNameType.Func, "PushEmptyRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult PushEmptyRetrievalFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, HResult>)(LpVtbl[20]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "PushCopyOfRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult PushCopyOfRetrievalFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, HResult>)(LpVtbl[21]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "PushRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult PushRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] D3D12InfoQueueFilter* pFilter)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, HResult>)(LpVtbl[22]))(ptr, pFilter);
			return ret;
		}

		[NativeName(NativeNameType.Func, "PushRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult PushRetrievalFilter([NativeName(NativeNameType.Param, "pFilter")] [NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER*")] ref D3D12InfoQueueFilter pFilter)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12InfoQueueFilter* ppFilter = &pFilter)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12InfoQueueFilter*, HResult>)(LpVtbl[22]))(ptr, (D3D12InfoQueueFilter*)ppFilter);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "PopRetrievalFilter")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void PopRetrievalFilter()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, void>)(LpVtbl[23]))(ptr);
		}

		[NativeName(NativeNameType.Func, "GetRetrievalFilterStackSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetRetrievalFilterStackSize()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, uint>)(LpVtbl[24]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "AddMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddMessage([NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_CATEGORY")] D3D12MessageCategory category, [NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_SEVERITY")] D3D12MessageSeverity severity, [NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_ID")] D3D12MessageId iD, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pDescription)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12MessageCategory, D3D12MessageSeverity, D3D12MessageId, byte*, HResult>)(LpVtbl[25]))(ptr, category, severity, iD, pDescription);
			return ret;
		}

		[NativeName(NativeNameType.Func, "AddApplicationMessage")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult AddApplicationMessage([NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_SEVERITY")] D3D12MessageSeverity severity, [NativeName(NativeNameType.Param, "pDescription")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* pDescription)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12MessageSeverity, byte*, HResult>)(LpVtbl[26]))(ptr, severity, pDescription);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetBreakOnCategory")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetBreakOnCategory([NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_CATEGORY")] D3D12MessageCategory category, [NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12MessageCategory, int, HResult>)(LpVtbl[27]))(ptr, category, bEnable);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetBreakOnSeverity")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetBreakOnSeverity([NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_SEVERITY")] D3D12MessageSeverity severity, [NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12MessageSeverity, int, HResult>)(LpVtbl[28]))(ptr, severity, bEnable);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetBreakOnID")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult SetBreakOnID([NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_ID")] D3D12MessageId iD, [NativeName(NativeNameType.Param, "bEnable")] [NativeName(NativeNameType.Type, "BOOL")] int bEnable)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12MessageId, int, HResult>)(LpVtbl[29]))(ptr, iD, bEnable);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetBreakOnCategory")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int GetBreakOnCategory([NativeName(NativeNameType.Param, "Category")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_CATEGORY")] D3D12MessageCategory category)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12MessageCategory, int>)(LpVtbl[30]))(ptr, category);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetBreakOnSeverity")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int GetBreakOnSeverity([NativeName(NativeNameType.Param, "Severity")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_SEVERITY")] D3D12MessageSeverity severity)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12MessageSeverity, int>)(LpVtbl[31]))(ptr, severity);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetBreakOnID")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int GetBreakOnID([NativeName(NativeNameType.Param, "ID")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_ID")] D3D12MessageId iD)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, D3D12MessageId, int>)(LpVtbl[32]))(ptr, iD);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SetMuteDebugOutput")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void SetMuteDebugOutput([NativeName(NativeNameType.Param, "bMute")] [NativeName(NativeNameType.Type, "BOOL")] int bMute)
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int, void>)(LpVtbl[33]))(ptr, bMute);
		}

		[NativeName(NativeNameType.Func, "GetMuteDebugOutput")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int GetMuteDebugOutput()
		{
			ID3D12InfoQueue* ptr = (ID3D12InfoQueue*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue*, int>)(LpVtbl[34]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12InfoQueue value)
		{
			return Unsafe.As<ID3D12InfoQueue, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_MESSAGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12Message
	{
		[NativeName(NativeNameType.Field, "Category")]
		[NativeName(NativeNameType.Type, "D3D12_MESSAGE_CATEGORY")]
		public D3D12MessageCategory Category;
		[NativeName(NativeNameType.Field, "Severity")]
		[NativeName(NativeNameType.Type, "D3D12_MESSAGE_SEVERITY")]
		public D3D12MessageSeverity Severity;
		[NativeName(NativeNameType.Field, "ID")]
		[NativeName(NativeNameType.Type, "D3D12_MESSAGE_ID")]
		public D3D12MessageId ID;
		[NativeName(NativeNameType.Field, "pDescription")]
		[NativeName(NativeNameType.Type, "const char*")]
		public unsafe byte* PDescription;
		[NativeName(NativeNameType.Field, "DescriptionByteLength")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint DescriptionByteLength;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_INFO_QUEUE_FILTER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12InfoQueueFilter
	{
		[NativeName(NativeNameType.Field, "AllowList")]
		[NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER_DESC")]
		public D3D12InfoQueueFilterDesc AllowList;
		[NativeName(NativeNameType.Field, "DenyList")]
		[NativeName(NativeNameType.Type, "D3D12_INFO_QUEUE_FILTER_DESC")]
		public D3D12InfoQueueFilterDesc DenyList;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_INFO_QUEUE_FILTER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12InfoQueueFilterDesc
	{
		[NativeName(NativeNameType.Field, "NumCategories")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumCategories;
		[NativeName(NativeNameType.Field, "pCategoryList")]
		[NativeName(NativeNameType.Type, "D3D12_MESSAGE_CATEGORY*")]
		public unsafe D3D12MessageCategory* PCategoryList;
		[NativeName(NativeNameType.Field, "NumSeverities")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumSeverities;
		[NativeName(NativeNameType.Field, "pSeverityList")]
		[NativeName(NativeNameType.Type, "D3D12_MESSAGE_SEVERITY*")]
		public unsafe D3D12MessageSeverity* PSeverityList;
		[NativeName(NativeNameType.Field, "NumIDs")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumIDs;
		[NativeName(NativeNameType.Field, "pIDList")]
		[NativeName(NativeNameType.Type, "D3D12_MESSAGE_ID*")]
		public unsafe D3D12MessageId* PIDList;


	}

	[Guid("2852dd88-b484-4c0c-b6b1-67168500e600")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12InfoQueue1")]
	public partial struct ID3D12InfoQueue1 : IComObject, IComObject<ID3D12InfoQueue1>, IComObject<ID3D12InfoQueue>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("2852dd88-b484-4c0c-b6b1-67168500e600");

		public unsafe ID3D12InfoQueue1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "RegisterMessageCallback")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult RegisterMessageCallback([NativeName(NativeNameType.Param, "CallbackFunc")] [NativeName(NativeNameType.Type, "D3D12MessageFunc")] D3D12MessageFunc callbackFunc, [NativeName(NativeNameType.Param, "CallbackFilterFlags")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_CALLBACK_FLAGS")] D3D12MessageCallbackFlags callbackFilterFlags, [NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "void*")] void* pContext, [NativeName(NativeNameType.Param, "pCallbackCookie")] [NativeName(NativeNameType.Type, "DWORD*")] uint* pCallbackCookie)
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, D3D12MessageFunc, D3D12MessageCallbackFlags, void*, uint*, HResult>)(LpVtbl[35]))(ptr, callbackFunc, callbackFilterFlags, pContext, pCallbackCookie);
			return ret;
		}

		[NativeName(NativeNameType.Func, "RegisterMessageCallback")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult RegisterMessageCallback([NativeName(NativeNameType.Param, "CallbackFunc")] [NativeName(NativeNameType.Type, "D3D12MessageFunc")] D3D12MessageFunc callbackFunc, [NativeName(NativeNameType.Param, "CallbackFilterFlags")] [NativeName(NativeNameType.Type, "D3D12_MESSAGE_CALLBACK_FLAGS")] D3D12MessageCallbackFlags callbackFilterFlags, [NativeName(NativeNameType.Param, "pContext")] [NativeName(NativeNameType.Type, "void*")] void* pContext, [NativeName(NativeNameType.Param, "pCallbackCookie")] [NativeName(NativeNameType.Type, "DWORD*")] ref uint pCallbackCookie)
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCallbackCookie = &pCallbackCookie)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, D3D12MessageFunc, D3D12MessageCallbackFlags, void*, uint*, HResult>)(LpVtbl[35]))(ptr, callbackFunc, callbackFilterFlags, pContext, (uint*)ppCallbackCookie);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "UnregisterMessageCallback")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult UnregisterMessageCallback([NativeName(NativeNameType.Param, "CallbackCookie")] [NativeName(NativeNameType.Type, "DWORD")] uint callbackCookie)
		{
			ID3D12InfoQueue1* ptr = (ID3D12InfoQueue1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12InfoQueue1*, uint, HResult>)(LpVtbl[36]))(ptr, callbackCookie);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12InfoQueue (ID3D12InfoQueue1 value)
		{
			return Unsafe.As<ID3D12InfoQueue1, ID3D12InfoQueue>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12InfoQueue1 value)
		{
			return Unsafe.As<ID3D12InfoQueue1, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DebugDeviceGpuBasedValidationSettings
	{
		[NativeName(NativeNameType.Field, "MaxMessagesPerCommandList")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxMessagesPerCommandList;
		[NativeName(NativeNameType.Field, "DefaultShaderPatchMode")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE")]
		public D3D12GpuBasedValidationShaderPatchMode DefaultShaderPatchMode;
		[NativeName(NativeNameType.Field, "PipelineStateCreateFlags")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS")]
		public D3D12GpuBasedValidationPipelineStateCreateFlags PipelineStateCreateFlags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DebugDeviceGpuSlowdownPerformanceFactor
	{
		[NativeName(NativeNameType.Field, "SlowdownFactor")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float SlowdownFactor;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DebugCommandListGpuBasedValidationSettings
	{
		[NativeName(NativeNameType.Field, "ShaderPatchMode")]
		[NativeName(NativeNameType.Type, "D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE")]
		public D3D12GpuBasedValidationShaderPatchMode ShaderPatchMode;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d12_0000_0057 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_DISPATCH_MESH_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12DispatchMeshArguments
	{
		[NativeName(NativeNameType.Field, "ThreadGroupCountX")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ThreadGroupCountX;
		[NativeName(NativeNameType.Field, "ThreadGroupCountY")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ThreadGroupCountY;
		[NativeName(NativeNameType.Field, "ThreadGroupCountZ")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ThreadGroupCountZ;


	}

	[Guid("8f1c0e3c-fae3-4a82-b098-bfe1708207ff")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12CompatibilityDevice")]
	public partial struct ID3D12CompatibilityDevice : IComObject, IComObject<ID3D12CompatibilityDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8f1c0e3c-fae3-4a82-b098-bfe1708207ff");

		public unsafe ID3D12CompatibilityDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
						{
							fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, riid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
						{
							fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
							{
								fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, riid, ppResource);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ID3D12SwapChainAssistant* pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
						{
							fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
							{
								fixed (Guid* priid = &riid)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, pOwningSwapchain, (Guid*)priid, ppResource);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ID3D12LifetimeTracker* pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								fixed (Guid* priid = &riid)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, pLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
			{
				fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] D3D11ResourceFlags* pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								fixed (Guid* priid = &riid)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, pFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
			{
				fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
				{
					fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] D3D12ClearValue* pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								fixed (Guid* priid = &riid)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, pOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
			{
				fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
				{
					fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
					{
						fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
						{
							fixed (Guid* priid = &riid)
							{
								HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] D3D12ResourceDesc* pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								fixed (Guid* priid = &riid)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, pDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] D3D12HeapProperties* pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResourceDesc* ppDesc = &pDesc)
			{
				fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
				{
					fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
					{
						fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
						{
							fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
							{
								fixed (Guid* priid = &riid)
								{
									HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, pHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedResource")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedResource([NativeName(NativeNameType.Param, "pHeapProperties")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_PROPERTIES*")] ref D3D12HeapProperties pHeapProperties, [NativeName(NativeNameType.Param, "HeapFlags")] [NativeName(NativeNameType.Type, "D3D12_HEAP_FLAGS")] D3D12HeapFlags heapFlags, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_RESOURCE_DESC*")] ref D3D12ResourceDesc pDesc, [NativeName(NativeNameType.Param, "InitialResourceState")] [NativeName(NativeNameType.Type, "D3D12_RESOURCE_STATES")] D3D12ResourceStates initialResourceState, [NativeName(NativeNameType.Param, "pOptimizedClearValue")] [NativeName(NativeNameType.Type, "const D3D12_CLEAR_VALUE*")] ref D3D12ClearValue pOptimizedClearValue, [NativeName(NativeNameType.Param, "pFlags11")] [NativeName(NativeNameType.Type, "const D3D11_RESOURCE_FLAGS*")] ref D3D11ResourceFlags pFlags11, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "pLifetimeTracker")] [NativeName(NativeNameType.Type, "ID3D12LifetimeTracker*")] ref ID3D12LifetimeTracker pLifetimeTracker, [NativeName(NativeNameType.Param, "pOwningSwapchain")] [NativeName(NativeNameType.Type, "ID3D12SwapChainAssistant*")] ref ID3D12SwapChainAssistant pOwningSwapchain, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppResource")] [NativeName(NativeNameType.Type, "void**")] void** ppResource)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapProperties* ppHeapProperties = &pHeapProperties)
			{
				fixed (D3D12ResourceDesc* ppDesc = &pDesc)
				{
					fixed (D3D12ClearValue* ppOptimizedClearValue = &pOptimizedClearValue)
					{
						fixed (D3D11ResourceFlags* ppFlags11 = &pFlags11)
						{
							fixed (ID3D12LifetimeTracker* ppLifetimeTracker = &pLifetimeTracker)
							{
								fixed (ID3D12SwapChainAssistant* ppOwningSwapchain = &pOwningSwapchain)
								{
									fixed (Guid* priid = &riid)
									{
										HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapProperties*, D3D12HeapFlags, D3D12ResourceDesc*, D3D12ResourceStates, D3D12ClearValue*, D3D11ResourceFlags*, D3D12CompatibilitySharedFlags, ID3D12LifetimeTracker*, ID3D12SwapChainAssistant*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (D3D12HeapProperties*)ppHeapProperties, heapFlags, (D3D12ResourceDesc*)ppDesc, initialResourceState, (D3D12ClearValue*)ppOptimizedClearValue, (D3D11ResourceFlags*)ppFlags11, compatibilityFlags, (ID3D12LifetimeTracker*)ppLifetimeTracker, (ID3D12SwapChainAssistant*)ppOwningSwapchain, (Guid*)priid, ppResource);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHeap([NativeName(NativeNameType.Param, "pHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] D3D12HeapDesc* pHeapDesc, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppHeap)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapDesc*, D3D12CompatibilitySharedFlags, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pHeapDesc, compatibilityFlags, riid, ppHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateSharedHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHeap([NativeName(NativeNameType.Param, "pHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] ref D3D12HeapDesc pHeapDesc, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppHeap)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppHeapDesc = &pHeapDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapDesc*, D3D12CompatibilitySharedFlags, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (D3D12HeapDesc*)ppHeapDesc, compatibilityFlags, riid, ppHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHeap([NativeName(NativeNameType.Param, "pHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] D3D12HeapDesc* pHeapDesc, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppHeap)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapDesc*, D3D12CompatibilitySharedFlags, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pHeapDesc, compatibilityFlags, (Guid*)priid, ppHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateSharedHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateSharedHeap([NativeName(NativeNameType.Param, "pHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_HEAP_DESC*")] ref D3D12HeapDesc pHeapDesc, [NativeName(NativeNameType.Param, "CompatibilityFlags")] [NativeName(NativeNameType.Type, "D3D12_COMPATIBILITY_SHARED_FLAGS")] D3D12CompatibilitySharedFlags compatibilityFlags, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppHeap)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12HeapDesc* ppHeapDesc = &pHeapDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, D3D12HeapDesc*, D3D12CompatibilitySharedFlags, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (D3D12HeapDesc*)ppHeapDesc, compatibilityFlags, (Guid*)priid, ppHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "ReflectSharedProperties")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ReflectSharedProperties([NativeName(NativeNameType.Param, "pHeapOrResource")] [NativeName(NativeNameType.Type, "ID3D12Object*")] ID3D12Object* pHeapOrResource, [NativeName(NativeNameType.Param, "ReflectType")] [NativeName(NativeNameType.Type, "D3D12_REFLECT_SHARED_PROPERTY")] D3D12ReflectSharedProperty reflectType, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, ID3D12Object*, D3D12ReflectSharedProperty, void*, uint, HResult>)(LpVtbl[2]))(ptr, pHeapOrResource, reflectType, pData, dataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ReflectSharedProperties")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ReflectSharedProperties([NativeName(NativeNameType.Param, "pHeapOrResource")] [NativeName(NativeNameType.Type, "ID3D12Object*")] ref ID3D12Object pHeapOrResource, [NativeName(NativeNameType.Param, "ReflectType")] [NativeName(NativeNameType.Type, "D3D12_REFLECT_SHARED_PROPERTY")] D3D12ReflectSharedProperty reflectType, [NativeName(NativeNameType.Param, "pData")] [NativeName(NativeNameType.Type, "void*")] void* pData, [NativeName(NativeNameType.Param, "DataSize")] [NativeName(NativeNameType.Type, "UINT")] uint dataSize)
		{
			ID3D12CompatibilityDevice* ptr = (ID3D12CompatibilityDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12Object* ppHeapOrResource = &pHeapOrResource)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12CompatibilityDevice*, ID3D12Object*, D3D12ReflectSharedProperty, void*, uint, HResult>)(LpVtbl[2]))(ptr, (ID3D12Object*)ppHeapOrResource, reflectType, pData, dataSize);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12CompatibilityDevice value)
		{
			return Unsafe.As<ID3D12CompatibilityDevice, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D11_RESOURCE_FLAGS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D11ResourceFlags
	{
		[NativeName(NativeNameType.Field, "BindFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BindFlags;
		[NativeName(NativeNameType.Field, "MiscFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MiscFlags;
		[NativeName(NativeNameType.Field, "CPUAccessFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CPUAccessFlags;
		[NativeName(NativeNameType.Field, "StructureByteStride")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StructureByteStride;


	}

	[Guid("edbf5678-2960-4e81-8429-99d4b2630c4e")]
	[NativeName(NativeNameType.StructOrClass, "D3D11On12CreatorID")]
	public partial struct D3D11On12CreatorID : IComObject, IComObject<D3D11On12CreatorID>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("edbf5678-2960-4e81-8429-99d4b2630c4e");

		public unsafe D3D11On12CreatorID (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (D3D11On12CreatorID value)
		{
			return Unsafe.As<D3D11On12CreatorID, IUnknown>(ref value);
		}

	}

	[Guid("fffcbb7f-15d3-42a2-841e-9d8d32f37ddd")]
	[NativeName(NativeNameType.StructOrClass, "D3D9On12CreatorID")]
	public partial struct D3D9On12CreatorID : IComObject, IComObject<D3D9On12CreatorID>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("fffcbb7f-15d3-42a2-841e-9d8d32f37ddd");

		public unsafe D3D9On12CreatorID (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (D3D9On12CreatorID value)
		{
			return Unsafe.As<D3D9On12CreatorID, IUnknown>(ref value);
		}

	}

	[Guid("6bb3cd34-0d19-45ab-97ed-d720ba3dfc80")]
	[NativeName(NativeNameType.StructOrClass, "OpenGLOn12CreatorID")]
	public partial struct OpenGLOn12CreatorID : IComObject, IComObject<OpenGLOn12CreatorID>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6bb3cd34-0d19-45ab-97ed-d720ba3dfc80");

		public unsafe OpenGLOn12CreatorID (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (OpenGLOn12CreatorID value)
		{
			return Unsafe.As<OpenGLOn12CreatorID, IUnknown>(ref value);
		}

	}

	[Guid("3f76bb74-91b5-4a88-b126-20ca0331cd60")]
	[NativeName(NativeNameType.StructOrClass, "OpenCLOn12CreatorID")]
	public partial struct OpenCLOn12CreatorID : IComObject, IComObject<OpenCLOn12CreatorID>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3f76bb74-91b5-4a88-b126-20ca0331cd60");

		public unsafe OpenCLOn12CreatorID (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (OpenCLOn12CreatorID value)
		{
			return Unsafe.As<OpenCLOn12CreatorID, IUnknown>(ref value);
		}

	}

	[Guid("cb7490ac-8a0f-44ec-9b7b-6f4cafe8e9ab")]
	[NativeName(NativeNameType.StructOrClass, "DirectMLTensorFlowCreatorID")]
	public partial struct DirectMLTensorFlowCreatorID : IComObject, IComObject<DirectMLTensorFlowCreatorID>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("cb7490ac-8a0f-44ec-9b7b-6f4cafe8e9ab");

		public unsafe DirectMLTensorFlowCreatorID (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (DirectMLTensorFlowCreatorID value)
		{
			return Unsafe.As<DirectMLTensorFlowCreatorID, IUnknown>(ref value);
		}

	}

	[Guid("af029192-fba1-4b05-9116-235e06560354")]
	[NativeName(NativeNameType.StructOrClass, "DirectMLPyTorchCreatorID")]
	public partial struct DirectMLPyTorchCreatorID : IComObject, IComObject<DirectMLPyTorchCreatorID>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("af029192-fba1-4b05-9116-235e06560354");

		public unsafe DirectMLPyTorchCreatorID (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (DirectMLPyTorchCreatorID value)
		{
			return Unsafe.As<DirectMLPyTorchCreatorID, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "_D3D12_SIGNATURE_PARAMETER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12SignatureParameterDesc
	{
		/// <summary>
		/// Name of the semantic<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SemanticName")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* SemanticName;

		/// <summary>
		/// Index of the semantic<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SemanticIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SemanticIndex;

		/// <summary>
		/// Number of member variables<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Register")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Register;

		/// <summary>
		/// A predefined system value, or D3D_NAME_UNDEFINED if not applicable<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SystemValueType")]
		[NativeName(NativeNameType.Type, "D3D_NAME")]
		public D3DName SystemValueType;

		/// <summary>
		/// Scalar type (e.g. uint, float, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ComponentType")]
		[NativeName(NativeNameType.Type, "D3D_REGISTER_COMPONENT_TYPE")]
		public D3DRegisterComponentType ComponentType;

		/// <summary>
		/// Mask to indicate which components of the register<br/>
		/// are used (combination of D3D10_COMPONENT_MASK values)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Mask")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte Mask;

		/// <summary>
		/// Mask to indicate whether a given component is <br/>
		/// never written (if this is an output signature) or<br/>
		/// always read (if this is an input signature).<br/>
		/// (combination of D3D_MASK_* values)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReadWriteMask")]
		[NativeName(NativeNameType.Type, "BYTE")]
		public byte ReadWriteMask;

		/// <summary>
		/// Stream index<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Stream")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Stream;

		/// <summary>
		/// Minimum desired interpolation precision<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MinPrecision")]
		[NativeName(NativeNameType.Type, "D3D_MIN_PRECISION")]
		public D3DMinPrecision MinPrecision;



	}

	[NativeName(NativeNameType.StructOrClass, "_D3D12_SHADER_BUFFER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderBufferDesc
	{
		/// <summary>
		/// Name of the constant buffer<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Indicates type of buffer content<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D_CBUFFER_TYPE")]
		public D3DCbufferType Type;

		/// <summary>
		/// Number of member variables<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Variables")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Variables;

		/// <summary>
		/// Size of CB (in bytes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Size;

		/// <summary>
		/// Buffer description flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "uFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UFlags;



	}

	[NativeName(NativeNameType.StructOrClass, "_D3D12_SHADER_VARIABLE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderVariableDesc
	{
		/// <summary>
		/// Name of the variable<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Offset in constant buffer's backing store<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StartOffset")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartOffset;

		/// <summary>
		/// Size of variable (in bytes)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Size;

		/// <summary>
		/// Variable flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "uFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UFlags;

		/// <summary>
		/// Raw pointer to default value<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DefaultValue")]
		[NativeName(NativeNameType.Type, "LPVOID")]
		public unsafe void* DefaultValue;

		/// <summary>
		/// First texture index (or -1 if no textures used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StartTexture")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartTexture;

		/// <summary>
		/// Number of texture slots possibly used.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureSize;

		/// <summary>
		/// First sampler index (or -1 if no textures used)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StartSampler")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StartSampler;

		/// <summary>
		/// Number of sampler slots possibly used.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SamplerSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SamplerSize;



	}

	[NativeName(NativeNameType.StructOrClass, "_D3D12_SHADER_TYPE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderTypeDesc
	{
		/// <summary>
		/// Variable class (e.g. object, matrix, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Class")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_VARIABLE_CLASS")]
		public D3DShaderVariableClass Class;

		/// <summary>
		/// Variable type (e.g. float, sampler, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_VARIABLE_TYPE")]
		public D3DShaderVariableType Type;

		/// <summary>
		/// Number of rows (for matrices, 1 for other numeric, 0 if not applicable)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Rows")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Rows;

		/// <summary>
		/// Number of columns (for vectors <br/>
		/// &<br/>
		/// matrices, 1 for other numeric, 0 if not applicable)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Columns")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Columns;

		/// <summary>
		/// Number of elements (0 if not an array)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Elements")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Elements;

		/// <summary>
		/// Number of members (0 if not a structure)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Members")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Members;

		/// <summary>
		/// Offset from the start of structure (0 if not a structure member)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Offset;

		/// <summary>
		/// Name of type, can be NULL<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;



	}

	[NativeName(NativeNameType.StructOrClass, "_D3D12_SHADER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderDesc
	{
		/// <summary>
		/// Shader version<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Version")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Version;

		/// <summary>
		/// Creator string<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Creator")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Creator;

		/// <summary>
		/// Shader compilation/parse flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Flags;

		/// <summary>
		/// Number of constant buffers<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConstantBuffers")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConstantBuffers;

		/// <summary>
		/// Number of bound resources<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BoundResources")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BoundResources;

		/// <summary>
		/// Number of parameters in the input signature<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InputParameters;

		/// <summary>
		/// Number of parameters in the output signature<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "OutputParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputParameters;

		/// <summary>
		/// Number of emitted instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstructionCount;

		/// <summary>
		/// Number of temporary registers used <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempRegisterCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempRegisterCount;

		/// <summary>
		/// Number of temporary arrays used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempArrayCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempArrayCount;

		/// <summary>
		/// Number of constant defines <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DefCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DefCount;

		/// <summary>
		/// Number of declarations (input + output)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DclCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DclCount;

		/// <summary>
		/// Number of non-categorized texture instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureNormalInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureNormalInstructions;

		/// <summary>
		/// Number of texture load instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureLoadInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureLoadInstructions;

		/// <summary>
		/// Number of texture comparison instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureCompInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureCompInstructions;

		/// <summary>
		/// Number of texture bias instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureBiasInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureBiasInstructions;

		/// <summary>
		/// Number of texture gradient instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureGradientInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureGradientInstructions;

		/// <summary>
		/// Number of floating point arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FloatInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FloatInstructionCount;

		/// <summary>
		/// Number of signed integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IntInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IntInstructionCount;

		/// <summary>
		/// Number of unsigned integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UintInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UintInstructionCount;

		/// <summary>
		/// Number of static flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StaticFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StaticFlowControlCount;

		/// <summary>
		/// Number of dynamic flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DynamicFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DynamicFlowControlCount;

		/// <summary>
		/// Number of macro instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MacroInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MacroInstructionCount;

		/// <summary>
		/// Number of array instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ArrayInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArrayInstructionCount;

		/// <summary>
		/// Number of cut instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "CutInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CutInstructionCount;

		/// <summary>
		/// Number of emit instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "EmitInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint EmitInstructionCount;

		/// <summary>
		/// Geometry shader output topology<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GSOutputTopology")]
		[NativeName(NativeNameType.Type, "D3D_PRIMITIVE_TOPOLOGY")]
		public D3DPrimitiveTopology GSOutputTopology;

		/// <summary>
		/// Geometry shader maximum output vertex count<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "GSMaxOutputVertexCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint GSMaxOutputVertexCount;

		/// <summary>
		/// GS/HS input primitive<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InputPrimitive")]
		[NativeName(NativeNameType.Type, "D3D_PRIMITIVE")]
		public D3DPrimitive InputPrimitive;

		/// <summary>
		/// Number of parameters in the patch constant signature<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "PatchConstantParameters")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PatchConstantParameters;

		/// <summary>
		/// Number of Geometry shader instances<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cGSInstanceCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CGSInstanceCount;

		/// <summary>
		/// Number of control points in the HS->DS stage<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cControlPoints")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CControlPoints;

		/// <summary>
		/// Primitive output by the tessellator<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HSOutputPrimitive")]
		[NativeName(NativeNameType.Type, "D3D_TESSELLATOR_OUTPUT_PRIMITIVE")]
		public D3DTessellatorOutputPrimitive HSOutputPrimitive;

		/// <summary>
		/// Partitioning mode of the tessellator<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HSPartitioning")]
		[NativeName(NativeNameType.Type, "D3D_TESSELLATOR_PARTITIONING")]
		public D3DTessellatorPartitioning HSPartitioning;

		/// <summary>
		/// Domain of the tessellator (quad, tri, isoline)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TessellatorDomain")]
		[NativeName(NativeNameType.Type, "D3D_TESSELLATOR_DOMAIN")]
		public D3DTessellatorDomain TessellatorDomain;

		/// <summary>
		/// Number of barrier instructions in a compute shader<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cBarrierInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CBarrierInstructions;

		/// <summary>
		/// Number of interlocked instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cInterlockedInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CInterlockedInstructions;

		/// <summary>
		/// Number of texture writes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cTextureStoreInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CTextureStoreInstructions;



	}

	[NativeName(NativeNameType.StructOrClass, "_D3D12_SHADER_INPUT_BIND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ShaderInputBindDesc
	{
		/// <summary>
		/// Name of the resource<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Type of resource (e.g. texture, cbuffer, etc.)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_INPUT_TYPE")]
		public D3DShaderInputType Type;

		/// <summary>
		/// Starting bind point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BindPoint")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BindPoint;

		/// <summary>
		/// Number of contiguous bind points (for arrays)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BindCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BindCount;

		/// <summary>
		/// Input binding flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "uFlags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UFlags;

		/// <summary>
		/// Return type (if texture)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ReturnType")]
		[NativeName(NativeNameType.Type, "D3D_RESOURCE_RETURN_TYPE")]
		public D3DResourceReturnType ReturnType;

		/// <summary>
		/// Dimension (if texture)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Dimension")]
		[NativeName(NativeNameType.Type, "D3D_SRV_DIMENSION")]
		public D3DSrvDimension Dimension;

		/// <summary>
		/// Number of samples (0 if not MS texture)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "NumSamples")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumSamples;

		/// <summary>
		/// Register space<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Space")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Space;

		/// <summary>
		/// Range ID in the bytecode<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "uID")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UID;



	}

	[NativeName(NativeNameType.StructOrClass, "_D3D12_LIBRARY_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12LibraryDesc
	{
		/// <summary>
		/// The name of the originator of the library.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Creator")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Creator;

		/// <summary>
		/// Compilation flags.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Flags;

		/// <summary>
		/// Number of functions exported from the library.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FunctionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FunctionCount;



	}

	[NativeName(NativeNameType.StructOrClass, "_D3D12_FUNCTION_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FunctionDesc
	{
		/// <summary>
		/// Shader version<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Version")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Version;

		/// <summary>
		/// Creator string<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Creator")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Creator;

		/// <summary>
		/// Shader compilation/parse flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Flags;

		/// <summary>
		/// Number of constant buffers<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConstantBuffers")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConstantBuffers;

		/// <summary>
		/// Number of bound resources<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BoundResources")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BoundResources;

		/// <summary>
		/// Number of emitted instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InstructionCount;

		/// <summary>
		/// Number of temporary registers used <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempRegisterCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempRegisterCount;

		/// <summary>
		/// Number of temporary arrays used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TempArrayCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TempArrayCount;

		/// <summary>
		/// Number of constant defines <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DefCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DefCount;

		/// <summary>
		/// Number of declarations (input + output)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DclCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DclCount;

		/// <summary>
		/// Number of non-categorized texture instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureNormalInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureNormalInstructions;

		/// <summary>
		/// Number of texture load instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureLoadInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureLoadInstructions;

		/// <summary>
		/// Number of texture comparison instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureCompInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureCompInstructions;

		/// <summary>
		/// Number of texture bias instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureBiasInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureBiasInstructions;

		/// <summary>
		/// Number of texture gradient instructions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "TextureGradientInstructions")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TextureGradientInstructions;

		/// <summary>
		/// Number of floating point arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FloatInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FloatInstructionCount;

		/// <summary>
		/// Number of signed integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "IntInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IntInstructionCount;

		/// <summary>
		/// Number of unsigned integer arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "UintInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint UintInstructionCount;

		/// <summary>
		/// Number of static flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "StaticFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint StaticFlowControlCount;

		/// <summary>
		/// Number of dynamic flow control instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DynamicFlowControlCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DynamicFlowControlCount;

		/// <summary>
		/// Number of macro instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MacroInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MacroInstructionCount;

		/// <summary>
		/// Number of array instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ArrayInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ArrayInstructionCount;

		/// <summary>
		/// Number of mov instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MovInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MovInstructionCount;

		/// <summary>
		/// Number of movc instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MovcInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MovcInstructionCount;

		/// <summary>
		/// Number of type conversion instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ConversionInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConversionInstructionCount;

		/// <summary>
		/// Number of bitwise arithmetic instructions used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "BitwiseInstructionCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BitwiseInstructionCount;

		/// <summary>
		/// Min target of the function byte code<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "MinFeatureLevel")]
		[NativeName(NativeNameType.Type, "D3D_FEATURE_LEVEL")]
		public D3DFeatureLevel MinFeatureLevel;

		/// <summary>
		/// Required feature flags<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "RequiredFeatureFlags")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong RequiredFeatureFlags;

		/// <summary>
		/// Function name<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Number of logical parameters in the function signature (not including return)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FunctionParameterCount")]
		[NativeName(NativeNameType.Type, "INT")]
		public int FunctionParameterCount;

		/// <summary>
		/// TRUE, if function returns a value, false - it is a subroutine<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "HasReturn")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int HasReturn;

		/// <summary>
		/// TRUE, if there is a 10L9 VS blob<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Has10Level9VertexShader")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Has10Level9VertexShader;

		/// <summary>
		/// TRUE, if there is a 10L9 PS blob<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Has10Level9PixelShader")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Has10Level9PixelShader;



	}

	[NativeName(NativeNameType.StructOrClass, "_D3D12_PARAMETER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ParameterDesc
	{
		/// <summary>
		/// Parameter name.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* Name;

		/// <summary>
		/// Parameter semantic name (+index).<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "SemanticName")]
		[NativeName(NativeNameType.Type, "LPCSTR")]
		public unsafe byte* SemanticName;

		/// <summary>
		/// Element type.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_VARIABLE_TYPE")]
		public D3DShaderVariableType Type;

		/// <summary>
		/// Scalar/Vector/Matrix.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Class")]
		[NativeName(NativeNameType.Type, "D3D_SHADER_VARIABLE_CLASS")]
		public D3DShaderVariableClass Class;

		/// <summary>
		/// Rows are for matrix parameters.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Rows")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Rows;

		/// <summary>
		/// Components or Columns in matrix.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Columns")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Columns;

		/// <summary>
		/// Interpolation mode.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "InterpolationMode")]
		[NativeName(NativeNameType.Type, "D3D_INTERPOLATION_MODE")]
		public D3DInterpolationMode InterpolationMode;

		/// <summary>
		/// Parameter modifiers.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D_PARAMETER_FLAGS")]
		public D3DParameterFlags Flags;

		/// <summary>
		/// The first input register for this parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FirstInRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstInRegister;

		/// <summary>
		/// The first input register component for this parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FirstInComponent")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstInComponent;

		/// <summary>
		/// The first output register for this parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FirstOutRegister")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstOutRegister;

		/// <summary>
		/// The first output register component for this parameter.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "FirstOutComponent")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FirstOutComponent;



	}

	/// <summary>
	/// {E913C351-783D-48CA-A1D1-4F306284AD56}<br/>
	/// </summary>
	[Guid("e913c351-783d-48ca-a1d1-4f306284ad56")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12ShaderReflectionType")]
	public partial struct ID3D12ShaderReflectionType : IComObject, IComObject<ID3D12ShaderReflectionType>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("e913c351-783d-48ca-a1d1-4f306284ad56");

		public unsafe ID3D12ShaderReflectionType (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_TYPE_DESC*")] D3D12ShaderTypeDesc* pDesc)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, D3D12ShaderTypeDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_TYPE_DESC*")] ref D3D12ShaderTypeDesc pDesc)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderTypeDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, D3D12ShaderTypeDesc*, HResult>)(*LpVtbl))(ptr, (D3D12ShaderTypeDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetMemberTypeByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")]
		public readonly unsafe ID3D12ShaderReflectionType* GetMemberTypeByIndex([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, uint, ID3D12ShaderReflectionType*>)(LpVtbl[1]))(ptr, index);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMemberTypeByName")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")]
		public readonly unsafe ID3D12ShaderReflectionType* GetMemberTypeByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, byte*, ID3D12ShaderReflectionType*>)(LpVtbl[2]))(ptr, name);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMemberTypeName")]
		[return: NativeName(NativeNameType.Type, "LPCSTR")]
		public readonly unsafe byte* GetMemberTypeName([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			byte* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, uint, byte*>)(LpVtbl[3]))(ptr, index);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsEqual")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult IsEqual([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")] ID3D12ShaderReflectionType* pType)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*, HResult>)(LpVtbl[4]))(ptr, pType);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsEqual")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult IsEqual([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")] ref ID3D12ShaderReflectionType pType)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ShaderReflectionType* ppType = &pType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*, HResult>)(LpVtbl[4]))(ptr, (ID3D12ShaderReflectionType*)ppType);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetSubType")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")]
		public readonly unsafe ID3D12ShaderReflectionType* GetSubType()
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*>)(LpVtbl[5]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetBaseClass")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")]
		public readonly unsafe ID3D12ShaderReflectionType* GetBaseClass()
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*>)(LpVtbl[6]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetNumInterfaces")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetNumInterfaces()
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, uint>)(LpVtbl[7]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetInterfaceByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")]
		public readonly unsafe ID3D12ShaderReflectionType* GetInterfaceByIndex([NativeName(NativeNameType.Param, "uIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uIndex)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, uint, ID3D12ShaderReflectionType*>)(LpVtbl[8]))(ptr, uIndex);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsOfType")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult IsOfType([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")] ID3D12ShaderReflectionType* pType)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*, HResult>)(LpVtbl[9]))(ptr, pType);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsOfType")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult IsOfType([NativeName(NativeNameType.Param, "pType")] [NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")] ref ID3D12ShaderReflectionType pType)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ShaderReflectionType* ppType = &pType)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*, HResult>)(LpVtbl[9]))(ptr, (ID3D12ShaderReflectionType*)ppType);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ImplementsInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ImplementsInterface([NativeName(NativeNameType.Param, "pBase")] [NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")] ID3D12ShaderReflectionType* pBase)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*, HResult>)(LpVtbl[10]))(ptr, pBase);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ImplementsInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ImplementsInterface([NativeName(NativeNameType.Param, "pBase")] [NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")] ref ID3D12ShaderReflectionType pBase)
		{
			ID3D12ShaderReflectionType* ptr = (ID3D12ShaderReflectionType*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ShaderReflectionType* ppBase = &pBase)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionType*, ID3D12ShaderReflectionType*, HResult>)(LpVtbl[10]))(ptr, (ID3D12ShaderReflectionType*)ppBase);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {8337A8A6-A216-444A-B2F4-314733A73AEA}<br/>
	/// </summary>
	[Guid("8337a8a6-a216-444a-b2f4-314733a73aea")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12ShaderReflectionVariable")]
	public partial struct ID3D12ShaderReflectionVariable : IComObject, IComObject<ID3D12ShaderReflectionVariable>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8337a8a6-a216-444a-b2f4-314733a73aea");

		public unsafe ID3D12ShaderReflectionVariable (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_VARIABLE_DESC*")] D3D12ShaderVariableDesc* pDesc)
		{
			ID3D12ShaderReflectionVariable* ptr = (ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionVariable*, D3D12ShaderVariableDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_VARIABLE_DESC*")] ref D3D12ShaderVariableDesc pDesc)
		{
			ID3D12ShaderReflectionVariable* ptr = (ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderVariableDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionVariable*, D3D12ShaderVariableDesc*, HResult>)(*LpVtbl))(ptr, (D3D12ShaderVariableDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetType")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionType*")]
		public readonly unsafe ID3D12ShaderReflectionType* GetType()
		{
			ID3D12ShaderReflectionVariable* ptr = (ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionType* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionVariable*, ID3D12ShaderReflectionType*>)(LpVtbl[1]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetBuffer")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionConstantBuffer*")]
		public readonly unsafe ID3D12ShaderReflectionConstantBuffer* GetBuffer()
		{
			ID3D12ShaderReflectionVariable* ptr = (ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionVariable*, ID3D12ShaderReflectionConstantBuffer*>)(LpVtbl[2]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetInterfaceSlot")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetInterfaceSlot([NativeName(NativeNameType.Param, "uArrayIndex")] [NativeName(NativeNameType.Type, "UINT")] uint uArrayIndex)
		{
			ID3D12ShaderReflectionVariable* ptr = (ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionVariable*, uint, uint>)(LpVtbl[3]))(ptr, uArrayIndex);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {C59598B4-48B3-4869-B9B1-B1618B14A8B7}<br/>
	/// </summary>
	[Guid("c59598b4-48b3-4869-b9b1-b1618b14a8b7")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12ShaderReflectionConstantBuffer")]
	public partial struct ID3D12ShaderReflectionConstantBuffer : IComObject, IComObject<ID3D12ShaderReflectionConstantBuffer>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c59598b4-48b3-4869-b9b1-b1618b14a8b7");

		public unsafe ID3D12ShaderReflectionConstantBuffer (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_BUFFER_DESC*")] D3D12ShaderBufferDesc* pDesc)
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, D3D12ShaderBufferDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_BUFFER_DESC*")] ref D3D12ShaderBufferDesc pDesc)
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderBufferDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, D3D12ShaderBufferDesc*, HResult>)(*LpVtbl))(ptr, (D3D12ShaderBufferDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetVariableByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionVariable*")]
		public readonly unsafe ID3D12ShaderReflectionVariable* GetVariableByIndex([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index)
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, uint, ID3D12ShaderReflectionVariable*>)(LpVtbl[1]))(ptr, index);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetVariableByName")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionVariable*")]
		public readonly unsafe ID3D12ShaderReflectionVariable* GetVariableByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name)
		{
			ID3D12ShaderReflectionConstantBuffer* ptr = (ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionVariable* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflectionConstantBuffer*, byte*, ID3D12ShaderReflectionVariable*>)(LpVtbl[2]))(ptr, name);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {5A58797D-A72C-478D-8BA2-EFC6B0EFE88E}<br/>
	/// </summary>
	[Guid("5a58797d-a72c-478d-8ba2-efc6b0efe88e")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12ShaderReflection")]
	public partial struct ID3D12ShaderReflection : IComObject, IComObject<ID3D12ShaderReflection>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("5a58797d-a72c-478d-8ba2-efc6b0efe88e");

		public unsafe ID3D12ShaderReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** ppv)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, Guid*, void**, HResult>)(*LpVtbl))(ptr, iid, ppv);
			return ret;
		}

		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] void** ppv)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)piid, ppv);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppv = &ppv)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, Guid*, void**, HResult>)(*LpVtbl))(ptr, iid, (void**)pppv);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "QueryInterface")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult QueryInterface([NativeName(NativeNameType.Param, "iid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid iid, [NativeName(NativeNameType.Param, "ppv")] [NativeName(NativeNameType.Type, "LPVOID*")] ref void* ppv)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* piid = &iid)
			{
				fixed (void** pppv = &ppv)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, Guid*, void**, HResult>)(*LpVtbl))(ptr, (Guid*)piid, (void**)pppv);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "AddRef")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint AddRef()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Release")]
		[return: NativeName(NativeNameType.Type, "ULONG")]
		public readonly unsafe uint Release()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(LpVtbl[2]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_DESC*")] D3D12ShaderDesc* pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, D3D12ShaderDesc*, HResult>)(LpVtbl[3]))(ptr, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_DESC*")] ref D3D12ShaderDesc pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, D3D12ShaderDesc*, HResult>)(LpVtbl[3]))(ptr, (D3D12ShaderDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetConstantBufferByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionConstantBuffer*")]
		public readonly unsafe ID3D12ShaderReflectionConstantBuffer* GetConstantBufferByIndex([NativeName(NativeNameType.Param, "Index")] [NativeName(NativeNameType.Type, "UINT")] uint index)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, ID3D12ShaderReflectionConstantBuffer*>)(LpVtbl[4]))(ptr, index);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetConstantBufferByName")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionConstantBuffer*")]
		public readonly unsafe ID3D12ShaderReflectionConstantBuffer* GetConstantBufferByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, byte*, ID3D12ShaderReflectionConstantBuffer*>)(LpVtbl[5]))(ptr, name);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetResourceBindingDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetResourceBindingDesc([NativeName(NativeNameType.Param, "ResourceIndex")] [NativeName(NativeNameType.Type, "UINT")] uint resourceIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_INPUT_BIND_DESC*")] D3D12ShaderInputBindDesc* pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, D3D12ShaderInputBindDesc*, HResult>)(LpVtbl[6]))(ptr, resourceIndex, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetResourceBindingDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetResourceBindingDesc([NativeName(NativeNameType.Param, "ResourceIndex")] [NativeName(NativeNameType.Type, "UINT")] uint resourceIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_INPUT_BIND_DESC*")] ref D3D12ShaderInputBindDesc pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, D3D12ShaderInputBindDesc*, HResult>)(LpVtbl[6]))(ptr, resourceIndex, (D3D12ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetInputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetInputParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SIGNATURE_PARAMETER_DESC*")] D3D12SignatureParameterDesc* pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, D3D12SignatureParameterDesc*, HResult>)(LpVtbl[7]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetInputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetInputParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SIGNATURE_PARAMETER_DESC*")] ref D3D12SignatureParameterDesc pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SignatureParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, D3D12SignatureParameterDesc*, HResult>)(LpVtbl[7]))(ptr, parameterIndex, (D3D12SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetOutputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetOutputParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SIGNATURE_PARAMETER_DESC*")] D3D12SignatureParameterDesc* pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, D3D12SignatureParameterDesc*, HResult>)(LpVtbl[8]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetOutputParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetOutputParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SIGNATURE_PARAMETER_DESC*")] ref D3D12SignatureParameterDesc pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SignatureParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, D3D12SignatureParameterDesc*, HResult>)(LpVtbl[8]))(ptr, parameterIndex, (D3D12SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetPatchConstantParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPatchConstantParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SIGNATURE_PARAMETER_DESC*")] D3D12SignatureParameterDesc* pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, D3D12SignatureParameterDesc*, HResult>)(LpVtbl[9]))(ptr, parameterIndex, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetPatchConstantParameterDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetPatchConstantParameterDesc([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "UINT")] uint parameterIndex, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SIGNATURE_PARAMETER_DESC*")] ref D3D12SignatureParameterDesc pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12SignatureParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint, D3D12SignatureParameterDesc*, HResult>)(LpVtbl[9]))(ptr, parameterIndex, (D3D12SignatureParameterDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetResourceBindingDescByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_INPUT_BIND_DESC*")] D3D12ShaderInputBindDesc* pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, byte*, D3D12ShaderInputBindDesc*, HResult>)(LpVtbl[11]))(ptr, name, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetResourceBindingDescByName")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetResourceBindingDescByName([NativeName(NativeNameType.Param, "Name")] [NativeName(NativeNameType.Type, "LPCSTR")] byte* name, [NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_SHADER_INPUT_BIND_DESC*")] ref D3D12ShaderInputBindDesc pDesc)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ShaderInputBindDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, byte*, D3D12ShaderInputBindDesc*, HResult>)(LpVtbl[11]))(ptr, name, (D3D12ShaderInputBindDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetMovInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetMovInstructionCount()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(LpVtbl[12]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMovcInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetMovcInstructionCount()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(LpVtbl[13]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetConversionInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetConversionInstructionCount()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(LpVtbl[14]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetBitwiseInstructionCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetBitwiseInstructionCount()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(LpVtbl[15]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetGSInputPrimitive")]
		[return: NativeName(NativeNameType.Type, "D3D_PRIMITIVE")]
		public readonly unsafe D3DPrimitive GetGSInputPrimitive()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3DPrimitive ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, D3DPrimitive>)(LpVtbl[16]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "IsSampleFrequencyShader")]
		[return: NativeName(NativeNameType.Type, "BOOL")]
		public readonly unsafe int IsSampleFrequencyShader()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			int ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, int>)(LpVtbl[17]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetNumInterfaceSlots")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetNumInterfaceSlots()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint>)(LpVtbl[18]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMinFeatureLevel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetMinFeatureLevel([NativeName(NativeNameType.Param, "pLevel")] [NativeName(NativeNameType.Type, "D3D_FEATURE_LEVEL*")] D3DFeatureLevel* pLevel)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, D3DFeatureLevel*, HResult>)(LpVtbl[19]))(ptr, pLevel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMinFeatureLevel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetMinFeatureLevel([NativeName(NativeNameType.Param, "pLevel")] [NativeName(NativeNameType.Type, "D3D_FEATURE_LEVEL*")] ref D3DFeatureLevel pLevel)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3DFeatureLevel* ppLevel = &pLevel)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, D3DFeatureLevel*, HResult>)(LpVtbl[19]))(ptr, (D3DFeatureLevel*)ppLevel);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, pSizeX, pSizeY, pSizeZ);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, (uint*)ppSizeX, pSizeY, pSizeZ);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeY = &pSizeY)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, pSizeX, (uint*)ppSizeY, pSizeZ);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeZ)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, (uint*)ppSizeX, (uint*)ppSizeY, pSizeZ);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeZ = &pSizeZ)
			{
				uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, pSizeX, pSizeY, (uint*)ppSizeZ);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, (uint*)ppSizeX, pSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] uint* pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeY = &pSizeY)
			{
				fixed (uint* ppSizeZ = &pSizeZ)
				{
					uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, pSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetThreadGroupSize")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetThreadGroupSize([NativeName(NativeNameType.Param, "pSizeX")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeX, [NativeName(NativeNameType.Param, "pSizeY")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeY, [NativeName(NativeNameType.Param, "pSizeZ")] [NativeName(NativeNameType.Type, "UINT*")] ref uint pSizeZ)
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppSizeX = &pSizeX)
			{
				fixed (uint* ppSizeY = &pSizeY)
				{
					fixed (uint* ppSizeZ = &pSizeZ)
					{
						uint ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, uint*, uint*, uint*, uint>)(LpVtbl[20]))(ptr, (uint*)ppSizeX, (uint*)ppSizeY, (uint*)ppSizeZ);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "GetRequiresFlags")]
		[return: NativeName(NativeNameType.Type, "UINT64")]
		public readonly unsafe ulong GetRequiresFlags()
		{
			ID3D12ShaderReflection* ptr = (ID3D12ShaderReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ulong ret = ((delegate* unmanaged[Stdcall]<ID3D12ShaderReflection*, ulong>)(LpVtbl[21]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12ShaderReflection value)
		{
			return Unsafe.As<ID3D12ShaderReflection, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// {8E349D19-54DB-4A56-9DC9-119D87BDB804}<br/>
	/// </summary>
	[Guid("8e349d19-54db-4a56-9dc9-119d87bdb804")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12LibraryReflection")]
	public partial struct ID3D12LibraryReflection : IComObject, IComObject<ID3D12LibraryReflection>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8e349d19-54db-4a56-9dc9-119d87bdb804");

		public unsafe ID3D12LibraryReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_LIBRARY_DESC*")] D3D12LibraryDesc* pDesc)
		{
			ID3D12LibraryReflection* ptr = (ID3D12LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12LibraryReflection*, D3D12LibraryDesc*, HResult>)(LpVtbl[3]))(ptr, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_LIBRARY_DESC*")] ref D3D12LibraryDesc pDesc)
		{
			ID3D12LibraryReflection* ptr = (ID3D12LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12LibraryDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12LibraryReflection*, D3D12LibraryDesc*, HResult>)(LpVtbl[3]))(ptr, (D3D12LibraryDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetFunctionByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D12FunctionReflection*")]
		public readonly unsafe ID3D12FunctionReflection* GetFunctionByIndex([NativeName(NativeNameType.Param, "FunctionIndex")] [NativeName(NativeNameType.Type, "INT")] int functionIndex)
		{
			ID3D12LibraryReflection* ptr = (ID3D12LibraryReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12FunctionReflection* ret = ((delegate* unmanaged[Stdcall]<ID3D12LibraryReflection*, int, ID3D12FunctionReflection*>)(LpVtbl[4]))(ptr, functionIndex);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12LibraryReflection value)
		{
			return Unsafe.As<ID3D12LibraryReflection, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// {1108795C-2772-4BA9-B2A8-D464DC7E2799}<br/>
	/// </summary>
	[Guid("1108795c-2772-4ba9-b2a8-d464dc7e2799")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12FunctionReflection")]
	public partial struct ID3D12FunctionReflection : IComObject, IComObject<ID3D12FunctionReflection>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1108795c-2772-4ba9-b2a8-d464dc7e2799");

		public unsafe ID3D12FunctionReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_FUNCTION_DESC*")] D3D12FunctionDesc* pDesc)
		{
			ID3D12FunctionReflection* ptr = (ID3D12FunctionReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, D3D12FunctionDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_FUNCTION_DESC*")] ref D3D12FunctionDesc pDesc)
		{
			ID3D12FunctionReflection* ptr = (ID3D12FunctionReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12FunctionDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, D3D12FunctionDesc*, HResult>)(*LpVtbl))(ptr, (D3D12FunctionDesc*)ppDesc);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetConstantBufferByIndex")]
		[return: NativeName(NativeNameType.Type, "ID3D12ShaderReflectionConstantBuffer*")]
		public readonly unsafe ID3D12ShaderReflectionConstantBuffer* GetConstantBufferByIndex([NativeName(NativeNameType.Param, "BufferIndex")] [NativeName(NativeNameType.Type, "UINT")] uint bufferIndex)
		{
			ID3D12FunctionReflection* ptr = (ID3D12FunctionReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12ShaderReflectionConstantBuffer* ret = ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, uint, ID3D12ShaderReflectionConstantBuffer*>)(LpVtbl[1]))(ptr, bufferIndex);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetFunctionParameter")]
		[return: NativeName(NativeNameType.Type, "ID3D12FunctionParameterReflection*")]
		public readonly unsafe ID3D12FunctionParameterReflection* GetFunctionParameter([NativeName(NativeNameType.Param, "ParameterIndex")] [NativeName(NativeNameType.Type, "INT")] int parameterIndex)
		{
			ID3D12FunctionReflection* ptr = (ID3D12FunctionReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			ID3D12FunctionParameterReflection* ret = ((delegate* unmanaged[Stdcall]<ID3D12FunctionReflection*, int, ID3D12FunctionParameterReflection*>)(LpVtbl[6]))(ptr, parameterIndex);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	/// <summary>
	/// {EC25F42D-7006-4F2B-B33E-02CC3375733F}<br/>
	/// </summary>
	[Guid("ec25f42d-7006-4f2b-b33e-02cc3375733f")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12FunctionParameterReflection")]
	public partial struct ID3D12FunctionParameterReflection : IComObject, IComObject<ID3D12FunctionParameterReflection>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("ec25f42d-7006-4f2b-b33e-02cc3375733f");

		public unsafe ID3D12FunctionParameterReflection (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_PARAMETER_DESC*")] D3D12ParameterDesc* pDesc)
		{
			ID3D12FunctionParameterReflection* ptr = (ID3D12FunctionParameterReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12FunctionParameterReflection*, D3D12ParameterDesc*, HResult>)(*LpVtbl))(ptr, pDesc);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetDesc([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "D3D12_PARAMETER_DESC*")] ref D3D12ParameterDesc pDesc)
		{
			ID3D12FunctionParameterReflection* ptr = (ID3D12FunctionParameterReflection*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ParameterDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12FunctionParameterReflection*, D3D12ParameterDesc*, HResult>)(*LpVtbl))(ptr, (D3D12ParameterDesc*)ppDesc);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

	[Guid("0946b7c9-ebf6-4047-bb73-8683e27dbb1f")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDecoderHeap")]
	public partial struct ID3D12VideoDecoderHeap : IComObject, IComObject<ID3D12VideoDecoderHeap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("0946b7c9-ebf6-4047-bb73-8683e27dbb1f");

		public unsafe ID3D12VideoDecoderHeap (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODER_HEAP_DESC")]
		public readonly unsafe D3D12VideoDecoderHeapDesc GetDesc()
		{
			ID3D12VideoDecoderHeap* ptr = (ID3D12VideoDecoderHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoDecoderHeapDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDecoderHeap*, D3D12VideoDecoderHeapDesc>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoDecoderHeap value)
		{
			return Unsafe.As<ID3D12VideoDecoderHeap, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoDecoderHeap value)
		{
			return Unsafe.As<ID3D12VideoDecoderHeap, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoDecoderHeap value)
		{
			return Unsafe.As<ID3D12VideoDecoderHeap, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDecoderHeap value)
		{
			return Unsafe.As<ID3D12VideoDecoderHeap, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODER_HEAP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecoderHeapDesc
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "Configuration")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONFIGURATION")]
		public D3D12VideoDecodeConfiguration Configuration;
		[NativeName(NativeNameType.Field, "DecodeWidth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DecodeWidth;
		[NativeName(NativeNameType.Field, "DecodeHeight")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DecodeHeight;
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "FrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational FrameRate;
		[NativeName(NativeNameType.Field, "BitRate")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BitRate;
		[NativeName(NativeNameType.Field, "MaxDecodePictureBufferCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxDecodePictureBufferCount;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_CONFIGURATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeConfiguration
	{
		[NativeName(NativeNameType.Field, "DecodeProfile")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid DecodeProfile;
		[NativeName(NativeNameType.Field, "BitstreamEncryption")]
		[NativeName(NativeNameType.Type, "D3D12_BITSTREAM_ENCRYPTION_TYPE")]
		public D3D12BitstreamEncryptionType BitstreamEncryption;
		[NativeName(NativeNameType.Field, "InterlaceType")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE")]
		public D3D12VideoFrameCodedInterlaceType InterlaceType;


	}

	[Guid("1f052807-0b46-4acc-8a89-364f793718a4")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDevice")]
	public partial struct ID3D12VideoDevice : IComObject, IComObject<ID3D12VideoDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1f052807-0b46-4acc-8a89-364f793718a4");

		public unsafe ID3D12VideoDevice (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CheckFeatureSupport")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CheckFeatureSupport([NativeName(NativeNameType.Param, "FeatureVideo")] [NativeName(NativeNameType.Type, "D3D12_FEATURE_VIDEO")] D3D12FeatureVideo featureVideo, [NativeName(NativeNameType.Param, "pFeatureSupportData")] [NativeName(NativeNameType.Type, "void*")] void* pFeatureSupportData, [NativeName(NativeNameType.Param, "FeatureSupportDataSize")] [NativeName(NativeNameType.Type, "UINT")] uint featureSupportDataSize)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, D3D12FeatureVideo, void*, uint, HResult>)(*LpVtbl))(ptr, featureVideo, pFeatureSupportData, featureSupportDataSize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] D3D12VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, D3D12VideoDecoderDesc*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pDesc, riid, ppVideoDecoder);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] ref D3D12VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, D3D12VideoDecoderDesc*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (D3D12VideoDecoderDesc*)ppDesc, riid, ppVideoDecoder);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] D3D12VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, D3D12VideoDecoderDesc*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, pDesc, (Guid*)priid, ppVideoDecoder);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] ref D3D12VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, D3D12VideoDecoderDesc*, Guid*, void**, HResult>)(LpVtbl[1]))(ptr, (D3D12VideoDecoderDesc*)ppDesc, (Guid*)priid, ppVideoDecoder);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] D3D12VideoDecoderHeapDesc* pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, D3D12VideoDecoderHeapDesc*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pVideoDecoderHeapDesc, riid, ppVideoDecoderHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] ref D3D12VideoDecoderHeapDesc pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderHeapDesc* ppVideoDecoderHeapDesc = &pVideoDecoderHeapDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, D3D12VideoDecoderHeapDesc*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (D3D12VideoDecoderHeapDesc*)ppVideoDecoderHeapDesc, riid, ppVideoDecoderHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] D3D12VideoDecoderHeapDesc* pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, D3D12VideoDecoderHeapDesc*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pVideoDecoderHeapDesc, (Guid*)priid, ppVideoDecoderHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] ref D3D12VideoDecoderHeapDesc pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderHeapDesc* ppVideoDecoderHeapDesc = &pVideoDecoderHeapDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, D3D12VideoDecoderHeapDesc*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (D3D12VideoDecoderHeapDesc*)ppVideoDecoderHeapDesc, (Guid*)priid, ppVideoDecoderHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, riid, ppVideoProcessor);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, riid, ppVideoProcessor);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, riid, ppVideoProcessor);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, riid, ppVideoProcessor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, (Guid*)priid, ppVideoProcessor);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, (Guid*)priid, ppVideoProcessor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, (Guid*)priid, ppVideoProcessor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice* ptr = (ID3D12VideoDevice*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, (Guid*)priid, ppVideoProcessor);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDevice value)
		{
			return Unsafe.As<ID3D12VideoDevice, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecoderDesc
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "Configuration")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONFIGURATION")]
		public D3D12VideoDecodeConfiguration Configuration;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessOutputStreamDesc
	{
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "ColorSpace")]
		[NativeName(NativeNameType.Type, "DXGI_COLOR_SPACE_TYPE")]
		public DxgiColorSpaceType ColorSpace;
		[NativeName(NativeNameType.Field, "AlphaFillMode")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE")]
		public D3D12VideoProcessAlphaFillMode AlphaFillMode;
		[NativeName(NativeNameType.Field, "AlphaFillModeSourceStreamIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint AlphaFillModeSourceStreamIndex;
		[NativeName(NativeNameType.Field, "BackgroundColor")]
		[NativeName(NativeNameType.Type, "FLOAT[4]")]
		public float BackgroundColor_0;
		public float BackgroundColor_1;
		public float BackgroundColor_2;
		public float BackgroundColor_3;
		[NativeName(NativeNameType.Field, "FrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational FrameRate;
		[NativeName(NativeNameType.Field, "EnableStereo")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int EnableStereo;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessInputStreamDesc
	{
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "ColorSpace")]
		[NativeName(NativeNameType.Type, "DXGI_COLOR_SPACE_TYPE")]
		public DxgiColorSpaceType ColorSpace;
		[NativeName(NativeNameType.Field, "SourceAspectRatio")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational SourceAspectRatio;
		[NativeName(NativeNameType.Field, "DestinationAspectRatio")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational DestinationAspectRatio;
		[NativeName(NativeNameType.Field, "FrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational FrameRate;
		[NativeName(NativeNameType.Field, "SourceSizeRange")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SIZE_RANGE")]
		public D3D12VideoSizeRange SourceSizeRange;
		[NativeName(NativeNameType.Field, "DestinationSizeRange")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SIZE_RANGE")]
		public D3D12VideoSizeRange DestinationSizeRange;
		[NativeName(NativeNameType.Field, "EnableOrientation")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int EnableOrientation;
		[NativeName(NativeNameType.Field, "FilterFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_FILTER_FLAGS")]
		public D3D12VideoProcessFilterFlags FilterFlags;
		[NativeName(NativeNameType.Field, "StereoFormat")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FRAME_STEREO_FORMAT")]
		public D3D12VideoFrameStereoFormat StereoFormat;
		[NativeName(NativeNameType.Field, "FieldType")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FIELD_TYPE")]
		public D3D12VideoFieldType FieldType;
		[NativeName(NativeNameType.Field, "DeinterlaceMode")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS")]
		public D3D12VideoProcessDeinterlaceFlags DeinterlaceMode;
		[NativeName(NativeNameType.Field, "EnableAlphaBlending")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int EnableAlphaBlending;
		[NativeName(NativeNameType.Field, "LumaKey")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_LUMA_KEY")]
		public D3D12VideoProcessLumaKey LumaKey;
		[NativeName(NativeNameType.Field, "NumPastFrames")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumPastFrames;
		[NativeName(NativeNameType.Field, "NumFutureFrames")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumFutureFrames;
		[NativeName(NativeNameType.Field, "EnableAutoProcessing")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int EnableAutoProcessing;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_SIZE_RANGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoSizeRange
	{
		[NativeName(NativeNameType.Field, "MaxWidth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxWidth;
		[NativeName(NativeNameType.Field, "MaxHeight")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxHeight;
		[NativeName(NativeNameType.Field, "MinWidth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MinWidth;
		[NativeName(NativeNameType.Field, "MinHeight")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MinHeight;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_LUMA_KEY")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessLumaKey
	{
		[NativeName(NativeNameType.Field, "Enable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Enable;
		[NativeName(NativeNameType.Field, "Lower")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float Lower;
		[NativeName(NativeNameType.Field, "Upper")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float Upper;


	}

	[Guid("c59b6bdc-7720-4074-a136-17a156037470")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDecoder")]
	public partial struct ID3D12VideoDecoder : IComObject, IComObject<ID3D12VideoDecoder>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("c59b6bdc-7720-4074-a136-17a156037470");

		public unsafe ID3D12VideoDecoder (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODER_DESC")]
		public readonly unsafe D3D12VideoDecoderDesc GetDesc()
		{
			ID3D12VideoDecoder* ptr = (ID3D12VideoDecoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoDecoderDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDecoder*, D3D12VideoDecoderDesc>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoDecoder value)
		{
			return Unsafe.As<ID3D12VideoDecoder, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoDecoder value)
		{
			return Unsafe.As<ID3D12VideoDecoder, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoDecoder value)
		{
			return Unsafe.As<ID3D12VideoDecoder, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDecoder value)
		{
			return Unsafe.As<ID3D12VideoDecoder, IUnknown>(ref value);
		}

	}

	[Guid("304fdb32-bede-410a-8545-943ac6a46138")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoProcessor")]
	public partial struct ID3D12VideoProcessor : IComObject, IComObject<ID3D12VideoProcessor>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("304fdb32-bede-410a-8545-943ac6a46138");

		public unsafe ID3D12VideoProcessor (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetNodeMask")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetNodeMask()
		{
			ID3D12VideoProcessor* ptr = (ID3D12VideoProcessor*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoProcessor*, uint>)(*LpVtbl))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetNumInputStreamDescs")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetNumInputStreamDescs()
		{
			ID3D12VideoProcessor* ptr = (ID3D12VideoProcessor*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoProcessor*, uint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetInputStreamDescs")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetInputStreamDescs([NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs)
		{
			ID3D12VideoProcessor* ptr = (ID3D12VideoProcessor*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoProcessor*, uint, D3D12VideoProcessInputStreamDesc*, HResult>)(LpVtbl[2]))(ptr, numInputStreamDescs, pInputStreamDescs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetInputStreamDescs")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetInputStreamDescs([NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs)
		{
			ID3D12VideoProcessor* ptr = (ID3D12VideoProcessor*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoProcessor*, uint, D3D12VideoProcessInputStreamDesc*, HResult>)(LpVtbl[2]))(ptr, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "GetOutputStreamDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC")]
		public readonly unsafe D3D12VideoProcessOutputStreamDesc GetOutputStreamDesc()
		{
			ID3D12VideoProcessor* ptr = (ID3D12VideoProcessor*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoProcessOutputStreamDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamDesc>)(LpVtbl[3]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoProcessor value)
		{
			return Unsafe.As<ID3D12VideoProcessor, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoProcessor value)
		{
			return Unsafe.As<ID3D12VideoProcessor, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoProcessor value)
		{
			return Unsafe.As<ID3D12VideoProcessor, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoProcessor value)
		{
			return Unsafe.As<ID3D12VideoProcessor, IUnknown>(ref value);
		}

	}

	[Guid("3b60536e-ad29-4e64-a269-f853837e5e53")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDecodeCommandList")]
	public partial struct ID3D12VideoDecodeCommandList : IComObject, IComObject<ID3D12VideoDecodeCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("3b60536e-ad29-4e64-a269-f853837e5e53");

		public unsafe ID3D12VideoDecodeCommandList (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "Reset")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Reset([NativeName(NativeNameType.Param, "pAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ID3D12CommandAllocator* pAllocator)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12CommandAllocator*, HResult>)(LpVtbl[2]))(ptr, pAllocator);
			return ret;
		}

		[NativeName(NativeNameType.Func, "Reset")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult Reset([NativeName(NativeNameType.Param, "pAllocator")] [NativeName(NativeNameType.Type, "ID3D12CommandAllocator*")] ref ID3D12CommandAllocator pAllocator)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12CommandAllocator* ppAllocator = &pAllocator)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12CommandAllocator*, HResult>)(LpVtbl[2]))(ptr, (ID3D12CommandAllocator*)ppAllocator);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "ClearState")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ClearState()
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, void>)(LpVtbl[3]))(ptr);
		}

		[NativeName(NativeNameType.Func, "DecodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ID3D12VideoDecoder* pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeInputStreamArguments* pInputArguments)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[13]))(ptr, pDecoder, pOutputArguments, pInputArguments);
		}

		[NativeName(NativeNameType.Func, "DecodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ref ID3D12VideoDecoder pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeInputStreamArguments* pInputArguments)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoDecoder* ppDecoder = &pDecoder)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoDecoder*)ppDecoder, pOutputArguments, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ID3D12VideoDecoder* pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeInputStreamArguments* pInputArguments)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecodeOutputStreamArguments* ppOutputArguments = &pOutputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[13]))(ptr, pDecoder, (D3D12VideoDecodeOutputStreamArguments*)ppOutputArguments, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ref ID3D12VideoDecoder pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeInputStreamArguments* pInputArguments)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D12VideoDecodeOutputStreamArguments* ppOutputArguments = &pOutputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoDecoder*)ppDecoder, (D3D12VideoDecodeOutputStreamArguments*)ppOutputArguments, pInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ID3D12VideoDecoder* pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeInputStreamArguments pInputArguments)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecodeInputStreamArguments* ppInputArguments = &pInputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[13]))(ptr, pDecoder, pOutputArguments, (D3D12VideoDecodeInputStreamArguments*)ppInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ref ID3D12VideoDecoder pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeInputStreamArguments pInputArguments)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D12VideoDecodeInputStreamArguments* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoDecoder*)ppDecoder, pOutputArguments, (D3D12VideoDecodeInputStreamArguments*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ID3D12VideoDecoder* pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeInputStreamArguments pInputArguments)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecodeOutputStreamArguments* ppOutputArguments = &pOutputArguments)
			{
				fixed (D3D12VideoDecodeInputStreamArguments* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[13]))(ptr, pDecoder, (D3D12VideoDecodeOutputStreamArguments*)ppOutputArguments, (D3D12VideoDecodeInputStreamArguments*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ref ID3D12VideoDecoder pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeInputStreamArguments pInputArguments)
		{
			ID3D12VideoDecodeCommandList* ptr = (ID3D12VideoDecodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D12VideoDecodeOutputStreamArguments* ppOutputArguments = &pOutputArguments)
				{
					fixed (D3D12VideoDecodeInputStreamArguments* ppInputArguments = &pInputArguments)
					{
						((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoDecoder*)ppDecoder, (D3D12VideoDecodeOutputStreamArguments*)ppOutputArguments, (D3D12VideoDecodeInputStreamArguments*)ppInputArguments);
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoDecodeCommandList value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoDecodeCommandList value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoDecodeCommandList value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDecodeCommandList value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeOutputStreamArguments
	{
		[NativeName(NativeNameType.Field, "pOutputTexture2D")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* POutputTexture2D;
		[NativeName(NativeNameType.Field, "OutputSubresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputSubresource;
		[NativeName(NativeNameType.Field, "ConversionArguments")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS")]
		public D3D12VideoDecodeConversionArguments ConversionArguments;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeConversionArguments
	{
		[NativeName(NativeNameType.Field, "Enable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Enable;
		[NativeName(NativeNameType.Field, "pReferenceTexture2D")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PReferenceTexture2D;
		[NativeName(NativeNameType.Field, "ReferenceSubresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ReferenceSubresource;
		[NativeName(NativeNameType.Field, "OutputColorSpace")]
		[NativeName(NativeNameType.Type, "DXGI_COLOR_SPACE_TYPE")]
		public DxgiColorSpaceType OutputColorSpace;
		[NativeName(NativeNameType.Field, "DecodeColorSpace")]
		[NativeName(NativeNameType.Type, "DXGI_COLOR_SPACE_TYPE")]
		public DxgiColorSpaceType DecodeColorSpace;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeInputStreamArguments
	{
		[NativeName(NativeNameType.Field, "NumFrameArguments")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumFrameArguments;
		[NativeName(NativeNameType.Field, "FrameArguments")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_FRAME_ARGUMENT[10]")]
		public D3D12VideoDecodeFrameArgument FrameArguments_0;
		public D3D12VideoDecodeFrameArgument FrameArguments_1;
		public D3D12VideoDecodeFrameArgument FrameArguments_2;
		public D3D12VideoDecodeFrameArgument FrameArguments_3;
		public D3D12VideoDecodeFrameArgument FrameArguments_4;
		public D3D12VideoDecodeFrameArgument FrameArguments_5;
		public D3D12VideoDecodeFrameArgument FrameArguments_6;
		public D3D12VideoDecodeFrameArgument FrameArguments_7;
		public D3D12VideoDecodeFrameArgument FrameArguments_8;
		public D3D12VideoDecodeFrameArgument FrameArguments_9;
		[NativeName(NativeNameType.Field, "ReferenceFrames")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_REFERENCE_FRAMES")]
		public D3D12VideoDecodeReferenceFrames ReferenceFrames;
		[NativeName(NativeNameType.Field, "CompressedBitstream")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM")]
		public D3D12VideoDecodeCompressedBitstream CompressedBitstream;
		[NativeName(NativeNameType.Field, "pHeap")]
		[NativeName(NativeNameType.Type, "ID3D12VideoDecoderHeap*")]
		public unsafe ID3D12VideoDecoderHeap* PHeap;


		public unsafe Span<D3D12VideoDecodeFrameArgument> FrameArguments
		
		{
			get
			{
				fixed (D3D12VideoDecodeFrameArgument* p = &this.FrameArguments_0)
				{
					return new Span<D3D12VideoDecodeFrameArgument>(p, 10);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_FRAME_ARGUMENT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeFrameArgument
	{
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_ARGUMENT_TYPE")]
		public D3D12VideoDecodeArgumentType Type;
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Size;
		[NativeName(NativeNameType.Field, "pData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* PData;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_REFERENCE_FRAMES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeReferenceFrames
	{
		[NativeName(NativeNameType.Field, "NumTexture2Ds")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumTexture2Ds;
		[NativeName(NativeNameType.Field, "ppTexture2Ds")]
		[NativeName(NativeNameType.Type, "ID3D12Resource**")]
		public unsafe ID3D12Resource** PpTexture2Ds;
		[NativeName(NativeNameType.Field, "pSubresources")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PSubresources;
		[NativeName(NativeNameType.Field, "ppHeaps")]
		[NativeName(NativeNameType.Type, "ID3D12VideoDecoderHeap**")]
		public unsafe ID3D12VideoDecoderHeap** PpHeaps;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeCompressedBitstream
	{
		[NativeName(NativeNameType.Field, "pBuffer")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PBuffer;
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Size;


	}

	[Guid("aeb2543a-167f-4682-acc8-d159ed4a6209")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoProcessCommandList")]
	public partial struct ID3D12VideoProcessCommandList : IComObject, IComObject<ID3D12VideoProcessCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("aeb2543a-167f-4682-acc8-d159ed4a6209");

		public unsafe ID3D12VideoProcessCommandList (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "ProcessFrames")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ID3D12VideoProcessor* pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessInputStreamArguments* pInputArguments)
		{
			ID3D12VideoProcessCommandList* ptr = (ID3D12VideoProcessCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments*, void>)(LpVtbl[13]))(ptr, pVideoProcessor, pOutputArguments, numInputStreams, pInputArguments);
		}

		[NativeName(NativeNameType.Func, "ProcessFrames")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ref ID3D12VideoProcessor pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessInputStreamArguments* pInputArguments)
		{
			ID3D12VideoProcessCommandList* ptr = (ID3D12VideoProcessCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoProcessor*)ppVideoProcessor, pOutputArguments, numInputStreams, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ID3D12VideoProcessor* pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessInputStreamArguments* pInputArguments)
		{
			ID3D12VideoProcessCommandList* ptr = (ID3D12VideoProcessCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamArguments* ppOutputArguments = &pOutputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments*, void>)(LpVtbl[13]))(ptr, pVideoProcessor, (D3D12VideoProcessOutputStreamArguments*)ppOutputArguments, numInputStreams, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ref ID3D12VideoProcessor pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessInputStreamArguments* pInputArguments)
		{
			ID3D12VideoProcessCommandList* ptr = (ID3D12VideoProcessCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D12VideoProcessOutputStreamArguments* ppOutputArguments = &pOutputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoProcessor*)ppVideoProcessor, (D3D12VideoProcessOutputStreamArguments*)ppOutputArguments, numInputStreams, pInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ID3D12VideoProcessor* pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessInputStreamArguments pInputArguments)
		{
			ID3D12VideoProcessCommandList* ptr = (ID3D12VideoProcessCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessInputStreamArguments* ppInputArguments = &pInputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments*, void>)(LpVtbl[13]))(ptr, pVideoProcessor, pOutputArguments, numInputStreams, (D3D12VideoProcessInputStreamArguments*)ppInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ref ID3D12VideoProcessor pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessInputStreamArguments pInputArguments)
		{
			ID3D12VideoProcessCommandList* ptr = (ID3D12VideoProcessCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D12VideoProcessInputStreamArguments* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoProcessor*)ppVideoProcessor, pOutputArguments, numInputStreams, (D3D12VideoProcessInputStreamArguments*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ID3D12VideoProcessor* pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessInputStreamArguments pInputArguments)
		{
			ID3D12VideoProcessCommandList* ptr = (ID3D12VideoProcessCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamArguments* ppOutputArguments = &pOutputArguments)
			{
				fixed (D3D12VideoProcessInputStreamArguments* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments*, void>)(LpVtbl[13]))(ptr, pVideoProcessor, (D3D12VideoProcessOutputStreamArguments*)ppOutputArguments, numInputStreams, (D3D12VideoProcessInputStreamArguments*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ref ID3D12VideoProcessor pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessInputStreamArguments pInputArguments)
		{
			ID3D12VideoProcessCommandList* ptr = (ID3D12VideoProcessCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D12VideoProcessOutputStreamArguments* ppOutputArguments = &pOutputArguments)
				{
					fixed (D3D12VideoProcessInputStreamArguments* ppInputArguments = &pInputArguments)
					{
						((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoProcessor*)ppVideoProcessor, (D3D12VideoProcessOutputStreamArguments*)ppOutputArguments, numInputStreams, (D3D12VideoProcessInputStreamArguments*)ppInputArguments);
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoProcessCommandList value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoProcessCommandList value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoProcessCommandList value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoProcessCommandList value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessOutputStreamArguments
	{
		[NativeName(NativeNameType.Field, "OutputStream")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_OUTPUT_STREAM[2]")]
		public D3D12VideoProcessOutputStream OutputStream_0;
		public D3D12VideoProcessOutputStream OutputStream_1;
		[NativeName(NativeNameType.Field, "TargetRectangle")]
		[NativeName(NativeNameType.Type, "D3D12_RECT")]
		public Rect32 TargetRectangle;


		public unsafe Span<D3D12VideoProcessOutputStream> OutputStream
		
		{
			get
			{
				fixed (D3D12VideoProcessOutputStream* p = &this.OutputStream_0)
				{
					return new Span<D3D12VideoProcessOutputStream>(p, 2);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_OUTPUT_STREAM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessOutputStream
	{
		[NativeName(NativeNameType.Field, "pTexture2D")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PTexture2D;
		[NativeName(NativeNameType.Field, "Subresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Subresource;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessInputStreamArguments
	{
		[NativeName(NativeNameType.Field, "InputStream")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_INPUT_STREAM[2]")]
		public D3D12VideoProcessInputStream InputStream_0;
		public D3D12VideoProcessInputStream InputStream_1;
		[NativeName(NativeNameType.Field, "Transform")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_TRANSFORM")]
		public D3D12VideoProcessTransform Transform;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS")]
		public D3D12VideoProcessInputStreamFlags Flags;
		[NativeName(NativeNameType.Field, "RateInfo")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE")]
		public D3D12VideoProcessInputStreamRate RateInfo;
		[NativeName(NativeNameType.Field, "FilterLevels")]
		[NativeName(NativeNameType.Type, "INT[32]")]
		public int FilterLevels_0;
		public int FilterLevels_1;
		public int FilterLevels_2;
		public int FilterLevels_3;
		public int FilterLevels_4;
		public int FilterLevels_5;
		public int FilterLevels_6;
		public int FilterLevels_7;
		public int FilterLevels_8;
		public int FilterLevels_9;
		public int FilterLevels_10;
		public int FilterLevels_11;
		public int FilterLevels_12;
		public int FilterLevels_13;
		public int FilterLevels_14;
		public int FilterLevels_15;
		public int FilterLevels_16;
		public int FilterLevels_17;
		public int FilterLevels_18;
		public int FilterLevels_19;
		public int FilterLevels_20;
		public int FilterLevels_21;
		public int FilterLevels_22;
		public int FilterLevels_23;
		public int FilterLevels_24;
		public int FilterLevels_25;
		public int FilterLevels_26;
		public int FilterLevels_27;
		public int FilterLevels_28;
		public int FilterLevels_29;
		public int FilterLevels_30;
		public int FilterLevels_31;
		[NativeName(NativeNameType.Field, "AlphaBlending")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_ALPHA_BLENDING")]
		public D3D12VideoProcessAlphaBlending AlphaBlending;


		public unsafe Span<D3D12VideoProcessInputStream> InputStream
		
		{
			get
			{
				fixed (D3D12VideoProcessInputStream* p = &this.InputStream_0)
				{
					return new Span<D3D12VideoProcessInputStream>(p, 2);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_INPUT_STREAM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessInputStream
	{
		[NativeName(NativeNameType.Field, "pTexture2D")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PTexture2D;
		[NativeName(NativeNameType.Field, "Subresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Subresource;
		[NativeName(NativeNameType.Field, "ReferenceSet")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_REFERENCE_SET")]
		public D3D12VideoProcessReferenceSet ReferenceSet;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_REFERENCE_SET")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessReferenceSet
	{
		[NativeName(NativeNameType.Field, "NumPastFrames")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumPastFrames;
		[NativeName(NativeNameType.Field, "ppPastFrames")]
		[NativeName(NativeNameType.Type, "ID3D12Resource**")]
		public unsafe ID3D12Resource** PpPastFrames;
		[NativeName(NativeNameType.Field, "pPastSubresources")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PPastSubresources;
		[NativeName(NativeNameType.Field, "NumFutureFrames")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumFutureFrames;
		[NativeName(NativeNameType.Field, "ppFutureFrames")]
		[NativeName(NativeNameType.Type, "ID3D12Resource**")]
		public unsafe ID3D12Resource** PpFutureFrames;
		[NativeName(NativeNameType.Field, "pFutureSubresources")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PFutureSubresources;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_TRANSFORM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessTransform
	{
		[NativeName(NativeNameType.Field, "SourceRectangle")]
		[NativeName(NativeNameType.Type, "D3D12_RECT")]
		public Rect32 SourceRectangle;
		[NativeName(NativeNameType.Field, "DestinationRectangle")]
		[NativeName(NativeNameType.Type, "D3D12_RECT")]
		public Rect32 DestinationRectangle;
		[NativeName(NativeNameType.Field, "Orientation")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_ORIENTATION")]
		public D3D12VideoProcessOrientation Orientation;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessInputStreamRate
	{
		[NativeName(NativeNameType.Field, "OutputIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputIndex;
		[NativeName(NativeNameType.Field, "InputFrameOrField")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InputFrameOrField;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_ALPHA_BLENDING")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessAlphaBlending
	{
		[NativeName(NativeNameType.Field, "Enable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Enable;
		[NativeName(NativeNameType.Field, "Alpha")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float Alpha;


	}

	[Guid("d52f011b-b56e-453c-a05a-a7f311c8f472")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDecodeCommandList1")]
	public partial struct ID3D12VideoDecodeCommandList1 : IComObject, IComObject<ID3D12VideoDecodeCommandList1>, IComObject<ID3D12VideoDecodeCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("d52f011b-b56e-453c-a05a-a7f311c8f472");

		public unsafe ID3D12VideoDecodeCommandList1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "DecodeFrame1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame1([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ID3D12VideoDecoder* pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*")] D3D12VideoDecodeOutputStreamArguments1* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeInputStreamArguments* pInputArguments)
		{
			ID3D12VideoDecodeCommandList1* ptr = (ID3D12VideoDecodeCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments1*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[14]))(ptr, pDecoder, pOutputArguments, pInputArguments);
		}

		[NativeName(NativeNameType.Func, "DecodeFrame1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame1([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ref ID3D12VideoDecoder pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*")] D3D12VideoDecodeOutputStreamArguments1* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeInputStreamArguments* pInputArguments)
		{
			ID3D12VideoDecodeCommandList1* ptr = (ID3D12VideoDecodeCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoDecoder* ppDecoder = &pDecoder)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments1*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[14]))(ptr, (ID3D12VideoDecoder*)ppDecoder, pOutputArguments, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame1([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ID3D12VideoDecoder* pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*")] ref D3D12VideoDecodeOutputStreamArguments1 pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeInputStreamArguments* pInputArguments)
		{
			ID3D12VideoDecodeCommandList1* ptr = (ID3D12VideoDecodeCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecodeOutputStreamArguments1* ppOutputArguments = &pOutputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments1*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[14]))(ptr, pDecoder, (D3D12VideoDecodeOutputStreamArguments1*)ppOutputArguments, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame1([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ref ID3D12VideoDecoder pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*")] ref D3D12VideoDecodeOutputStreamArguments1 pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] D3D12VideoDecodeInputStreamArguments* pInputArguments)
		{
			ID3D12VideoDecodeCommandList1* ptr = (ID3D12VideoDecodeCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D12VideoDecodeOutputStreamArguments1* ppOutputArguments = &pOutputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments1*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[14]))(ptr, (ID3D12VideoDecoder*)ppDecoder, (D3D12VideoDecodeOutputStreamArguments1*)ppOutputArguments, pInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame1([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ID3D12VideoDecoder* pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*")] D3D12VideoDecodeOutputStreamArguments1* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeInputStreamArguments pInputArguments)
		{
			ID3D12VideoDecodeCommandList1* ptr = (ID3D12VideoDecodeCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecodeInputStreamArguments* ppInputArguments = &pInputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments1*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[14]))(ptr, pDecoder, pOutputArguments, (D3D12VideoDecodeInputStreamArguments*)ppInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame1([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ref ID3D12VideoDecoder pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*")] D3D12VideoDecodeOutputStreamArguments1* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeInputStreamArguments pInputArguments)
		{
			ID3D12VideoDecodeCommandList1* ptr = (ID3D12VideoDecodeCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D12VideoDecodeInputStreamArguments* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments1*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[14]))(ptr, (ID3D12VideoDecoder*)ppDecoder, pOutputArguments, (D3D12VideoDecodeInputStreamArguments*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame1([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ID3D12VideoDecoder* pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*")] ref D3D12VideoDecodeOutputStreamArguments1 pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeInputStreamArguments pInputArguments)
		{
			ID3D12VideoDecodeCommandList1* ptr = (ID3D12VideoDecodeCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecodeOutputStreamArguments1* ppOutputArguments = &pOutputArguments)
			{
				fixed (D3D12VideoDecodeInputStreamArguments* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments1*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[14]))(ptr, pDecoder, (D3D12VideoDecodeOutputStreamArguments1*)ppOutputArguments, (D3D12VideoDecodeInputStreamArguments*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "DecodeFrame1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void DecodeFrame1([NativeName(NativeNameType.Param, "pDecoder")] [NativeName(NativeNameType.Type, "ID3D12VideoDecoder*")] ref ID3D12VideoDecoder pDecoder, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1*")] ref D3D12VideoDecodeOutputStreamArguments1 pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS*")] ref D3D12VideoDecodeInputStreamArguments pInputArguments)
		{
			ID3D12VideoDecodeCommandList1* ptr = (ID3D12VideoDecodeCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoDecoder* ppDecoder = &pDecoder)
			{
				fixed (D3D12VideoDecodeOutputStreamArguments1* ppOutputArguments = &pOutputArguments)
				{
					fixed (D3D12VideoDecodeInputStreamArguments* ppInputArguments = &pInputArguments)
					{
						((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList1*, ID3D12VideoDecoder*, D3D12VideoDecodeOutputStreamArguments1*, D3D12VideoDecodeInputStreamArguments*, void>)(LpVtbl[14]))(ptr, (ID3D12VideoDecoder*)ppDecoder, (D3D12VideoDecodeOutputStreamArguments1*)ppOutputArguments, (D3D12VideoDecodeInputStreamArguments*)ppInputArguments);
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoDecodeCommandList (ID3D12VideoDecodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList1, ID3D12VideoDecodeCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoDecodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList1, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoDecodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoDecodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDecodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList1, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeOutputStreamArguments1
	{
		[NativeName(NativeNameType.Field, "pOutputTexture2D")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* POutputTexture2D;
		[NativeName(NativeNameType.Field, "OutputSubresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputSubresource;
		[NativeName(NativeNameType.Field, "ConversionArguments")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1")]
		public D3D12VideoDecodeConversionArguments1 ConversionArguments;
		[NativeName(NativeNameType.Field, "Histograms")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM[4]")]
		public D3D12VideoDecodeOutputHistogram Histograms_0;
		public D3D12VideoDecodeOutputHistogram Histograms_1;
		public D3D12VideoDecodeOutputHistogram Histograms_2;
		public D3D12VideoDecodeOutputHistogram Histograms_3;


		public unsafe Span<D3D12VideoDecodeOutputHistogram> Histograms
		
		{
			get
			{
				fixed (D3D12VideoDecodeOutputHistogram* p = &this.Histograms_0)
				{
					return new Span<D3D12VideoDecodeOutputHistogram>(p, 4);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeConversionArguments1
	{
		[NativeName(NativeNameType.Field, "Enable")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Enable;
		[NativeName(NativeNameType.Field, "pReferenceTexture2D")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PReferenceTexture2D;
		[NativeName(NativeNameType.Field, "ReferenceSubresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ReferenceSubresource;
		[NativeName(NativeNameType.Field, "OutputColorSpace")]
		[NativeName(NativeNameType.Type, "DXGI_COLOR_SPACE_TYPE")]
		public DxgiColorSpaceType OutputColorSpace;
		[NativeName(NativeNameType.Field, "DecodeColorSpace")]
		[NativeName(NativeNameType.Type, "DXGI_COLOR_SPACE_TYPE")]
		public DxgiColorSpaceType DecodeColorSpace;
		[NativeName(NativeNameType.Field, "OutputWidth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputWidth;
		[NativeName(NativeNameType.Field, "OutputHeight")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint OutputHeight;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d12video_0000_0006 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoDecodeOutputHistogram
	{
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Offset;
		[NativeName(NativeNameType.Field, "pBuffer")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PBuffer;


	}

	[Guid("542c5c4d-7596-434f-8c93-4efa6766f267")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoProcessCommandList1")]
	public partial struct ID3D12VideoProcessCommandList1 : IComObject, IComObject<ID3D12VideoProcessCommandList1>, IComObject<ID3D12VideoProcessCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("542c5c4d-7596-434f-8c93-4efa6766f267");

		public unsafe ID3D12VideoProcessCommandList1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "ProcessFrames1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames1([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ID3D12VideoProcessor* pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*")] D3D12VideoProcessInputStreamArguments1* pInputArguments)
		{
			ID3D12VideoProcessCommandList1* ptr = (ID3D12VideoProcessCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments1*, void>)(LpVtbl[14]))(ptr, pVideoProcessor, pOutputArguments, numInputStreams, pInputArguments);
		}

		[NativeName(NativeNameType.Func, "ProcessFrames1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames1([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ref ID3D12VideoProcessor pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*")] D3D12VideoProcessInputStreamArguments1* pInputArguments)
		{
			ID3D12VideoProcessCommandList1* ptr = (ID3D12VideoProcessCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments1*, void>)(LpVtbl[14]))(ptr, (ID3D12VideoProcessor*)ppVideoProcessor, pOutputArguments, numInputStreams, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames1([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ID3D12VideoProcessor* pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*")] D3D12VideoProcessInputStreamArguments1* pInputArguments)
		{
			ID3D12VideoProcessCommandList1* ptr = (ID3D12VideoProcessCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamArguments* ppOutputArguments = &pOutputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments1*, void>)(LpVtbl[14]))(ptr, pVideoProcessor, (D3D12VideoProcessOutputStreamArguments*)ppOutputArguments, numInputStreams, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames1([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ref ID3D12VideoProcessor pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*")] D3D12VideoProcessInputStreamArguments1* pInputArguments)
		{
			ID3D12VideoProcessCommandList1* ptr = (ID3D12VideoProcessCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D12VideoProcessOutputStreamArguments* ppOutputArguments = &pOutputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments1*, void>)(LpVtbl[14]))(ptr, (ID3D12VideoProcessor*)ppVideoProcessor, (D3D12VideoProcessOutputStreamArguments*)ppOutputArguments, numInputStreams, pInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames1([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ID3D12VideoProcessor* pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*")] ref D3D12VideoProcessInputStreamArguments1 pInputArguments)
		{
			ID3D12VideoProcessCommandList1* ptr = (ID3D12VideoProcessCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessInputStreamArguments1* ppInputArguments = &pInputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments1*, void>)(LpVtbl[14]))(ptr, pVideoProcessor, pOutputArguments, numInputStreams, (D3D12VideoProcessInputStreamArguments1*)ppInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames1([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ref ID3D12VideoProcessor pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] D3D12VideoProcessOutputStreamArguments* pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*")] ref D3D12VideoProcessInputStreamArguments1 pInputArguments)
		{
			ID3D12VideoProcessCommandList1* ptr = (ID3D12VideoProcessCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D12VideoProcessInputStreamArguments1* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments1*, void>)(LpVtbl[14]))(ptr, (ID3D12VideoProcessor*)ppVideoProcessor, pOutputArguments, numInputStreams, (D3D12VideoProcessInputStreamArguments1*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames1([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ID3D12VideoProcessor* pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*")] ref D3D12VideoProcessInputStreamArguments1 pInputArguments)
		{
			ID3D12VideoProcessCommandList1* ptr = (ID3D12VideoProcessCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamArguments* ppOutputArguments = &pOutputArguments)
			{
				fixed (D3D12VideoProcessInputStreamArguments1* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments1*, void>)(LpVtbl[14]))(ptr, pVideoProcessor, (D3D12VideoProcessOutputStreamArguments*)ppOutputArguments, numInputStreams, (D3D12VideoProcessInputStreamArguments1*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "ProcessFrames1")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ProcessFrames1([NativeName(NativeNameType.Param, "pVideoProcessor")] [NativeName(NativeNameType.Type, "ID3D12VideoProcessor*")] ref ID3D12VideoProcessor pVideoProcessor, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS*")] ref D3D12VideoProcessOutputStreamArguments pOutputArguments, [NativeName(NativeNameType.Param, "NumInputStreams")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreams, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1*")] ref D3D12VideoProcessInputStreamArguments1 pInputArguments)
		{
			ID3D12VideoProcessCommandList1* ptr = (ID3D12VideoProcessCommandList1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoProcessor* ppVideoProcessor = &pVideoProcessor)
			{
				fixed (D3D12VideoProcessOutputStreamArguments* ppOutputArguments = &pOutputArguments)
				{
					fixed (D3D12VideoProcessInputStreamArguments1* ppInputArguments = &pInputArguments)
					{
						((delegate* unmanaged[Stdcall]<ID3D12VideoProcessCommandList1*, ID3D12VideoProcessor*, D3D12VideoProcessOutputStreamArguments*, uint, D3D12VideoProcessInputStreamArguments1*, void>)(LpVtbl[14]))(ptr, (ID3D12VideoProcessor*)ppVideoProcessor, (D3D12VideoProcessOutputStreamArguments*)ppOutputArguments, numInputStreams, (D3D12VideoProcessInputStreamArguments1*)ppInputArguments);
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoProcessCommandList (ID3D12VideoProcessCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList1, ID3D12VideoProcessCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoProcessCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList1, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoProcessCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoProcessCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoProcessCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList1, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d12video_0000_0007 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessInputStreamArguments1
	{
		[NativeName(NativeNameType.Field, "InputStream")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_INPUT_STREAM[2]")]
		public D3D12VideoProcessInputStream InputStream_0;
		public D3D12VideoProcessInputStream InputStream_1;
		[NativeName(NativeNameType.Field, "Transform")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_TRANSFORM")]
		public D3D12VideoProcessTransform Transform;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS")]
		public D3D12VideoProcessInputStreamFlags Flags;
		[NativeName(NativeNameType.Field, "RateInfo")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE")]
		public D3D12VideoProcessInputStreamRate RateInfo;
		[NativeName(NativeNameType.Field, "FilterLevels")]
		[NativeName(NativeNameType.Type, "INT[32]")]
		public int FilterLevels_0;
		public int FilterLevels_1;
		public int FilterLevels_2;
		public int FilterLevels_3;
		public int FilterLevels_4;
		public int FilterLevels_5;
		public int FilterLevels_6;
		public int FilterLevels_7;
		public int FilterLevels_8;
		public int FilterLevels_9;
		public int FilterLevels_10;
		public int FilterLevels_11;
		public int FilterLevels_12;
		public int FilterLevels_13;
		public int FilterLevels_14;
		public int FilterLevels_15;
		public int FilterLevels_16;
		public int FilterLevels_17;
		public int FilterLevels_18;
		public int FilterLevels_19;
		public int FilterLevels_20;
		public int FilterLevels_21;
		public int FilterLevels_22;
		public int FilterLevels_23;
		public int FilterLevels_24;
		public int FilterLevels_25;
		public int FilterLevels_26;
		public int FilterLevels_27;
		public int FilterLevels_28;
		public int FilterLevels_29;
		public int FilterLevels_30;
		public int FilterLevels_31;
		[NativeName(NativeNameType.Field, "AlphaBlending")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_ALPHA_BLENDING")]
		public D3D12VideoProcessAlphaBlending AlphaBlending;
		[NativeName(NativeNameType.Field, "FieldType")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FIELD_TYPE")]
		public D3D12VideoFieldType FieldType;


		public unsafe Span<D3D12VideoProcessInputStream> InputStream
		
		{
			get
			{
				fixed (D3D12VideoProcessInputStream* p = &this.InputStream_0)
				{
					return new Span<D3D12VideoProcessInputStream>(p, 2);
				}
			}
		}
	}

	[Guid("33fdae0e-098b-428f-87bb-34b695de08f8")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoMotionEstimator")]
	public partial struct ID3D12VideoMotionEstimator : IComObject, IComObject<ID3D12VideoMotionEstimator>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("33fdae0e-098b-428f-87bb-34b695de08f8");

		public unsafe ID3D12VideoMotionEstimator (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_ESTIMATOR_DESC")]
		public readonly unsafe D3D12VideoMotionEstimatorDesc GetDesc()
		{
			ID3D12VideoMotionEstimator* ptr = (ID3D12VideoMotionEstimator*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoMotionEstimatorDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoMotionEstimator*, D3D12VideoMotionEstimatorDesc>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoMotionEstimator value)
		{
			return Unsafe.As<ID3D12VideoMotionEstimator, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoMotionEstimator value)
		{
			return Unsafe.As<ID3D12VideoMotionEstimator, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoMotionEstimator value)
		{
			return Unsafe.As<ID3D12VideoMotionEstimator, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoMotionEstimator value)
		{
			return Unsafe.As<ID3D12VideoMotionEstimator, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_MOTION_ESTIMATOR_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoMotionEstimatorDesc
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "InputFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat InputFormat;
		[NativeName(NativeNameType.Field, "BlockSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE")]
		public D3D12VideoMotionEstimatorSearchBlockSize BlockSize;
		[NativeName(NativeNameType.Field, "Precision")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION")]
		public D3D12VideoMotionEstimatorVectorPrecision Precision;
		[NativeName(NativeNameType.Field, "SizeRange")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SIZE_RANGE")]
		public D3D12VideoSizeRange SizeRange;


	}

	[Guid("5be17987-743a-4061-834b-23d22daea505")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoMotionVectorHeap")]
	public partial struct ID3D12VideoMotionVectorHeap : IComObject, IComObject<ID3D12VideoMotionVectorHeap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("5be17987-743a-4061-834b-23d22daea505");

		public unsafe ID3D12VideoMotionVectorHeap (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC")]
		public readonly unsafe D3D12VideoMotionVectorHeapDesc GetDesc()
		{
			ID3D12VideoMotionVectorHeap* ptr = (ID3D12VideoMotionVectorHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoMotionVectorHeapDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoMotionVectorHeap*, D3D12VideoMotionVectorHeapDesc>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoMotionVectorHeap value)
		{
			return Unsafe.As<ID3D12VideoMotionVectorHeap, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoMotionVectorHeap value)
		{
			return Unsafe.As<ID3D12VideoMotionVectorHeap, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoMotionVectorHeap value)
		{
			return Unsafe.As<ID3D12VideoMotionVectorHeap, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoMotionVectorHeap value)
		{
			return Unsafe.As<ID3D12VideoMotionVectorHeap, IUnknown>(ref value);
		}

	}

	/// <summary>
	/// interface __MIDL_itf_d3d12video_0000_0009 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoMotionVectorHeapDesc
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "InputFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat InputFormat;
		[NativeName(NativeNameType.Field, "BlockSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE")]
		public D3D12VideoMotionEstimatorSearchBlockSize BlockSize;
		[NativeName(NativeNameType.Field, "Precision")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION")]
		public D3D12VideoMotionEstimatorVectorPrecision Precision;
		[NativeName(NativeNameType.Field, "SizeRange")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SIZE_RANGE")]
		public D3D12VideoSizeRange SizeRange;


	}

	[Guid("981611ad-a144-4c83-9890-f30e26d658ab")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDevice1")]
	public partial struct ID3D12VideoDevice1 : IComObject, IComObject<ID3D12VideoDevice1>, IComObject<ID3D12VideoDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("981611ad-a144-4c83-9890-f30e26d658ab");

		public unsafe ID3D12VideoDevice1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionEstimator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionEstimator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_DESC*")] D3D12VideoMotionEstimatorDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoMotionEstimator")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionEstimator)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionEstimatorDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pDesc, pProtectedResourceSession, riid, ppVideoMotionEstimator);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionEstimator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionEstimator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_DESC*")] ref D3D12VideoMotionEstimatorDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoMotionEstimator")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionEstimator)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionEstimatorDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionEstimatorDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (D3D12VideoMotionEstimatorDesc*)ppDesc, pProtectedResourceSession, riid, ppVideoMotionEstimator);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionEstimator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionEstimator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_DESC*")] D3D12VideoMotionEstimatorDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoMotionEstimator")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionEstimator)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionEstimatorDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoMotionEstimator);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionEstimator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionEstimator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_DESC*")] ref D3D12VideoMotionEstimatorDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoMotionEstimator")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionEstimator)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionEstimatorDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionEstimatorDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (D3D12VideoMotionEstimatorDesc*)ppDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoMotionEstimator);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionEstimator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionEstimator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_DESC*")] D3D12VideoMotionEstimatorDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoMotionEstimator")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionEstimator)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionEstimatorDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pDesc, pProtectedResourceSession, (Guid*)priid, ppVideoMotionEstimator);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionEstimator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionEstimator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_DESC*")] ref D3D12VideoMotionEstimatorDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoMotionEstimator")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionEstimator)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionEstimatorDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionEstimatorDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (D3D12VideoMotionEstimatorDesc*)ppDesc, pProtectedResourceSession, (Guid*)priid, ppVideoMotionEstimator);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionEstimator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionEstimator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_DESC*")] D3D12VideoMotionEstimatorDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoMotionEstimator")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionEstimator)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionEstimatorDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, pDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoMotionEstimator);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionEstimator")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionEstimator([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_DESC*")] ref D3D12VideoMotionEstimatorDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoMotionEstimator")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionEstimator)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionEstimatorDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionEstimatorDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, (D3D12VideoMotionEstimatorDesc*)ppDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoMotionEstimator);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionVectorHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*")] D3D12VideoMotionVectorHeapDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoMotionVectorHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionVectorHeap)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionVectorHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, pProtectedResourceSession, riid, ppVideoMotionVectorHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionVectorHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*")] ref D3D12VideoMotionVectorHeapDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoMotionVectorHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionVectorHeap)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionVectorHeapDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionVectorHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoMotionVectorHeapDesc*)ppDesc, pProtectedResourceSession, riid, ppVideoMotionVectorHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionVectorHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*")] D3D12VideoMotionVectorHeapDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoMotionVectorHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionVectorHeap)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionVectorHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoMotionVectorHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionVectorHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*")] ref D3D12VideoMotionVectorHeapDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoMotionVectorHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionVectorHeap)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionVectorHeapDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionVectorHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoMotionVectorHeapDesc*)ppDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoMotionVectorHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionVectorHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*")] D3D12VideoMotionVectorHeapDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoMotionVectorHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionVectorHeap)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionVectorHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, pProtectedResourceSession, (Guid*)priid, ppVideoMotionVectorHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionVectorHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*")] ref D3D12VideoMotionVectorHeapDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoMotionVectorHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionVectorHeap)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionVectorHeapDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionVectorHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoMotionVectorHeapDesc*)ppDesc, pProtectedResourceSession, (Guid*)priid, ppVideoMotionVectorHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionVectorHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*")] D3D12VideoMotionVectorHeapDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoMotionVectorHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionVectorHeap)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionVectorHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoMotionVectorHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoMotionVectorHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC*")] ref D3D12VideoMotionVectorHeapDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoMotionVectorHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoMotionVectorHeap)
		{
			ID3D12VideoDevice1* ptr = (ID3D12VideoDevice1*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionVectorHeapDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice1*, D3D12VideoMotionVectorHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoMotionVectorHeapDesc*)ppDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoMotionVectorHeap);
						return ret;
					}
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoDevice (ID3D12VideoDevice1 value)
		{
			return Unsafe.As<ID3D12VideoDevice1, ID3D12VideoDevice>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDevice1 value)
		{
			return Unsafe.As<ID3D12VideoDevice1, IUnknown>(ref value);
		}

	}

	[Guid("8455293a-0cbd-4831-9b39-fbdbab724723")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoEncodeCommandList")]
	public partial struct ID3D12VideoEncodeCommandList : IComObject, IComObject<ID3D12VideoEncodeCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8455293a-0cbd-4831-9b39-fbdbab724723");

		public unsafe ID3D12VideoEncodeCommandList (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "EstimateMotion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EstimateMotion([NativeName(NativeNameType.Param, "pMotionEstimator")] [NativeName(NativeNameType.Type, "ID3D12VideoMotionEstimator*")] ID3D12VideoMotionEstimator* pMotionEstimator, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*")] D3D12VideoMotionEstimatorOutput* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*")] D3D12VideoMotionEstimatorInput* pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, ID3D12VideoMotionEstimator*, D3D12VideoMotionEstimatorOutput*, D3D12VideoMotionEstimatorInput*, void>)(LpVtbl[13]))(ptr, pMotionEstimator, pOutputArguments, pInputArguments);
		}

		[NativeName(NativeNameType.Func, "EstimateMotion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EstimateMotion([NativeName(NativeNameType.Param, "pMotionEstimator")] [NativeName(NativeNameType.Type, "ID3D12VideoMotionEstimator*")] ref ID3D12VideoMotionEstimator pMotionEstimator, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*")] D3D12VideoMotionEstimatorOutput* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*")] D3D12VideoMotionEstimatorInput* pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoMotionEstimator* ppMotionEstimator = &pMotionEstimator)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, ID3D12VideoMotionEstimator*, D3D12VideoMotionEstimatorOutput*, D3D12VideoMotionEstimatorInput*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoMotionEstimator*)ppMotionEstimator, pOutputArguments, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "EstimateMotion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EstimateMotion([NativeName(NativeNameType.Param, "pMotionEstimator")] [NativeName(NativeNameType.Type, "ID3D12VideoMotionEstimator*")] ID3D12VideoMotionEstimator* pMotionEstimator, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*")] ref D3D12VideoMotionEstimatorOutput pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*")] D3D12VideoMotionEstimatorInput* pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionEstimatorOutput* ppOutputArguments = &pOutputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, ID3D12VideoMotionEstimator*, D3D12VideoMotionEstimatorOutput*, D3D12VideoMotionEstimatorInput*, void>)(LpVtbl[13]))(ptr, pMotionEstimator, (D3D12VideoMotionEstimatorOutput*)ppOutputArguments, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "EstimateMotion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EstimateMotion([NativeName(NativeNameType.Param, "pMotionEstimator")] [NativeName(NativeNameType.Type, "ID3D12VideoMotionEstimator*")] ref ID3D12VideoMotionEstimator pMotionEstimator, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*")] ref D3D12VideoMotionEstimatorOutput pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*")] D3D12VideoMotionEstimatorInput* pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoMotionEstimator* ppMotionEstimator = &pMotionEstimator)
			{
				fixed (D3D12VideoMotionEstimatorOutput* ppOutputArguments = &pOutputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, ID3D12VideoMotionEstimator*, D3D12VideoMotionEstimatorOutput*, D3D12VideoMotionEstimatorInput*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoMotionEstimator*)ppMotionEstimator, (D3D12VideoMotionEstimatorOutput*)ppOutputArguments, pInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EstimateMotion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EstimateMotion([NativeName(NativeNameType.Param, "pMotionEstimator")] [NativeName(NativeNameType.Type, "ID3D12VideoMotionEstimator*")] ID3D12VideoMotionEstimator* pMotionEstimator, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*")] D3D12VideoMotionEstimatorOutput* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*")] ref D3D12VideoMotionEstimatorInput pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionEstimatorInput* ppInputArguments = &pInputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, ID3D12VideoMotionEstimator*, D3D12VideoMotionEstimatorOutput*, D3D12VideoMotionEstimatorInput*, void>)(LpVtbl[13]))(ptr, pMotionEstimator, pOutputArguments, (D3D12VideoMotionEstimatorInput*)ppInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "EstimateMotion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EstimateMotion([NativeName(NativeNameType.Param, "pMotionEstimator")] [NativeName(NativeNameType.Type, "ID3D12VideoMotionEstimator*")] ref ID3D12VideoMotionEstimator pMotionEstimator, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*")] D3D12VideoMotionEstimatorOutput* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*")] ref D3D12VideoMotionEstimatorInput pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoMotionEstimator* ppMotionEstimator = &pMotionEstimator)
			{
				fixed (D3D12VideoMotionEstimatorInput* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, ID3D12VideoMotionEstimator*, D3D12VideoMotionEstimatorOutput*, D3D12VideoMotionEstimatorInput*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoMotionEstimator*)ppMotionEstimator, pOutputArguments, (D3D12VideoMotionEstimatorInput*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EstimateMotion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EstimateMotion([NativeName(NativeNameType.Param, "pMotionEstimator")] [NativeName(NativeNameType.Type, "ID3D12VideoMotionEstimator*")] ID3D12VideoMotionEstimator* pMotionEstimator, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*")] ref D3D12VideoMotionEstimatorOutput pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*")] ref D3D12VideoMotionEstimatorInput pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoMotionEstimatorOutput* ppOutputArguments = &pOutputArguments)
			{
				fixed (D3D12VideoMotionEstimatorInput* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, ID3D12VideoMotionEstimator*, D3D12VideoMotionEstimatorOutput*, D3D12VideoMotionEstimatorInput*, void>)(LpVtbl[13]))(ptr, pMotionEstimator, (D3D12VideoMotionEstimatorOutput*)ppOutputArguments, (D3D12VideoMotionEstimatorInput*)ppInputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EstimateMotion")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EstimateMotion([NativeName(NativeNameType.Param, "pMotionEstimator")] [NativeName(NativeNameType.Type, "ID3D12VideoMotionEstimator*")] ref ID3D12VideoMotionEstimator pMotionEstimator, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT*")] ref D3D12VideoMotionEstimatorOutput pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT*")] ref D3D12VideoMotionEstimatorInput pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoMotionEstimator* ppMotionEstimator = &pMotionEstimator)
			{
				fixed (D3D12VideoMotionEstimatorOutput* ppOutputArguments = &pOutputArguments)
				{
					fixed (D3D12VideoMotionEstimatorInput* ppInputArguments = &pInputArguments)
					{
						((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, ID3D12VideoMotionEstimator*, D3D12VideoMotionEstimatorOutput*, D3D12VideoMotionEstimatorInput*, void>)(LpVtbl[13]))(ptr, (ID3D12VideoMotionEstimator*)ppMotionEstimator, (D3D12VideoMotionEstimatorOutput*)ppOutputArguments, (D3D12VideoMotionEstimatorInput*)ppInputArguments);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ResolveMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveMotionVectorHeap([NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*")] D3D12ResolveVideoMotionVectorHeapOutput* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*")] D3D12ResolveVideoMotionVectorHeapInput* pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, D3D12ResolveVideoMotionVectorHeapOutput*, D3D12ResolveVideoMotionVectorHeapInput*, void>)(LpVtbl[14]))(ptr, pOutputArguments, pInputArguments);
		}

		[NativeName(NativeNameType.Func, "ResolveMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveMotionVectorHeap([NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*")] ref D3D12ResolveVideoMotionVectorHeapOutput pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*")] D3D12ResolveVideoMotionVectorHeapInput* pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResolveVideoMotionVectorHeapOutput* ppOutputArguments = &pOutputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, D3D12ResolveVideoMotionVectorHeapOutput*, D3D12ResolveVideoMotionVectorHeapInput*, void>)(LpVtbl[14]))(ptr, (D3D12ResolveVideoMotionVectorHeapOutput*)ppOutputArguments, pInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveMotionVectorHeap([NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*")] D3D12ResolveVideoMotionVectorHeapOutput* pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*")] ref D3D12ResolveVideoMotionVectorHeapInput pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResolveVideoMotionVectorHeapInput* ppInputArguments = &pInputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, D3D12ResolveVideoMotionVectorHeapOutput*, D3D12ResolveVideoMotionVectorHeapInput*, void>)(LpVtbl[14]))(ptr, pOutputArguments, (D3D12ResolveVideoMotionVectorHeapInput*)ppInputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveMotionVectorHeap")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveMotionVectorHeap([NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT*")] ref D3D12ResolveVideoMotionVectorHeapOutput pOutputArguments, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT*")] ref D3D12ResolveVideoMotionVectorHeapInput pInputArguments)
		{
			ID3D12VideoEncodeCommandList* ptr = (ID3D12VideoEncodeCommandList*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12ResolveVideoMotionVectorHeapOutput* ppOutputArguments = &pOutputArguments)
			{
				fixed (D3D12ResolveVideoMotionVectorHeapInput* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList*, D3D12ResolveVideoMotionVectorHeapOutput*, D3D12ResolveVideoMotionVectorHeapInput*, void>)(LpVtbl[14]))(ptr, (D3D12ResolveVideoMotionVectorHeapOutput*)ppOutputArguments, (D3D12ResolveVideoMotionVectorHeapInput*)ppInputArguments);
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoEncodeCommandList value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoEncodeCommandList value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoEncodeCommandList value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoEncodeCommandList value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoMotionEstimatorOutput
	{
		[NativeName(NativeNameType.Field, "pMotionVectorHeap")]
		[NativeName(NativeNameType.Type, "ID3D12VideoMotionVectorHeap*")]
		public unsafe ID3D12VideoMotionVectorHeap* PMotionVectorHeap;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_MOTION_ESTIMATOR_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoMotionEstimatorInput
	{
		[NativeName(NativeNameType.Field, "pInputTexture2D")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PInputTexture2D;
		[NativeName(NativeNameType.Field, "InputSubresourceIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InputSubresourceIndex;
		[NativeName(NativeNameType.Field, "pReferenceTexture2D")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PReferenceTexture2D;
		[NativeName(NativeNameType.Field, "ReferenceSubresourceIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ReferenceSubresourceIndex;
		[NativeName(NativeNameType.Field, "pHintMotionVectorHeap")]
		[NativeName(NativeNameType.Type, "ID3D12VideoMotionVectorHeap*")]
		public unsafe ID3D12VideoMotionVectorHeap* PHintMotionVectorHeap;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResolveVideoMotionVectorHeapOutput
	{
		[NativeName(NativeNameType.Field, "pMotionVectorTexture2D")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PMotionVectorTexture2D;
		[NativeName(NativeNameType.Field, "MotionVectorCoordinate")]
		[NativeName(NativeNameType.Type, "D3D12_RESOURCE_COORDINATE")]
		public D3D12ResourceCoordinate MotionVectorCoordinate;


	}

	/// <summary>
	/// interface __MIDL_itf_d3d12video_0000_0011 <br/>
	/// [local] <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOURCE_COORDINATE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResourceCoordinate
	{
		[NativeName(NativeNameType.Field, "X")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong X;
		[NativeName(NativeNameType.Field, "Y")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Y;
		[NativeName(NativeNameType.Field, "Z")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Z;
		[NativeName(NativeNameType.Field, "SubresourceIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SubresourceIndex;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12ResolveVideoMotionVectorHeapInput
	{
		[NativeName(NativeNameType.Field, "pMotionVectorHeap")]
		[NativeName(NativeNameType.Type, "ID3D12VideoMotionVectorHeap*")]
		public unsafe ID3D12VideoMotionVectorHeap* PMotionVectorHeap;
		[NativeName(NativeNameType.Field, "PixelWidth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PixelWidth;
		[NativeName(NativeNameType.Field, "PixelHeight")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PixelHeight;


	}

	[Guid("79a2e5fb-ccd2-469a-9fde-195d10951f7e")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDecoder1")]
	public partial struct ID3D12VideoDecoder1 : IComObject, IComObject<ID3D12VideoDecoder1>, IComObject<ID3D12VideoDecoder>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("79a2e5fb-ccd2-469a-9fde-195d10951f7e");

		public unsafe ID3D12VideoDecoder1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoDecoder (ID3D12VideoDecoder1 value)
		{
			return Unsafe.As<ID3D12VideoDecoder1, ID3D12VideoDecoder>(ref value);
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoDecoder1 value)
		{
			return Unsafe.As<ID3D12VideoDecoder1, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoDecoder1 value)
		{
			return Unsafe.As<ID3D12VideoDecoder1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoDecoder1 value)
		{
			return Unsafe.As<ID3D12VideoDecoder1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDecoder1 value)
		{
			return Unsafe.As<ID3D12VideoDecoder1, IUnknown>(ref value);
		}

	}

	[Guid("da1d98c5-539f-41b2-bf6b-1198a03b6d26")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDecoderHeap1")]
	public partial struct ID3D12VideoDecoderHeap1 : IComObject, IComObject<ID3D12VideoDecoderHeap1>, IComObject<ID3D12VideoDecoderHeap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("da1d98c5-539f-41b2-bf6b-1198a03b6d26");

		public unsafe ID3D12VideoDecoderHeap1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoDecoderHeap (ID3D12VideoDecoderHeap1 value)
		{
			return Unsafe.As<ID3D12VideoDecoderHeap1, ID3D12VideoDecoderHeap>(ref value);
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoDecoderHeap1 value)
		{
			return Unsafe.As<ID3D12VideoDecoderHeap1, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoDecoderHeap1 value)
		{
			return Unsafe.As<ID3D12VideoDecoderHeap1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoDecoderHeap1 value)
		{
			return Unsafe.As<ID3D12VideoDecoderHeap1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDecoderHeap1 value)
		{
			return Unsafe.As<ID3D12VideoDecoderHeap1, IUnknown>(ref value);
		}

	}

	[Guid("f3cfe615-553f-425c-86d8-ee8c1b1fb01c")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoProcessor1")]
	public partial struct ID3D12VideoProcessor1 : IComObject, IComObject<ID3D12VideoProcessor1>, IComObject<ID3D12VideoProcessor>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("f3cfe615-553f-425c-86d8-ee8c1b1fb01c");

		public unsafe ID3D12VideoProcessor1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoProcessor (ID3D12VideoProcessor1 value)
		{
			return Unsafe.As<ID3D12VideoProcessor1, ID3D12VideoProcessor>(ref value);
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoProcessor1 value)
		{
			return Unsafe.As<ID3D12VideoProcessor1, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoProcessor1 value)
		{
			return Unsafe.As<ID3D12VideoProcessor1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoProcessor1 value)
		{
			return Unsafe.As<ID3D12VideoProcessor1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoProcessor1 value)
		{
			return Unsafe.As<ID3D12VideoProcessor1, IUnknown>(ref value);
		}

	}

	[Guid("554e41e8-ae8e-4a8c-b7d2-5b4f274a30e4")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoExtensionCommand")]
	public partial struct ID3D12VideoExtensionCommand : IComObject, IComObject<ID3D12VideoExtensionCommand>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("554e41e8-ae8e-4a8c-b7d2-5b4f274a30e4");

		public unsafe ID3D12VideoExtensionCommand (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetDesc")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_EXTENSION_COMMAND_DESC")]
		public readonly unsafe D3D12VideoExtensionCommandDesc GetDesc()
		{
			ID3D12VideoExtensionCommand* ptr = (ID3D12VideoExtensionCommand*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoExtensionCommandDesc ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoExtensionCommand*, D3D12VideoExtensionCommandDesc>)(*LpVtbl))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoExtensionCommand value)
		{
			return Unsafe.As<ID3D12VideoExtensionCommand, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoExtensionCommand value)
		{
			return Unsafe.As<ID3D12VideoExtensionCommand, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoExtensionCommand value)
		{
			return Unsafe.As<ID3D12VideoExtensionCommand, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoExtensionCommand value)
		{
			return Unsafe.As<ID3D12VideoExtensionCommand, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_EXTENSION_COMMAND_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoExtensionCommandDesc
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "CommandId")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid CommandId;


	}

	[Guid("f019ac49-f838-4a95-9b17-579437c8f513")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDevice2")]
	public partial struct ID3D12VideoDevice2 : IComObject, IComObject<ID3D12VideoDevice2>, IComObject<ID3D12VideoDevice1>, IComObject<ID3D12VideoDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("f019ac49-f838-4a95-9b17-579437c8f513");

		public unsafe ID3D12VideoDevice2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] D3D12VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pDesc, pProtectedResourceSession, riid, ppVideoDecoder);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] ref D3D12VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (D3D12VideoDecoderDesc*)ppDesc, pProtectedResourceSession, riid, ppVideoDecoder);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] D3D12VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoDecoder);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] ref D3D12VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (D3D12VideoDecoderDesc*)ppDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoDecoder);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] D3D12VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pDesc, pProtectedResourceSession, (Guid*)priid, ppVideoDecoder);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] ref D3D12VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (D3D12VideoDecoderDesc*)ppDesc, pProtectedResourceSession, (Guid*)priid, ppVideoDecoder);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] D3D12VideoDecoderDesc* pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, pDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoDecoder);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoder1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoder1([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_DESC*")] ref D3D12VideoDecoderDesc pDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoder)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[2]))(ptr, (D3D12VideoDecoderDesc*)ppDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoDecoder);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap1([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] D3D12VideoDecoderHeapDesc* pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pVideoDecoderHeapDesc, pProtectedResourceSession, riid, ppVideoDecoderHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap1([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] ref D3D12VideoDecoderHeapDesc pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderHeapDesc* ppVideoDecoderHeapDesc = &pVideoDecoderHeapDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12VideoDecoderHeapDesc*)ppVideoDecoderHeapDesc, pProtectedResourceSession, riid, ppVideoDecoderHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap1([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] D3D12VideoDecoderHeapDesc* pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pVideoDecoderHeapDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoDecoderHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap1([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] ref D3D12VideoDecoderHeapDesc pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderHeapDesc* ppVideoDecoderHeapDesc = &pVideoDecoderHeapDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12VideoDecoderHeapDesc*)ppVideoDecoderHeapDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoDecoderHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap1([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] D3D12VideoDecoderHeapDesc* pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pVideoDecoderHeapDesc, pProtectedResourceSession, (Guid*)priid, ppVideoDecoderHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap1([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] ref D3D12VideoDecoderHeapDesc pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderHeapDesc* ppVideoDecoderHeapDesc = &pVideoDecoderHeapDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12VideoDecoderHeapDesc*)ppVideoDecoderHeapDesc, pProtectedResourceSession, (Guid*)priid, ppVideoDecoderHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap1([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] D3D12VideoDecoderHeapDesc* pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, pVideoDecoderHeapDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoDecoderHeap);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoDecoderHeap1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoDecoderHeap1([NativeName(NativeNameType.Param, "pVideoDecoderHeapDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_DECODER_HEAP_DESC*")] ref D3D12VideoDecoderHeapDesc pVideoDecoderHeapDesc, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoDecoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoDecoderHeap)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoDecoderHeapDesc* ppVideoDecoderHeapDesc = &pVideoDecoderHeapDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoDecoderHeapDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[3]))(ptr, (D3D12VideoDecoderHeapDesc*)ppVideoDecoderHeapDesc, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoDecoderHeap);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, pProtectedResourceSession, riid, ppVideoProcessor);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, pProtectedResourceSession, riid, ppVideoProcessor);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, pProtectedResourceSession, riid, ppVideoProcessor);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, pProtectedResourceSession, riid, ppVideoProcessor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoProcessor);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoProcessor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoProcessor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoProcessor);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, pProtectedResourceSession, (Guid*)priid, ppVideoProcessor);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, pProtectedResourceSession, (Guid*)priid, ppVideoProcessor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, pProtectedResourceSession, (Guid*)priid, ppVideoProcessor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, pProtectedResourceSession, (Guid*)priid, ppVideoProcessor);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoProcessor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] D3D12VideoProcessInputStreamDesc* pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, pInputStreamDescs, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoProcessor);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] D3D12VideoProcessOutputStreamDesc* pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, pOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoProcessor);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoProcessor1")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoProcessor1([NativeName(NativeNameType.Param, "NodeMask")] [NativeName(NativeNameType.Type, "UINT")] uint nodeMask, [NativeName(NativeNameType.Param, "pOutputStreamDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")] ref D3D12VideoProcessOutputStreamDesc pOutputStreamDesc, [NativeName(NativeNameType.Param, "NumInputStreamDescs")] [NativeName(NativeNameType.Type, "UINT")] uint numInputStreamDescs, [NativeName(NativeNameType.Param, "pInputStreamDescs")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")] ref D3D12VideoProcessInputStreamDesc pInputStreamDescs, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoProcessor")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoProcessor)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoProcessOutputStreamDesc* ppOutputStreamDesc = &pOutputStreamDesc)
			{
				fixed (D3D12VideoProcessInputStreamDesc* ppInputStreamDescs = &pInputStreamDescs)
				{
					fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
					{
						fixed (Guid* priid = &riid)
						{
							HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, uint, D3D12VideoProcessOutputStreamDesc*, uint, D3D12VideoProcessInputStreamDesc*, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[4]))(ptr, nodeMask, (D3D12VideoProcessOutputStreamDesc*)ppOutputStreamDesc, numInputStreamDescs, (D3D12VideoProcessInputStreamDesc*)ppInputStreamDescs, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoProcessor);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoExtensionCommand([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_EXTENSION_COMMAND_DESC*")] D3D12VideoExtensionCommandDesc* pDesc, [NativeName(NativeNameType.Param, "pCreationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParameters, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoExtensionCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoExtensionCommand)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoExtensionCommandDesc*, void*, nuint, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, pCreationParameters, creationParametersDataSizeInBytes, pProtectedResourceSession, riid, ppVideoExtensionCommand);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoExtensionCommand([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_EXTENSION_COMMAND_DESC*")] ref D3D12VideoExtensionCommandDesc pDesc, [NativeName(NativeNameType.Param, "pCreationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParameters, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoExtensionCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoExtensionCommand)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoExtensionCommandDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoExtensionCommandDesc*, void*, nuint, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoExtensionCommandDesc*)ppDesc, pCreationParameters, creationParametersDataSizeInBytes, pProtectedResourceSession, riid, ppVideoExtensionCommand);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoExtensionCommand([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_EXTENSION_COMMAND_DESC*")] D3D12VideoExtensionCommandDesc* pDesc, [NativeName(NativeNameType.Param, "pCreationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParameters, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoExtensionCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoExtensionCommand)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoExtensionCommandDesc*, void*, nuint, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, pCreationParameters, creationParametersDataSizeInBytes, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoExtensionCommand);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoExtensionCommand([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_EXTENSION_COMMAND_DESC*")] ref D3D12VideoExtensionCommandDesc pDesc, [NativeName(NativeNameType.Param, "pCreationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParameters, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoExtensionCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoExtensionCommand)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoExtensionCommandDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoExtensionCommandDesc*, void*, nuint, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoExtensionCommandDesc*)ppDesc, pCreationParameters, creationParametersDataSizeInBytes, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, riid, ppVideoExtensionCommand);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoExtensionCommand([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_EXTENSION_COMMAND_DESC*")] D3D12VideoExtensionCommandDesc* pDesc, [NativeName(NativeNameType.Param, "pCreationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParameters, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoExtensionCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoExtensionCommand)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoExtensionCommandDesc*, void*, nuint, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, pCreationParameters, creationParametersDataSizeInBytes, pProtectedResourceSession, (Guid*)priid, ppVideoExtensionCommand);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoExtensionCommand([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_EXTENSION_COMMAND_DESC*")] ref D3D12VideoExtensionCommandDesc pDesc, [NativeName(NativeNameType.Param, "pCreationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParameters, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoExtensionCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoExtensionCommand)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoExtensionCommandDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoExtensionCommandDesc*, void*, nuint, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoExtensionCommandDesc*)ppDesc, pCreationParameters, creationParametersDataSizeInBytes, pProtectedResourceSession, (Guid*)priid, ppVideoExtensionCommand);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoExtensionCommand([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_EXTENSION_COMMAND_DESC*")] D3D12VideoExtensionCommandDesc* pDesc, [NativeName(NativeNameType.Param, "pCreationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParameters, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoExtensionCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoExtensionCommand)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoExtensionCommandDesc*, void*, nuint, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, pCreationParameters, creationParametersDataSizeInBytes, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoExtensionCommand);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoExtensionCommand([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_EXTENSION_COMMAND_DESC*")] ref D3D12VideoExtensionCommandDesc pDesc, [NativeName(NativeNameType.Param, "pCreationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pCreationParameters, [NativeName(NativeNameType.Param, "CreationParametersDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint creationParametersDataSizeInBytes, [NativeName(NativeNameType.Param, "pProtectedResourceSession")] [NativeName(NativeNameType.Type, "ID3D12ProtectedResourceSession*")] ref ID3D12ProtectedResourceSession pProtectedResourceSession, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoExtensionCommand")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoExtensionCommand)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoExtensionCommandDesc* ppDesc = &pDesc)
			{
				fixed (ID3D12ProtectedResourceSession* ppProtectedResourceSession = &pProtectedResourceSession)
				{
					fixed (Guid* priid = &riid)
					{
						HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, D3D12VideoExtensionCommandDesc*, void*, nuint, ID3D12ProtectedResourceSession*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoExtensionCommandDesc*)ppDesc, pCreationParameters, creationParametersDataSizeInBytes, (ID3D12ProtectedResourceSession*)ppProtectedResourceSession, (Guid*)priid, ppVideoExtensionCommand);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ExecuteExtensionCommand([NativeName(NativeNameType.Param, "pExtensionCommand")] [NativeName(NativeNameType.Type, "ID3D12VideoExtensionCommand*")] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeName(NativeNameType.Param, "pExecutionParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pExecutionParameters, [NativeName(NativeNameType.Param, "ExecutionParametersSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint executionParametersSizeInBytes, [NativeName(NativeNameType.Param, "pOutputData")] [NativeName(NativeNameType.Type, "void*")] void* pOutputData, [NativeName(NativeNameType.Param, "OutputDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint outputDataSizeInBytes)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, ID3D12VideoExtensionCommand*, void*, nuint, void*, nuint, HResult>)(LpVtbl[6]))(ptr, pExtensionCommand, pExecutionParameters, executionParametersSizeInBytes, pOutputData, outputDataSizeInBytes);
			return ret;
		}

		[NativeName(NativeNameType.Func, "ExecuteExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult ExecuteExtensionCommand([NativeName(NativeNameType.Param, "pExtensionCommand")] [NativeName(NativeNameType.Type, "ID3D12VideoExtensionCommand*")] ref ID3D12VideoExtensionCommand pExtensionCommand, [NativeName(NativeNameType.Param, "pExecutionParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pExecutionParameters, [NativeName(NativeNameType.Param, "ExecutionParametersSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint executionParametersSizeInBytes, [NativeName(NativeNameType.Param, "pOutputData")] [NativeName(NativeNameType.Type, "void*")] void* pOutputData, [NativeName(NativeNameType.Param, "OutputDataSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint outputDataSizeInBytes)
		{
			ID3D12VideoDevice2* ptr = (ID3D12VideoDevice2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoExtensionCommand* ppExtensionCommand = &pExtensionCommand)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice2*, ID3D12VideoExtensionCommand*, void*, nuint, void*, nuint, HResult>)(LpVtbl[6]))(ptr, (ID3D12VideoExtensionCommand*)ppExtensionCommand, pExecutionParameters, executionParametersSizeInBytes, pOutputData, outputDataSizeInBytes);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoDevice1 (ID3D12VideoDevice2 value)
		{
			return Unsafe.As<ID3D12VideoDevice2, ID3D12VideoDevice1>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoDevice (ID3D12VideoDevice2 value)
		{
			return Unsafe.As<ID3D12VideoDevice2, ID3D12VideoDevice>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDevice2 value)
		{
			return Unsafe.As<ID3D12VideoDevice2, IUnknown>(ref value);
		}

	}

	[Guid("6e120880-c114-4153-8036-d247051e1729")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDecodeCommandList2")]
	public partial struct ID3D12VideoDecodeCommandList2 : IComObject, IComObject<ID3D12VideoDecodeCommandList2>, IComObject<ID3D12VideoDecodeCommandList1>, IComObject<ID3D12VideoDecodeCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("6e120880-c114-4153-8036-d247051e1729");

		public unsafe ID3D12VideoDecodeCommandList2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "InitializeExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void InitializeExtensionCommand([NativeName(NativeNameType.Param, "pExtensionCommand")] [NativeName(NativeNameType.Type, "ID3D12VideoExtensionCommand*")] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeName(NativeNameType.Param, "pInitializationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pInitializationParameters, [NativeName(NativeNameType.Param, "InitializationParametersSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint initializationParametersSizeInBytes)
		{
			ID3D12VideoDecodeCommandList2* ptr = (ID3D12VideoDecodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList2*, ID3D12VideoExtensionCommand*, void*, nuint, void>)(LpVtbl[2]))(ptr, pExtensionCommand, pInitializationParameters, initializationParametersSizeInBytes);
		}

		[NativeName(NativeNameType.Func, "InitializeExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void InitializeExtensionCommand([NativeName(NativeNameType.Param, "pExtensionCommand")] [NativeName(NativeNameType.Type, "ID3D12VideoExtensionCommand*")] ref ID3D12VideoExtensionCommand pExtensionCommand, [NativeName(NativeNameType.Param, "pInitializationParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pInitializationParameters, [NativeName(NativeNameType.Param, "InitializationParametersSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint initializationParametersSizeInBytes)
		{
			ID3D12VideoDecodeCommandList2* ptr = (ID3D12VideoDecodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoExtensionCommand* ppExtensionCommand = &pExtensionCommand)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList2*, ID3D12VideoExtensionCommand*, void*, nuint, void>)(LpVtbl[2]))(ptr, (ID3D12VideoExtensionCommand*)ppExtensionCommand, pInitializationParameters, initializationParametersSizeInBytes);
			}
		}

		[NativeName(NativeNameType.Func, "ExecuteExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteExtensionCommand([NativeName(NativeNameType.Param, "pExtensionCommand")] [NativeName(NativeNameType.Type, "ID3D12VideoExtensionCommand*")] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeName(NativeNameType.Param, "pExecutionParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pExecutionParameters, [NativeName(NativeNameType.Param, "ExecutionParametersSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint executionParametersSizeInBytes)
		{
			ID3D12VideoDecodeCommandList2* ptr = (ID3D12VideoDecodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList2*, ID3D12VideoExtensionCommand*, void*, nuint, void>)(LpVtbl[3]))(ptr, pExtensionCommand, pExecutionParameters, executionParametersSizeInBytes);
		}

		[NativeName(NativeNameType.Func, "ExecuteExtensionCommand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ExecuteExtensionCommand([NativeName(NativeNameType.Param, "pExtensionCommand")] [NativeName(NativeNameType.Type, "ID3D12VideoExtensionCommand*")] ref ID3D12VideoExtensionCommand pExtensionCommand, [NativeName(NativeNameType.Param, "pExecutionParameters")] [NativeName(NativeNameType.Type, "const void*")] void* pExecutionParameters, [NativeName(NativeNameType.Param, "ExecutionParametersSizeInBytes")] [NativeName(NativeNameType.Type, "SIZE_T")] nuint executionParametersSizeInBytes)
		{
			ID3D12VideoDecodeCommandList2* ptr = (ID3D12VideoDecodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoExtensionCommand* ppExtensionCommand = &pExtensionCommand)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoDecodeCommandList2*, ID3D12VideoExtensionCommand*, void*, nuint, void>)(LpVtbl[3]))(ptr, (ID3D12VideoExtensionCommand*)ppExtensionCommand, pExecutionParameters, executionParametersSizeInBytes);
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoDecodeCommandList1 (ID3D12VideoDecodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList2, ID3D12VideoDecodeCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoDecodeCommandList (ID3D12VideoDecodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList2, ID3D12VideoDecodeCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoDecodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList2, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoDecodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList2, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoDecodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList2, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDecodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList2, IUnknown>(ref value);
		}

	}

	[Guid("2aee8c37-9562-42da-8abf-61efeb2e4513")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDecodeCommandList3")]
	public partial struct ID3D12VideoDecodeCommandList3 : IComObject, IComObject<ID3D12VideoDecodeCommandList3>, IComObject<ID3D12VideoDecodeCommandList2>, IComObject<ID3D12VideoDecodeCommandList1>, IComObject<ID3D12VideoDecodeCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("2aee8c37-9562-42da-8abf-61efeb2e4513");

		public unsafe ID3D12VideoDecodeCommandList3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoDecodeCommandList2 (ID3D12VideoDecodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList3, ID3D12VideoDecodeCommandList2>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoDecodeCommandList1 (ID3D12VideoDecodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList3, ID3D12VideoDecodeCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoDecodeCommandList (ID3D12VideoDecodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList3, ID3D12VideoDecodeCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoDecodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList3, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoDecodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList3, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoDecodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList3, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDecodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoDecodeCommandList3, IUnknown>(ref value);
		}

	}

	[Guid("db525ae4-6ad6-473c-baa7-59b2e37082e4")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoProcessCommandList2")]
	public partial struct ID3D12VideoProcessCommandList2 : IComObject, IComObject<ID3D12VideoProcessCommandList2>, IComObject<ID3D12VideoProcessCommandList1>, IComObject<ID3D12VideoProcessCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("db525ae4-6ad6-473c-baa7-59b2e37082e4");

		public unsafe ID3D12VideoProcessCommandList2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoProcessCommandList1 (ID3D12VideoProcessCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList2, ID3D12VideoProcessCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoProcessCommandList (ID3D12VideoProcessCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList2, ID3D12VideoProcessCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoProcessCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList2, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoProcessCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList2, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoProcessCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList2, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoProcessCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList2, IUnknown>(ref value);
		}

	}

	[Guid("1a0a4ca4-9f08-40ce-9558-b411fd2666ff")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoProcessCommandList3")]
	public partial struct ID3D12VideoProcessCommandList3 : IComObject, IComObject<ID3D12VideoProcessCommandList3>, IComObject<ID3D12VideoProcessCommandList2>, IComObject<ID3D12VideoProcessCommandList1>, IComObject<ID3D12VideoProcessCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("1a0a4ca4-9f08-40ce-9558-b411fd2666ff");

		public unsafe ID3D12VideoProcessCommandList3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoProcessCommandList2 (ID3D12VideoProcessCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList3, ID3D12VideoProcessCommandList2>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoProcessCommandList1 (ID3D12VideoProcessCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList3, ID3D12VideoProcessCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoProcessCommandList (ID3D12VideoProcessCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList3, ID3D12VideoProcessCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoProcessCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList3, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoProcessCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList3, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoProcessCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList3, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoProcessCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoProcessCommandList3, IUnknown>(ref value);
		}

	}

	[Guid("94971eca-2bdb-4769-88cf-3675ea757ebc")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoEncodeCommandList1")]
	public partial struct ID3D12VideoEncodeCommandList1 : IComObject, IComObject<ID3D12VideoEncodeCommandList1>, IComObject<ID3D12VideoEncodeCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("94971eca-2bdb-4769-88cf-3675ea757ebc");

		public unsafe ID3D12VideoEncodeCommandList1 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoEncodeCommandList (ID3D12VideoEncodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList1, ID3D12VideoEncodeCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoEncodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList1, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoEncodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList1, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoEncodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList1, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoEncodeCommandList1 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList1, IUnknown>(ref value);
		}

	}

	[Guid("2e0d212d-8df9-44a6-a770-bb289b182737")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoEncoder")]
	public partial struct ID3D12VideoEncoder : IComObject, IComObject<ID3D12VideoEncoder>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("2e0d212d-8df9-44a6-a770-bb289b182737");

		public unsafe ID3D12VideoEncoder (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetEncoderFlags")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_FLAGS")]
		public readonly unsafe D3D12VideoEncoderFlags GetEncoderFlags()
		{
			ID3D12VideoEncoder* ptr = (ID3D12VideoEncoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoEncoderFlags ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoder*, D3D12VideoEncoderFlags>)(LpVtbl[1]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodec")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public readonly unsafe D3D12VideoEncoderCodec GetCodec()
		{
			ID3D12VideoEncoder* ptr = (ID3D12VideoEncoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoEncoderCodec ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoder*, D3D12VideoEncoderCodec>)(LpVtbl[2]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodecProfile")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetCodecProfile([NativeName(NativeNameType.Param, "dstProfile")] [NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")] D3D12VideoEncoderProfileDesc dstProfile)
		{
			ID3D12VideoEncoder* ptr = (ID3D12VideoEncoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoder*, D3D12VideoEncoderProfileDesc, HResult>)(LpVtbl[3]))(ptr, dstProfile);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodecConfiguration")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetCodecConfiguration([NativeName(NativeNameType.Param, "dstCodecConfig")] [NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION")] D3D12VideoEncoderCodecConfiguration dstCodecConfig)
		{
			ID3D12VideoEncoder* ptr = (ID3D12VideoEncoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoder*, D3D12VideoEncoderCodecConfiguration, HResult>)(LpVtbl[4]))(ptr, dstCodecConfig);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetInputFormat")]
		[return: NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public readonly unsafe DxgiFormat GetInputFormat()
		{
			ID3D12VideoEncoder* ptr = (ID3D12VideoEncoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			DxgiFormat ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoder*, DxgiFormat>)(LpVtbl[5]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetMaxMotionEstimationPrecision")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE")]
		public readonly unsafe D3D12VideoEncoderMotionEstimationPrecisionMode GetMaxMotionEstimationPrecision()
		{
			ID3D12VideoEncoder* ptr = (ID3D12VideoEncoder*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoEncoderMotionEstimationPrecisionMode ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoder*, D3D12VideoEncoderMotionEstimationPrecisionMode>)(LpVtbl[6]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoEncoder value)
		{
			return Unsafe.As<ID3D12VideoEncoder, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoEncoder value)
		{
			return Unsafe.As<ID3D12VideoEncoder, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoEncoder value)
		{
			return Unsafe.As<ID3D12VideoEncoder, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoEncoder value)
		{
			return Unsafe.As<ID3D12VideoEncoder, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderProfileDesc
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderProfileDescUnion
		{
			[NativeName(NativeNameType.Field, "pH264Profile")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_H264*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderProfileH264* PH264Profile;
			[NativeName(NativeNameType.Field, "pHEVCProfile")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_HEVC*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderProfileHevc* PHEVCProfile;


		}

		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderProfileDescUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCodecConfiguration
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderCodecConfigurationUnion
		{
			[NativeName(NativeNameType.Field, "pH264Config")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderCodecConfigurationH264* PH264Config;
			[NativeName(NativeNameType.Field, "pHEVCConfig")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderCodecConfigurationHevc* PHEVCConfig;


		}

		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderCodecConfigurationUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCodecConfigurationH264
	{
		[NativeName(NativeNameType.Field, "ConfigurationFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS")]
		public D3D12VideoEncoderCodecConfigurationH264Flags ConfigurationFlags;
		[NativeName(NativeNameType.Field, "DirectModeConfig")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES")]
		public D3D12VideoEncoderCodecConfigurationH264DirectModes DirectModeConfig;
		[NativeName(NativeNameType.Field, "DisableDeblockingFilterConfig")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES")]
		public D3D12VideoEncoderCodecConfigurationH264SlicesDeblockingModes DisableDeblockingFilterConfig;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCodecConfigurationHevc
	{
		[NativeName(NativeNameType.Field, "ConfigurationFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS")]
		public D3D12VideoEncoderCodecConfigurationHevcFlags ConfigurationFlags;
		[NativeName(NativeNameType.Field, "MinLumaCodingUnitSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE")]
		public D3D12VideoEncoderCodecConfigurationHevcCusize MinLumaCodingUnitSize;
		[NativeName(NativeNameType.Field, "MaxLumaCodingUnitSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE")]
		public D3D12VideoEncoderCodecConfigurationHevcCusize MaxLumaCodingUnitSize;
		[NativeName(NativeNameType.Field, "MinLumaTransformUnitSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE")]
		public D3D12VideoEncoderCodecConfigurationHevcTusize MinLumaTransformUnitSize;
		[NativeName(NativeNameType.Field, "MaxLumaTransformUnitSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE")]
		public D3D12VideoEncoderCodecConfigurationHevcTusize MaxLumaTransformUnitSize;
		[NativeName(NativeNameType.Field, "max_transform_hierarchy_depth_inter")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte MaxTransformHierarchyDepthInter;
		[NativeName(NativeNameType.Field, "max_transform_hierarchy_depth_intra")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte MaxTransformHierarchyDepthIntra;


	}

	[Guid("22b35d96-876a-44c0-b25e-fb8c9c7f1c4a")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoEncoderHeap")]
	public partial struct ID3D12VideoEncoderHeap : IComObject, IComObject<ID3D12VideoEncoderHeap>, IComObject<ID3D12Pageable>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("22b35d96-876a-44c0-b25e-fb8c9c7f1c4a");

		public unsafe ID3D12VideoEncoderHeap (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "GetEncoderHeapFlags")]
		[return: NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_HEAP_FLAGS")]
		public readonly unsafe D3D12VideoEncoderHeapFlags GetEncoderHeapFlags()
		{
			ID3D12VideoEncoderHeap* ptr = (ID3D12VideoEncoderHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			D3D12VideoEncoderHeapFlags ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoderHeap*, D3D12VideoEncoderHeapFlags>)(LpVtbl[1]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetCodecLevel")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetCodecLevel([NativeName(NativeNameType.Param, "dstLevel")] [NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVEL_SETTING")] D3D12VideoEncoderLevelSetting dstLevel)
		{
			ID3D12VideoEncoderHeap* ptr = (ID3D12VideoEncoderHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoderHeap*, D3D12VideoEncoderLevelSetting, HResult>)(LpVtbl[4]))(ptr, dstLevel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetResolutionListCount")]
		[return: NativeName(NativeNameType.Type, "UINT")]
		public readonly unsafe uint GetResolutionListCount()
		{
			ID3D12VideoEncoderHeap* ptr = (ID3D12VideoEncoderHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			uint ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoderHeap*, uint>)(LpVtbl[5]))(ptr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetResolutionList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetResolutionList([NativeName(NativeNameType.Param, "ResolutionsListCount")] [NativeName(NativeNameType.Type, "const UINT")] uint resolutionsListCount, [NativeName(NativeNameType.Param, "pResolutionList")] [NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*")] D3D12VideoEncoderPictureResolutionDesc* pResolutionList)
		{
			ID3D12VideoEncoderHeap* ptr = (ID3D12VideoEncoderHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoderHeap*, uint, D3D12VideoEncoderPictureResolutionDesc*, HResult>)(LpVtbl[6]))(ptr, resolutionsListCount, pResolutionList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "GetResolutionList")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult GetResolutionList([NativeName(NativeNameType.Param, "ResolutionsListCount")] [NativeName(NativeNameType.Type, "const UINT")] uint resolutionsListCount, [NativeName(NativeNameType.Param, "pResolutionList")] [NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*")] ref D3D12VideoEncoderPictureResolutionDesc pResolutionList)
		{
			ID3D12VideoEncoderHeap* ptr = (ID3D12VideoEncoderHeap*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderPictureResolutionDesc* ppResolutionList = &pResolutionList)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoEncoderHeap*, uint, D3D12VideoEncoderPictureResolutionDesc*, HResult>)(LpVtbl[6]))(ptr, resolutionsListCount, (D3D12VideoEncoderPictureResolutionDesc*)ppResolutionList);
				return ret;
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12Pageable (ID3D12VideoEncoderHeap value)
		{
			return Unsafe.As<ID3D12VideoEncoderHeap, ID3D12Pageable>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoEncoderHeap value)
		{
			return Unsafe.As<ID3D12VideoEncoderHeap, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoEncoderHeap value)
		{
			return Unsafe.As<ID3D12VideoEncoderHeap, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoEncoderHeap value)
		{
			return Unsafe.As<ID3D12VideoEncoderHeap, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_LEVEL_SETTING")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderLevelSetting
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderLevelSettingUnion
		{
			[NativeName(NativeNameType.Field, "pH264LevelSetting")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVELS_H264*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderLevelsH264* PH264LevelSetting;
			[NativeName(NativeNameType.Field, "pHEVCLevelSetting")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderLevelTierConstraintsHevc* PHEVCLevelSetting;


		}

		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderLevelSettingUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderLevelTierConstraintsHevc
	{
		[NativeName(NativeNameType.Field, "Level")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVELS_HEVC")]
		public D3D12VideoEncoderLevelsHevc Level;
		[NativeName(NativeNameType.Field, "Tier")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_TIER_HEVC")]
		public D3D12VideoEncoderTierHevc Tier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureResolutionDesc
	{
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;


	}

	[Guid("4243adb4-3a32-4666-973c-0ccc5625dc44")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoDevice3")]
	public partial struct ID3D12VideoDevice3 : IComObject, IComObject<ID3D12VideoDevice3>, IComObject<ID3D12VideoDevice2>, IComObject<ID3D12VideoDevice1>, IComObject<ID3D12VideoDevice>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("4243adb4-3a32-4666-973c-0ccc5625dc44");

		public unsafe ID3D12VideoDevice3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "CreateVideoEncoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoEncoder([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_DESC*")] D3D12VideoEncoderDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoEncoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoEncoder)
		{
			ID3D12VideoDevice3* ptr = (ID3D12VideoDevice3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice3*, D3D12VideoEncoderDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, riid, ppVideoEncoder);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoEncoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoEncoder([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_DESC*")] ref D3D12VideoEncoderDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoEncoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoEncoder)
		{
			ID3D12VideoDevice3* ptr = (ID3D12VideoDevice3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice3*, D3D12VideoEncoderDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoEncoderDesc*)ppDesc, riid, ppVideoEncoder);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoEncoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoEncoder([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_DESC*")] D3D12VideoEncoderDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoEncoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoEncoder)
		{
			ID3D12VideoDevice3* ptr = (ID3D12VideoDevice3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice3*, D3D12VideoEncoderDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, pDesc, (Guid*)priid, ppVideoEncoder);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoEncoder")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoEncoder([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_DESC*")] ref D3D12VideoEncoderDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoEncoder")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoEncoder)
		{
			ID3D12VideoDevice3* ptr = (ID3D12VideoDevice3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice3*, D3D12VideoEncoderDesc*, Guid*, void**, HResult>)(LpVtbl[5]))(ptr, (D3D12VideoEncoderDesc*)ppDesc, (Guid*)priid, ppVideoEncoder);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoEncoderHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoEncoderHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_HEAP_DESC*")] D3D12VideoEncoderHeapDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoEncoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoEncoderHeap)
		{
			ID3D12VideoDevice3* ptr = (ID3D12VideoDevice3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice3*, D3D12VideoEncoderHeapDesc*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, pDesc, riid, ppVideoEncoderHeap);
			return ret;
		}

		[NativeName(NativeNameType.Func, "CreateVideoEncoderHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoEncoderHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_HEAP_DESC*")] ref D3D12VideoEncoderHeapDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] Guid* riid, [NativeName(NativeNameType.Param, "ppVideoEncoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoEncoderHeap)
		{
			ID3D12VideoDevice3* ptr = (ID3D12VideoDevice3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderHeapDesc* ppDesc = &pDesc)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice3*, D3D12VideoEncoderHeapDesc*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (D3D12VideoEncoderHeapDesc*)ppDesc, riid, ppVideoEncoderHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoEncoderHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoEncoderHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_HEAP_DESC*")] D3D12VideoEncoderHeapDesc* pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoEncoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoEncoderHeap)
		{
			ID3D12VideoDevice3* ptr = (ID3D12VideoDevice3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (Guid* priid = &riid)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice3*, D3D12VideoEncoderHeapDesc*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, pDesc, (Guid*)priid, ppVideoEncoderHeap);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "CreateVideoEncoderHeap")]
		[return: NativeName(NativeNameType.Type, "HRESULT")]
		public readonly unsafe HResult CreateVideoEncoderHeap([NativeName(NativeNameType.Param, "pDesc")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_HEAP_DESC*")] ref D3D12VideoEncoderHeapDesc pDesc, [NativeName(NativeNameType.Param, "riid")] [NativeName(NativeNameType.Type, "const IID&")] ref Guid riid, [NativeName(NativeNameType.Param, "ppVideoEncoderHeap")] [NativeName(NativeNameType.Type, "void**")] void** ppVideoEncoderHeap)
		{
			ID3D12VideoDevice3* ptr = (ID3D12VideoDevice3*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderHeapDesc* ppDesc = &pDesc)
			{
				fixed (Guid* priid = &riid)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3D12VideoDevice3*, D3D12VideoEncoderHeapDesc*, Guid*, void**, HResult>)(LpVtbl[6]))(ptr, (D3D12VideoEncoderHeapDesc*)ppDesc, (Guid*)priid, ppVideoEncoderHeap);
					return ret;
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoDevice2 (ID3D12VideoDevice3 value)
		{
			return Unsafe.As<ID3D12VideoDevice3, ID3D12VideoDevice2>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoDevice1 (ID3D12VideoDevice3 value)
		{
			return Unsafe.As<ID3D12VideoDevice3, ID3D12VideoDevice1>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoDevice (ID3D12VideoDevice3 value)
		{
			return Unsafe.As<ID3D12VideoDevice3, ID3D12VideoDevice>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoDevice3 value)
		{
			return Unsafe.As<ID3D12VideoDevice3, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderDesc
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_FLAGS")]
		public D3D12VideoEncoderFlags Flags;
		[NativeName(NativeNameType.Field, "EncodeCodec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec EncodeCodec;
		[NativeName(NativeNameType.Field, "EncodeProfile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc EncodeProfile;
		[NativeName(NativeNameType.Field, "InputFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat InputFormat;
		[NativeName(NativeNameType.Field, "CodecConfiguration")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION")]
		public D3D12VideoEncoderCodecConfiguration CodecConfiguration;
		[NativeName(NativeNameType.Field, "MaxMotionEstimationPrecision")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE")]
		public D3D12VideoEncoderMotionEstimationPrecisionMode MaxMotionEstimationPrecision;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_HEAP_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderHeapDesc
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_HEAP_FLAGS")]
		public D3D12VideoEncoderHeapFlags Flags;
		[NativeName(NativeNameType.Field, "EncodeCodec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec EncodeCodec;
		[NativeName(NativeNameType.Field, "EncodeProfile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc EncodeProfile;
		[NativeName(NativeNameType.Field, "EncodeLevel")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVEL_SETTING")]
		public D3D12VideoEncoderLevelSetting EncodeLevel;
		[NativeName(NativeNameType.Field, "ResolutionsListCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ResolutionsListCount;
		[NativeName(NativeNameType.Field, "pResolutionList")]
		[NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*")]
		public unsafe D3D12VideoEncoderPictureResolutionDesc* PResolutionList;


	}

	[Guid("895491e2-e701-46a9-9a1f-8d3480ed867a")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoEncodeCommandList2")]
	public partial struct ID3D12VideoEncodeCommandList2 : IComObject, IComObject<ID3D12VideoEncodeCommandList2>, IComObject<ID3D12VideoEncodeCommandList1>, IComObject<ID3D12VideoEncodeCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("895491e2-e701-46a9-9a1f-8d3480ed867a");

		public unsafe ID3D12VideoEncodeCommandList2 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ID3D12VideoEncoder* pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ID3D12VideoEncoderHeap* pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, pEncoder, pHeap, pInputArguments, pOutputArguments);
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ref ID3D12VideoEncoder pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ID3D12VideoEncoderHeap* pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoder* ppEncoder = &pEncoder)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, (ID3D12VideoEncoder*)ppEncoder, pHeap, pInputArguments, pOutputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ID3D12VideoEncoder* pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ref ID3D12VideoEncoderHeap pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoderHeap* ppHeap = &pHeap)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, pEncoder, (ID3D12VideoEncoderHeap*)ppHeap, pInputArguments, pOutputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ref ID3D12VideoEncoder pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ref ID3D12VideoEncoderHeap pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoder* ppEncoder = &pEncoder)
			{
				fixed (ID3D12VideoEncoderHeap* ppHeap = &pHeap)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, (ID3D12VideoEncoder*)ppEncoder, (ID3D12VideoEncoderHeap*)ppHeap, pInputArguments, pOutputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ID3D12VideoEncoder* pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ID3D12VideoEncoderHeap* pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderEncodeframeInputArguments* ppInputArguments = &pInputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, pEncoder, pHeap, (D3D12VideoEncoderEncodeframeInputArguments*)ppInputArguments, pOutputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ref ID3D12VideoEncoder pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ID3D12VideoEncoderHeap* pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoder* ppEncoder = &pEncoder)
			{
				fixed (D3D12VideoEncoderEncodeframeInputArguments* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, (ID3D12VideoEncoder*)ppEncoder, pHeap, (D3D12VideoEncoderEncodeframeInputArguments*)ppInputArguments, pOutputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ID3D12VideoEncoder* pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ref ID3D12VideoEncoderHeap pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoderHeap* ppHeap = &pHeap)
			{
				fixed (D3D12VideoEncoderEncodeframeInputArguments* ppInputArguments = &pInputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, pEncoder, (ID3D12VideoEncoderHeap*)ppHeap, (D3D12VideoEncoderEncodeframeInputArguments*)ppInputArguments, pOutputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ref ID3D12VideoEncoder pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ref ID3D12VideoEncoderHeap pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoder* ppEncoder = &pEncoder)
			{
				fixed (ID3D12VideoEncoderHeap* ppHeap = &pHeap)
				{
					fixed (D3D12VideoEncoderEncodeframeInputArguments* ppInputArguments = &pInputArguments)
					{
						((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, (ID3D12VideoEncoder*)ppEncoder, (ID3D12VideoEncoderHeap*)ppHeap, (D3D12VideoEncoderEncodeframeInputArguments*)ppInputArguments, pOutputArguments);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ID3D12VideoEncoder* pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ID3D12VideoEncoderHeap* pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderEncodeframeOutputArguments* ppOutputArguments = &pOutputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, pEncoder, pHeap, pInputArguments, (D3D12VideoEncoderEncodeframeOutputArguments*)ppOutputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ref ID3D12VideoEncoder pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ID3D12VideoEncoderHeap* pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoder* ppEncoder = &pEncoder)
			{
				fixed (D3D12VideoEncoderEncodeframeOutputArguments* ppOutputArguments = &pOutputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, (ID3D12VideoEncoder*)ppEncoder, pHeap, pInputArguments, (D3D12VideoEncoderEncodeframeOutputArguments*)ppOutputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ID3D12VideoEncoder* pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ref ID3D12VideoEncoderHeap pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoderHeap* ppHeap = &pHeap)
			{
				fixed (D3D12VideoEncoderEncodeframeOutputArguments* ppOutputArguments = &pOutputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, pEncoder, (ID3D12VideoEncoderHeap*)ppHeap, pInputArguments, (D3D12VideoEncoderEncodeframeOutputArguments*)ppOutputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ref ID3D12VideoEncoder pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ref ID3D12VideoEncoderHeap pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] D3D12VideoEncoderEncodeframeInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoder* ppEncoder = &pEncoder)
			{
				fixed (ID3D12VideoEncoderHeap* ppHeap = &pHeap)
				{
					fixed (D3D12VideoEncoderEncodeframeOutputArguments* ppOutputArguments = &pOutputArguments)
					{
						((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, (ID3D12VideoEncoder*)ppEncoder, (ID3D12VideoEncoderHeap*)ppHeap, pInputArguments, (D3D12VideoEncoderEncodeframeOutputArguments*)ppOutputArguments);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ID3D12VideoEncoder* pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ID3D12VideoEncoderHeap* pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderEncodeframeInputArguments* ppInputArguments = &pInputArguments)
			{
				fixed (D3D12VideoEncoderEncodeframeOutputArguments* ppOutputArguments = &pOutputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, pEncoder, pHeap, (D3D12VideoEncoderEncodeframeInputArguments*)ppInputArguments, (D3D12VideoEncoderEncodeframeOutputArguments*)ppOutputArguments);
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ref ID3D12VideoEncoder pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ID3D12VideoEncoderHeap* pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoder* ppEncoder = &pEncoder)
			{
				fixed (D3D12VideoEncoderEncodeframeInputArguments* ppInputArguments = &pInputArguments)
				{
					fixed (D3D12VideoEncoderEncodeframeOutputArguments* ppOutputArguments = &pOutputArguments)
					{
						((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, (ID3D12VideoEncoder*)ppEncoder, pHeap, (D3D12VideoEncoderEncodeframeInputArguments*)ppInputArguments, (D3D12VideoEncoderEncodeframeOutputArguments*)ppOutputArguments);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ID3D12VideoEncoder* pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ref ID3D12VideoEncoderHeap pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoderHeap* ppHeap = &pHeap)
			{
				fixed (D3D12VideoEncoderEncodeframeInputArguments* ppInputArguments = &pInputArguments)
				{
					fixed (D3D12VideoEncoderEncodeframeOutputArguments* ppOutputArguments = &pOutputArguments)
					{
						((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, pEncoder, (ID3D12VideoEncoderHeap*)ppHeap, (D3D12VideoEncoderEncodeframeInputArguments*)ppInputArguments, (D3D12VideoEncoderEncodeframeOutputArguments*)ppOutputArguments);
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "EncodeFrame")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void EncodeFrame([NativeName(NativeNameType.Param, "pEncoder")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoder*")] ref ID3D12VideoEncoder pEncoder, [NativeName(NativeNameType.Param, "pHeap")] [NativeName(NativeNameType.Type, "ID3D12VideoEncoderHeap*")] ref ID3D12VideoEncoderHeap pHeap, [NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderEncodeframeOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (ID3D12VideoEncoder* ppEncoder = &pEncoder)
			{
				fixed (ID3D12VideoEncoderHeap* ppHeap = &pHeap)
				{
					fixed (D3D12VideoEncoderEncodeframeInputArguments* ppInputArguments = &pInputArguments)
					{
						fixed (D3D12VideoEncoderEncodeframeOutputArguments* ppOutputArguments = &pOutputArguments)
						{
							((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, ID3D12VideoEncoder*, ID3D12VideoEncoderHeap*, D3D12VideoEncoderEncodeframeInputArguments*, D3D12VideoEncoderEncodeframeOutputArguments*, void>)(LpVtbl[2]))(ptr, (ID3D12VideoEncoder*)ppEncoder, (ID3D12VideoEncoderHeap*)ppHeap, (D3D12VideoEncoderEncodeframeInputArguments*)ppInputArguments, (D3D12VideoEncoderEncodeframeOutputArguments*)ppOutputArguments);
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "ResolveEncoderOutputMetadata")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveEncoderOutputMetadata([NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS*")] D3D12VideoEncoderResolveMetadataInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderResolveMetadataOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, D3D12VideoEncoderResolveMetadataInputArguments*, D3D12VideoEncoderResolveMetadataOutputArguments*, void>)(LpVtbl[3]))(ptr, pInputArguments, pOutputArguments);
		}

		[NativeName(NativeNameType.Func, "ResolveEncoderOutputMetadata")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveEncoderOutputMetadata([NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderResolveMetadataInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS*")] D3D12VideoEncoderResolveMetadataOutputArguments* pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderResolveMetadataInputArguments* ppInputArguments = &pInputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, D3D12VideoEncoderResolveMetadataInputArguments*, D3D12VideoEncoderResolveMetadataOutputArguments*, void>)(LpVtbl[3]))(ptr, (D3D12VideoEncoderResolveMetadataInputArguments*)ppInputArguments, pOutputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveEncoderOutputMetadata")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveEncoderOutputMetadata([NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS*")] D3D12VideoEncoderResolveMetadataInputArguments* pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderResolveMetadataOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderResolveMetadataOutputArguments* ppOutputArguments = &pOutputArguments)
			{
				((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, D3D12VideoEncoderResolveMetadataInputArguments*, D3D12VideoEncoderResolveMetadataOutputArguments*, void>)(LpVtbl[3]))(ptr, pInputArguments, (D3D12VideoEncoderResolveMetadataOutputArguments*)ppOutputArguments);
			}
		}

		[NativeName(NativeNameType.Func, "ResolveEncoderOutputMetadata")]
		[return: NativeName(NativeNameType.Type, "void")]
		public readonly unsafe void ResolveEncoderOutputMetadata([NativeName(NativeNameType.Param, "pInputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS*")] ref D3D12VideoEncoderResolveMetadataInputArguments pInputArguments, [NativeName(NativeNameType.Param, "pOutputArguments")] [NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS*")] ref D3D12VideoEncoderResolveMetadataOutputArguments pOutputArguments)
		{
			ID3D12VideoEncodeCommandList2* ptr = (ID3D12VideoEncodeCommandList2*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (D3D12VideoEncoderResolveMetadataInputArguments* ppInputArguments = &pInputArguments)
			{
				fixed (D3D12VideoEncoderResolveMetadataOutputArguments* ppOutputArguments = &pOutputArguments)
				{
					((delegate* unmanaged[Stdcall]<ID3D12VideoEncodeCommandList2*, D3D12VideoEncoderResolveMetadataInputArguments*, D3D12VideoEncoderResolveMetadataOutputArguments*, void>)(LpVtbl[3]))(ptr, (D3D12VideoEncoderResolveMetadataInputArguments*)ppInputArguments, (D3D12VideoEncoderResolveMetadataOutputArguments*)ppOutputArguments);
				}
			}
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoEncodeCommandList1 (ID3D12VideoEncodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList2, ID3D12VideoEncodeCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoEncodeCommandList (ID3D12VideoEncodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList2, ID3D12VideoEncodeCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoEncodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList2, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoEncodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList2, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoEncodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList2, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoEncodeCommandList2 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList2, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderEncodeframeInputArguments
	{
		[NativeName(NativeNameType.Field, "SequenceControlDesc")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC")]
		public D3D12VideoEncoderSequenceControlDesc SequenceControlDesc;
		[NativeName(NativeNameType.Field, "PictureControlDesc")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC")]
		public D3D12VideoEncoderPictureControlDesc PictureControlDesc;
		[NativeName(NativeNameType.Field, "pInputFrame")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PInputFrame;
		[NativeName(NativeNameType.Field, "InputFrameSubresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InputFrameSubresource;
		[NativeName(NativeNameType.Field, "CurrentFrameBitstreamMetadataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CurrentFrameBitstreamMetadataSize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderSequenceControlDesc
	{
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS")]
		public D3D12VideoEncoderSequenceControlFlags Flags;
		[NativeName(NativeNameType.Field, "IntraRefreshConfig")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_INTRA_REFRESH")]
		public D3D12VideoEncoderIntraRefresh IntraRefreshConfig;
		[NativeName(NativeNameType.Field, "RateControl")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_RATE_CONTROL")]
		public D3D12VideoEncoderRateControl RateControl;
		[NativeName(NativeNameType.Field, "PictureTargetResolution")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC")]
		public D3D12VideoEncoderPictureResolutionDesc PictureTargetResolution;
		[NativeName(NativeNameType.Field, "SelectedLayoutMode")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE")]
		public D3D12VideoEncoderFrameSubregionLayoutMode SelectedLayoutMode;
		[NativeName(NativeNameType.Field, "FrameSubregionsLayoutData")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA")]
		public D3D12VideoEncoderPictureControlSubregionsLayoutData FrameSubregionsLayoutData;
		[NativeName(NativeNameType.Field, "CodecGopSequence")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE")]
		public D3D12VideoEncoderSequenceGopStructure CodecGopSequence;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_INTRA_REFRESH")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderIntraRefresh
	{
		[NativeName(NativeNameType.Field, "Mode")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE")]
		public D3D12VideoEncoderIntraRefreshMode Mode;
		[NativeName(NativeNameType.Field, "IntraRefreshDuration")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IntraRefreshDuration;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_RATE_CONTROL")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderRateControl
	{
		[NativeName(NativeNameType.Field, "Mode")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE")]
		public D3D12VideoEncoderRateControlMode Mode;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS")]
		public D3D12VideoEncoderRateControlFlags Flags;
		[NativeName(NativeNameType.Field, "ConfigParams")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS")]
		public D3D12VideoEncoderRateControlConfigurationParams ConfigParams;
		[NativeName(NativeNameType.Field, "TargetFrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational TargetFrameRate;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderRateControlConfigurationParams
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderRateControlConfigurationParamsUnion
		{
			[NativeName(NativeNameType.Field, "pConfiguration_CQP")]
			[NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderRateControlCqp* PConfigurationCQP;
			[NativeName(NativeNameType.Field, "pConfiguration_CBR")]
			[NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderRateControlCbr* PConfigurationCBR;
			[NativeName(NativeNameType.Field, "pConfiguration_VBR")]
			[NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderRateControlVbr* PConfigurationVBR;
			[NativeName(NativeNameType.Field, "pConfiguration_QVBR")]
			[NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderRateControlQvbr* PConfigurationQVBR;


		}

		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderRateControlConfigurationParamsUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderRateControlCqp
	{
		[NativeName(NativeNameType.Field, "ConstantQP_FullIntracodedFrame")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConstantQPFullIntracodedFrame;
		[NativeName(NativeNameType.Field, "ConstantQP_InterPredictedFrame_PrevRefOnly")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConstantQPInterPredictedFramePrevRefOnly;
		[NativeName(NativeNameType.Field, "ConstantQP_InterPredictedFrame_BiDirectionalRef")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConstantQPInterPredictedFrameBiDirectionalRef;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderRateControlCbr
	{
		[NativeName(NativeNameType.Field, "InitialQP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InitialQP;
		[NativeName(NativeNameType.Field, "MinQP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MinQP;
		[NativeName(NativeNameType.Field, "MaxQP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxQP;
		[NativeName(NativeNameType.Field, "MaxFrameBitSize")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MaxFrameBitSize;
		[NativeName(NativeNameType.Field, "TargetBitRate")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong TargetBitRate;
		[NativeName(NativeNameType.Field, "VBVCapacity")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong VBVCapacity;
		[NativeName(NativeNameType.Field, "InitialVBVFullness")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong InitialVBVFullness;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderRateControlVbr
	{
		[NativeName(NativeNameType.Field, "InitialQP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InitialQP;
		[NativeName(NativeNameType.Field, "MinQP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MinQP;
		[NativeName(NativeNameType.Field, "MaxQP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxQP;
		[NativeName(NativeNameType.Field, "MaxFrameBitSize")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MaxFrameBitSize;
		[NativeName(NativeNameType.Field, "TargetAvgBitRate")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong TargetAvgBitRate;
		[NativeName(NativeNameType.Field, "PeakBitRate")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong PeakBitRate;
		[NativeName(NativeNameType.Field, "VBVCapacity")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong VBVCapacity;
		[NativeName(NativeNameType.Field, "InitialVBVFullness")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong InitialVBVFullness;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderRateControlQvbr
	{
		[NativeName(NativeNameType.Field, "InitialQP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint InitialQP;
		[NativeName(NativeNameType.Field, "MinQP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MinQP;
		[NativeName(NativeNameType.Field, "MaxQP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxQP;
		[NativeName(NativeNameType.Field, "MaxFrameBitSize")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MaxFrameBitSize;
		[NativeName(NativeNameType.Field, "TargetAvgBitRate")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong TargetAvgBitRate;
		[NativeName(NativeNameType.Field, "PeakBitRate")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong PeakBitRate;
		[NativeName(NativeNameType.Field, "ConstantQualityTarget")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ConstantQualityTarget;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureControlSubregionsLayoutData
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderPictureControlSubregionsLayoutDataUnion
		{
			[NativeName(NativeNameType.Field, "pSlicesPartition_H264")]
			[NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderPictureControlSubregionsLayoutDataSlices* PSlicesPartitionH264;
			[NativeName(NativeNameType.Field, "pSlicesPartition_HEVC")]
			[NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderPictureControlSubregionsLayoutDataSlices* PSlicesPartitionHEVC;


		}

		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderPictureControlSubregionsLayoutDataUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureControlSubregionsLayoutDataSlices
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderPictureControlSubregionsLayoutDataSlicesUnion
		{
			[NativeName(NativeNameType.Field, "MaxBytesPerSlice")]
			[NativeName(NativeNameType.Type, "UINT")]
			[FieldOffset(0)]
			public uint MaxBytesPerSlice;
			[NativeName(NativeNameType.Field, "NumberOfCodingUnitsPerSlice")]
			[NativeName(NativeNameType.Type, "UINT")]
			[FieldOffset(0)]
			public uint NumberOfCodingUnitsPerSlice;
			[NativeName(NativeNameType.Field, "NumberOfRowsPerSlice")]
			[NativeName(NativeNameType.Type, "UINT")]
			[FieldOffset(0)]
			public uint NumberOfRowsPerSlice;
			[NativeName(NativeNameType.Field, "NumberOfSlicesPerFrame")]
			[NativeName(NativeNameType.Type, "UINT")]
			[FieldOffset(0)]
			public uint NumberOfSlicesPerFrame;


		}

		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderPictureControlSubregionsLayoutDataSlicesUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderSequenceGopStructure
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderSequenceGopStructureUnion
		{
			[NativeName(NativeNameType.Field, "pH264GroupOfPictures")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderSequenceGopStructureH264* PH264GroupOfPictures;
			[NativeName(NativeNameType.Field, "pHEVCGroupOfPictures")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderSequenceGopStructureHevc* PHEVCGroupOfPictures;


		}

		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderSequenceGopStructureUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderSequenceGopStructureH264
	{
		[NativeName(NativeNameType.Field, "GOPLength")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint GOPLength;
		[NativeName(NativeNameType.Field, "PPicturePeriod")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PPicturePeriod;
		[NativeName(NativeNameType.Field, "pic_order_cnt_type")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte PicOrderCntType;
		[NativeName(NativeNameType.Field, "log2_max_frame_num_minus4")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte Log2MaxFrameNumMinus4;
		[NativeName(NativeNameType.Field, "log2_max_pic_order_cnt_lsb_minus4")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte Log2MaxPicOrderCntLsbMinus4;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderSequenceGopStructureHevc
	{
		[NativeName(NativeNameType.Field, "GOPLength")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint GOPLength;
		[NativeName(NativeNameType.Field, "PPicturePeriod")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PPicturePeriod;
		[NativeName(NativeNameType.Field, "log2_max_pic_order_cnt_lsb_minus4")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte Log2MaxPicOrderCntLsbMinus4;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureControlDesc
	{
		[NativeName(NativeNameType.Field, "IntraRefreshFrameIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IntraRefreshFrameIndex;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS")]
		public D3D12VideoEncoderPictureControlFlags Flags;
		[NativeName(NativeNameType.Field, "PictureControlCodecData")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA")]
		public D3D12VideoEncoderPictureControlCodecData PictureControlCodecData;
		[NativeName(NativeNameType.Field, "ReferenceFrames")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODE_REFERENCE_FRAMES")]
		public D3D12VideoEncodeReferenceFrames ReferenceFrames;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureControlCodecData
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderPictureControlCodecDataUnion
		{
			[NativeName(NativeNameType.Field, "pH264PicData")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderPictureControlCodecDataH264* PH264PicData;
			[NativeName(NativeNameType.Field, "pHEVCPicData")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderPictureControlCodecDataHevc* PHEVCPicData;


		}

		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderPictureControlCodecDataUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureControlCodecDataH264
	{
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS")]
		public D3D12VideoEncoderPictureControlCodecDataH264Flags Flags;
		[NativeName(NativeNameType.Field, "FrameType")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_FRAME_TYPE_H264")]
		public D3D12VideoEncoderFrameTypeH264 FrameType;
		[NativeName(NativeNameType.Field, "pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PicParameterSetId;
		[NativeName(NativeNameType.Field, "idr_pic_id")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint IdrPicId;
		[NativeName(NativeNameType.Field, "PictureOrderCountNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PictureOrderCountNumber;
		[NativeName(NativeNameType.Field, "FrameDecodingOrderNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FrameDecodingOrderNumber;
		[NativeName(NativeNameType.Field, "TemporalLayerIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TemporalLayerIndex;
		[NativeName(NativeNameType.Field, "List0ReferenceFramesCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint List0ReferenceFramesCount;
		[NativeName(NativeNameType.Field, "pList0ReferenceFrames")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PList0ReferenceFrames;
		[NativeName(NativeNameType.Field, "List1ReferenceFramesCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint List1ReferenceFramesCount;
		[NativeName(NativeNameType.Field, "pList1ReferenceFrames")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PList1ReferenceFrames;
		[NativeName(NativeNameType.Field, "ReferenceFramesReconPictureDescriptorsCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ReferenceFramesReconPictureDescriptorsCount;
		[NativeName(NativeNameType.Field, "pReferenceFramesReconPictureDescriptors")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264*")]
		public unsafe D3D12VideoEncoderReferencePictureDescriptorH264* PReferenceFramesReconPictureDescriptors;
		[NativeName(NativeNameType.Field, "adaptive_ref_pic_marking_mode_flag")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte AdaptiveRefPicMarkingModeFlag;
		[NativeName(NativeNameType.Field, "RefPicMarkingOperationsCommandsCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint RefPicMarkingOperationsCommandsCount;
		[NativeName(NativeNameType.Field, "pRefPicMarkingOperationsCommands")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION*")]
		public unsafe D3D12VideoEncoderPictureControlCodecDataH264ReferencePictureMarkingOperation* PRefPicMarkingOperationsCommands;
		[NativeName(NativeNameType.Field, "List0RefPicModificationsCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint List0RefPicModificationsCount;
		[NativeName(NativeNameType.Field, "pList0RefPicModifications")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION*")]
		public unsafe D3D12VideoEncoderPictureControlCodecDataH264ReferencePictureListModificationOperation* PList0RefPicModifications;
		[NativeName(NativeNameType.Field, "List1RefPicModificationsCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint List1RefPicModificationsCount;
		[NativeName(NativeNameType.Field, "pList1RefPicModifications")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION*")]
		public unsafe D3D12VideoEncoderPictureControlCodecDataH264ReferencePictureListModificationOperation* PList1RefPicModifications;
		[NativeName(NativeNameType.Field, "QPMapValuesCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint QPMapValuesCount;
		[NativeName(NativeNameType.Field, "pRateControlQPMap")]
		[NativeName(NativeNameType.Type, "INT8*")]
		public unsafe sbyte* PRateControlQPMap;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderReferencePictureDescriptorH264
	{
		[NativeName(NativeNameType.Field, "ReconstructedPictureResourceIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ReconstructedPictureResourceIndex;
		[NativeName(NativeNameType.Field, "IsLongTermReference")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsLongTermReference;
		[NativeName(NativeNameType.Field, "LongTermPictureIdx")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint LongTermPictureIdx;
		[NativeName(NativeNameType.Field, "PictureOrderCountNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PictureOrderCountNumber;
		[NativeName(NativeNameType.Field, "FrameDecodingOrderNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FrameDecodingOrderNumber;
		[NativeName(NativeNameType.Field, "TemporalLayerIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TemporalLayerIndex;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureControlCodecDataH264ReferencePictureMarkingOperation
	{
		[NativeName(NativeNameType.Field, "memory_management_control_operation")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte MemoryManagementControlOperation;
		[NativeName(NativeNameType.Field, "difference_of_pic_nums_minus1")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DifferenceOfPicNumsMinus1;
		[NativeName(NativeNameType.Field, "long_term_pic_num")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint LongTermPicNum;
		[NativeName(NativeNameType.Field, "long_term_frame_idx")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint LongTermFrameIdx;
		[NativeName(NativeNameType.Field, "max_long_term_frame_idx_plus1")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxLongTermFrameIdxPlus1;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureControlCodecDataH264ReferencePictureListModificationOperation
	{
		[NativeName(NativeNameType.Field, "modification_of_pic_nums_idc")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte ModificationOfPicNumsIdc;
		[NativeName(NativeNameType.Field, "abs_diff_pic_num_minus1")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint AbsDiffPicNumMinus1;
		[NativeName(NativeNameType.Field, "long_term_pic_num")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint LongTermPicNum;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureControlCodecDataHevc
	{
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS")]
		public D3D12VideoEncoderPictureControlCodecDataHevcFlags Flags;
		[NativeName(NativeNameType.Field, "FrameType")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC")]
		public D3D12VideoEncoderFrameTypeHevc FrameType;
		[NativeName(NativeNameType.Field, "slice_pic_parameter_set_id")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SlicePicParameterSetId;
		[NativeName(NativeNameType.Field, "PictureOrderCountNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PictureOrderCountNumber;
		[NativeName(NativeNameType.Field, "TemporalLayerIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TemporalLayerIndex;
		[NativeName(NativeNameType.Field, "List0ReferenceFramesCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint List0ReferenceFramesCount;
		[NativeName(NativeNameType.Field, "pList0ReferenceFrames")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PList0ReferenceFrames;
		[NativeName(NativeNameType.Field, "List1ReferenceFramesCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint List1ReferenceFramesCount;
		[NativeName(NativeNameType.Field, "pList1ReferenceFrames")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PList1ReferenceFrames;
		[NativeName(NativeNameType.Field, "ReferenceFramesReconPictureDescriptorsCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ReferenceFramesReconPictureDescriptorsCount;
		[NativeName(NativeNameType.Field, "pReferenceFramesReconPictureDescriptors")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC*")]
		public unsafe D3D12VideoEncoderReferencePictureDescriptorHevc* PReferenceFramesReconPictureDescriptors;
		[NativeName(NativeNameType.Field, "List0RefPicModificationsCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint List0RefPicModificationsCount;
		[NativeName(NativeNameType.Field, "pList0RefPicModifications")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PList0RefPicModifications;
		[NativeName(NativeNameType.Field, "List1RefPicModificationsCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint List1RefPicModificationsCount;
		[NativeName(NativeNameType.Field, "pList1RefPicModifications")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PList1RefPicModifications;
		[NativeName(NativeNameType.Field, "QPMapValuesCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint QPMapValuesCount;
		[NativeName(NativeNameType.Field, "pRateControlQPMap")]
		[NativeName(NativeNameType.Type, "INT8*")]
		public unsafe sbyte* PRateControlQPMap;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderReferencePictureDescriptorHevc
	{
		[NativeName(NativeNameType.Field, "ReconstructedPictureResourceIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ReconstructedPictureResourceIndex;
		[NativeName(NativeNameType.Field, "IsRefUsedByCurrentPic")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsRefUsedByCurrentPic;
		[NativeName(NativeNameType.Field, "IsLongTermReference")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsLongTermReference;
		[NativeName(NativeNameType.Field, "PictureOrderCountNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PictureOrderCountNumber;
		[NativeName(NativeNameType.Field, "TemporalLayerIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint TemporalLayerIndex;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODE_REFERENCE_FRAMES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncodeReferenceFrames
	{
		[NativeName(NativeNameType.Field, "NumTexture2Ds")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumTexture2Ds;
		[NativeName(NativeNameType.Field, "ppTexture2Ds")]
		[NativeName(NativeNameType.Type, "ID3D12Resource**")]
		public unsafe ID3D12Resource** PpTexture2Ds;
		[NativeName(NativeNameType.Field, "pSubresources")]
		[NativeName(NativeNameType.Type, "UINT*")]
		public unsafe uint* PSubresources;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderEncodeframeOutputArguments
	{
		[NativeName(NativeNameType.Field, "Bitstream")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM")]
		public D3D12VideoEncoderCompressedBitstream Bitstream;
		[NativeName(NativeNameType.Field, "ReconstructedPicture")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE")]
		public D3D12VideoEncoderReconstructedPicture ReconstructedPicture;
		[NativeName(NativeNameType.Field, "EncoderOutputMetadata")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER")]
		public D3D12VideoEncoderEncodeOperationMetadataBuffer EncoderOutputMetadata;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCompressedBitstream
	{
		[NativeName(NativeNameType.Field, "pBuffer")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PBuffer;
		[NativeName(NativeNameType.Field, "FrameStartOffset")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong FrameStartOffset;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderReconstructedPicture
	{
		[NativeName(NativeNameType.Field, "pReconstructedPicture")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PReconstructedPicture;
		[NativeName(NativeNameType.Field, "ReconstructedPictureSubresource")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ReconstructedPictureSubresource;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderEncodeOperationMetadataBuffer
	{
		[NativeName(NativeNameType.Field, "pBuffer")]
		[NativeName(NativeNameType.Type, "ID3D12Resource*")]
		public unsafe ID3D12Resource* PBuffer;
		[NativeName(NativeNameType.Field, "Offset")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Offset;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderResolveMetadataInputArguments
	{
		[NativeName(NativeNameType.Field, "EncoderCodec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec EncoderCodec;
		[NativeName(NativeNameType.Field, "EncoderProfile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc EncoderProfile;
		[NativeName(NativeNameType.Field, "EncoderInputFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat EncoderInputFormat;
		[NativeName(NativeNameType.Field, "EncodedPictureEffectiveResolution")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC")]
		public D3D12VideoEncoderPictureResolutionDesc EncodedPictureEffectiveResolution;
		[NativeName(NativeNameType.Field, "HWLayoutMetadata")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER")]
		public D3D12VideoEncoderEncodeOperationMetadataBuffer HWLayoutMetadata;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderResolveMetadataOutputArguments
	{
		[NativeName(NativeNameType.Field, "ResolvedLayoutMetadata")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER")]
		public D3D12VideoEncoderEncodeOperationMetadataBuffer ResolvedLayoutMetadata;


	}

	[Guid("7f027b22-1515-4e85-aa0d-026486580576")]
	[NativeName(NativeNameType.StructOrClass, "ID3D12VideoEncodeCommandList3")]
	public partial struct ID3D12VideoEncodeCommandList3 : IComObject, IComObject<ID3D12VideoEncodeCommandList3>, IComObject<ID3D12VideoEncodeCommandList2>, IComObject<ID3D12VideoEncodeCommandList1>, IComObject<ID3D12VideoEncodeCommandList>, IComObject<ID3D12CommandList>, IComObject<ID3D12DeviceChild>, IComObject<ID3D12Object>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("7f027b22-1515-4e85-aa0d-026486580576");

		public unsafe ID3D12VideoEncodeCommandList3 (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator ID3D12VideoEncodeCommandList2 (ID3D12VideoEncodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList3, ID3D12VideoEncodeCommandList2>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoEncodeCommandList1 (ID3D12VideoEncodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList3, ID3D12VideoEncodeCommandList1>(ref value);
		}

		public unsafe static implicit operator ID3D12VideoEncodeCommandList (ID3D12VideoEncodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList3, ID3D12VideoEncodeCommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12CommandList (ID3D12VideoEncodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList3, ID3D12CommandList>(ref value);
		}

		public unsafe static implicit operator ID3D12DeviceChild (ID3D12VideoEncodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList3, ID3D12DeviceChild>(ref value);
		}

		public unsafe static implicit operator ID3D12Object (ID3D12VideoEncodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList3, ID3D12Object>(ref value);
		}

		public unsafe static implicit operator IUnknown (ID3D12VideoEncodeCommandList3 value)
		{
			return Unsafe.As<ID3D12VideoEncodeCommandList3, IUnknown>(ref value);
		}

	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_FORMAT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoFormat
	{
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "ColorSpace")]
		[NativeName(NativeNameType.Type, "DXGI_COLOR_SPACE_TYPE")]
		public DxgiColorSpaceType ColorSpace;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_SAMPLE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoSample
	{
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FORMAT")]
		public D3D12VideoFormat Format;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecodeSupport
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Configuration")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONFIGURATION")]
		public D3D12VideoDecodeConfiguration Configuration;
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;
		[NativeName(NativeNameType.Field, "DecodeFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat DecodeFormat;
		[NativeName(NativeNameType.Field, "FrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational FrameRate;
		[NativeName(NativeNameType.Field, "BitRate")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BitRate;
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_SUPPORT_FLAGS")]
		public D3D12VideoDecodeSupportFlags SupportFlags;
		[NativeName(NativeNameType.Field, "ConfigurationFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS")]
		public D3D12VideoDecodeConfigurationFlags ConfigurationFlags;
		[NativeName(NativeNameType.Field, "DecodeTier")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_TIER")]
		public D3D12VideoDecodeTier DecodeTier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecodeProfileCount
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "ProfileCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ProfileCount;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecodeProfiles
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "ProfileCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ProfileCount;
		[NativeName(NativeNameType.Field, "pProfiles")]
		[NativeName(NativeNameType.Type, "GUID*")]
		public unsafe Guid* PProfiles;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecodeFormatCount
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Configuration")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONFIGURATION")]
		public D3D12VideoDecodeConfiguration Configuration;
		[NativeName(NativeNameType.Field, "FormatCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FormatCount;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecodeFormats
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Configuration")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONFIGURATION")]
		public D3D12VideoDecodeConfiguration Configuration;
		[NativeName(NativeNameType.Field, "FormatCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FormatCount;
		[NativeName(NativeNameType.Field, "pOutputFormats")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT*")]
		public unsafe DxgiFormat* POutputFormats;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoArchitecture
	{
		[NativeName(NativeNameType.Field, "IOCoherent")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IOCoherent;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecodeHistogram
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "DecodeProfile")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid DecodeProfile;
		[NativeName(NativeNameType.Field, "Width")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Width;
		[NativeName(NativeNameType.Field, "Height")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint Height;
		[NativeName(NativeNameType.Field, "DecodeFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat DecodeFormat;
		[NativeName(NativeNameType.Field, "Components")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS")]
		public D3D12VideoDecodeHistogramComponentFlags Components;
		[NativeName(NativeNameType.Field, "BinCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BinCount;
		[NativeName(NativeNameType.Field, "CounterBitDepth")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CounterBitDepth;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_SCALE_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoScaleSupport
	{
		[NativeName(NativeNameType.Field, "OutputSizeRange")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SIZE_RANGE")]
		public D3D12VideoSizeRange OutputSizeRange;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SCALE_SUPPORT_FLAGS")]
		public D3D12VideoScaleSupportFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecodeConversionSupport
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Configuration")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONFIGURATION")]
		public D3D12VideoDecodeConfiguration Configuration;
		[NativeName(NativeNameType.Field, "DecodeSample")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SAMPLE")]
		public D3D12VideoSample DecodeSample;
		[NativeName(NativeNameType.Field, "OutputFormat")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FORMAT")]
		public D3D12VideoFormat OutputFormat;
		[NativeName(NativeNameType.Field, "FrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational FrameRate;
		[NativeName(NativeNameType.Field, "BitRate")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BitRate;
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS")]
		public D3D12VideoDecodeConversionSupportFlags SupportFlags;
		[NativeName(NativeNameType.Field, "ScaleSupport")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SCALE_SUPPORT")]
		public D3D12VideoScaleSupport ScaleSupport;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecoderHeapSize
	{
		[NativeName(NativeNameType.Field, "VideoDecoderHeapDesc")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODER_HEAP_DESC")]
		public D3D12VideoDecoderHeapDesc VideoDecoderHeapDesc;
		[NativeName(NativeNameType.Field, "MemoryPoolL0Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL0Size;
		[NativeName(NativeNameType.Field, "MemoryPoolL1Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL1Size;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoProcessorSize
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "pOutputStreamDesc")]
		[NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")]
		public unsafe D3D12VideoProcessOutputStreamDesc* POutputStreamDesc;
		[NativeName(NativeNameType.Field, "NumInputStreamDescs")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumInputStreamDescs;
		[NativeName(NativeNameType.Field, "pInputStreamDescs")]
		[NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")]
		public unsafe D3D12VideoProcessInputStreamDesc* PInputStreamDescs;
		[NativeName(NativeNameType.Field, "MemoryPoolL0Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL0Size;
		[NativeName(NativeNameType.Field, "MemoryPoolL1Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL1Size;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12QueryDataVideoDecodeStatistics
	{
		[NativeName(NativeNameType.Field, "Status")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong Status;
		[NativeName(NativeNameType.Field, "NumMacroblocksAffected")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong NumMacroblocksAffected;
		[NativeName(NativeNameType.Field, "FrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational FrameRate;
		[NativeName(NativeNameType.Field, "BitRate")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint BitRate;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_PROCESS_FILTER_RANGE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoProcessFilterRange
	{
		[NativeName(NativeNameType.Field, "Minimum")]
		[NativeName(NativeNameType.Type, "INT")]
		public int Minimum;
		[NativeName(NativeNameType.Field, "Maximum")]
		[NativeName(NativeNameType.Type, "INT")]
		public int Maximum;
		[NativeName(NativeNameType.Field, "Default")]
		[NativeName(NativeNameType.Type, "INT")]
		public int Default;
		[NativeName(NativeNameType.Field, "Multiplier")]
		[NativeName(NativeNameType.Type, "FLOAT")]
		public float Multiplier;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoProcessSupport
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "InputSample")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SAMPLE")]
		public D3D12VideoSample InputSample;
		[NativeName(NativeNameType.Field, "InputFieldType")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FIELD_TYPE")]
		public D3D12VideoFieldType InputFieldType;
		[NativeName(NativeNameType.Field, "InputStereoFormat")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FRAME_STEREO_FORMAT")]
		public D3D12VideoFrameStereoFormat InputStereoFormat;
		[NativeName(NativeNameType.Field, "InputFrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational InputFrameRate;
		[NativeName(NativeNameType.Field, "OutputFormat")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FORMAT")]
		public D3D12VideoFormat OutputFormat;
		[NativeName(NativeNameType.Field, "OutputStereoFormat")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_FRAME_STEREO_FORMAT")]
		public D3D12VideoFrameStereoFormat OutputStereoFormat;
		[NativeName(NativeNameType.Field, "OutputFrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational OutputFrameRate;
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_SUPPORT_FLAGS")]
		public D3D12VideoProcessSupportFlags SupportFlags;
		[NativeName(NativeNameType.Field, "ScaleSupport")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SCALE_SUPPORT")]
		public D3D12VideoScaleSupport ScaleSupport;
		[NativeName(NativeNameType.Field, "FeatureSupport")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_FEATURE_FLAGS")]
		public D3D12VideoProcessFeatureFlags FeatureSupport;
		[NativeName(NativeNameType.Field, "DeinterlaceSupport")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS")]
		public D3D12VideoProcessDeinterlaceFlags DeinterlaceSupport;
		[NativeName(NativeNameType.Field, "AutoProcessingSupport")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS")]
		public D3D12VideoProcessAutoProcessingFlags AutoProcessingSupport;
		[NativeName(NativeNameType.Field, "FilterSupport")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_FILTER_FLAGS")]
		public D3D12VideoProcessFilterFlags FilterSupport;
		[NativeName(NativeNameType.Field, "FilterRangeSupport")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_FILTER_RANGE[32]")]
		public D3D12VideoProcessFilterRange FilterRangeSupport_0;
		public D3D12VideoProcessFilterRange FilterRangeSupport_1;
		public D3D12VideoProcessFilterRange FilterRangeSupport_2;
		public D3D12VideoProcessFilterRange FilterRangeSupport_3;
		public D3D12VideoProcessFilterRange FilterRangeSupport_4;
		public D3D12VideoProcessFilterRange FilterRangeSupport_5;
		public D3D12VideoProcessFilterRange FilterRangeSupport_6;
		public D3D12VideoProcessFilterRange FilterRangeSupport_7;
		public D3D12VideoProcessFilterRange FilterRangeSupport_8;
		public D3D12VideoProcessFilterRange FilterRangeSupport_9;
		public D3D12VideoProcessFilterRange FilterRangeSupport_10;
		public D3D12VideoProcessFilterRange FilterRangeSupport_11;
		public D3D12VideoProcessFilterRange FilterRangeSupport_12;
		public D3D12VideoProcessFilterRange FilterRangeSupport_13;
		public D3D12VideoProcessFilterRange FilterRangeSupport_14;
		public D3D12VideoProcessFilterRange FilterRangeSupport_15;
		public D3D12VideoProcessFilterRange FilterRangeSupport_16;
		public D3D12VideoProcessFilterRange FilterRangeSupport_17;
		public D3D12VideoProcessFilterRange FilterRangeSupport_18;
		public D3D12VideoProcessFilterRange FilterRangeSupport_19;
		public D3D12VideoProcessFilterRange FilterRangeSupport_20;
		public D3D12VideoProcessFilterRange FilterRangeSupport_21;
		public D3D12VideoProcessFilterRange FilterRangeSupport_22;
		public D3D12VideoProcessFilterRange FilterRangeSupport_23;
		public D3D12VideoProcessFilterRange FilterRangeSupport_24;
		public D3D12VideoProcessFilterRange FilterRangeSupport_25;
		public D3D12VideoProcessFilterRange FilterRangeSupport_26;
		public D3D12VideoProcessFilterRange FilterRangeSupport_27;
		public D3D12VideoProcessFilterRange FilterRangeSupport_28;
		public D3D12VideoProcessFilterRange FilterRangeSupport_29;
		public D3D12VideoProcessFilterRange FilterRangeSupport_30;
		public D3D12VideoProcessFilterRange FilterRangeSupport_31;


		public unsafe Span<D3D12VideoProcessFilterRange> FilterRangeSupport
		
		{
			get
			{
				fixed (D3D12VideoProcessFilterRange* p = &this.FilterRangeSupport_0)
				{
					return new Span<D3D12VideoProcessFilterRange>(p, 32);
				}
			}
		}
	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoProcessMaxInputStreams
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "MaxInputStreams")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxInputStreams;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoProcessReferenceInfo
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "DeinterlaceMode")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS")]
		public D3D12VideoProcessDeinterlaceFlags DeinterlaceMode;
		[NativeName(NativeNameType.Field, "Filters")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_FILTER_FLAGS")]
		public D3D12VideoProcessFilterFlags Filters;
		[NativeName(NativeNameType.Field, "FeatureSupport")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROCESS_FEATURE_FLAGS")]
		public D3D12VideoProcessFeatureFlags FeatureSupport;
		[NativeName(NativeNameType.Field, "InputFrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational InputFrameRate;
		[NativeName(NativeNameType.Field, "OutputFrameRate")]
		[NativeName(NativeNameType.Type, "DXGI_RATIONAL")]
		public DxgiRational OutputFrameRate;
		[NativeName(NativeNameType.Field, "EnableAutoProcessing")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int EnableAutoProcessing;
		[NativeName(NativeNameType.Field, "PastFrames")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint PastFrames;
		[NativeName(NativeNameType.Field, "FutureFrames")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint FutureFrames;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoFeatureAreaSupport
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "VideoDecodeSupport")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int VideoDecodeSupport;
		[NativeName(NativeNameType.Field, "VideoProcessSupport")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int VideoProcessSupport;
		[NativeName(NativeNameType.Field, "VideoEncodeSupport")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int VideoEncodeSupport;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoMotionEstimator
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "InputFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat InputFormat;
		[NativeName(NativeNameType.Field, "BlockSizeFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS")]
		public D3D12VideoMotionEstimatorSearchBlockSizeFlags BlockSizeFlags;
		[NativeName(NativeNameType.Field, "PrecisionFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS")]
		public D3D12VideoMotionEstimatorVectorPrecisionFlags PrecisionFlags;
		[NativeName(NativeNameType.Field, "SizeRange")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SIZE_RANGE")]
		public D3D12VideoSizeRange SizeRange;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoMotionEstimatorSize
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "InputFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat InputFormat;
		[NativeName(NativeNameType.Field, "BlockSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE")]
		public D3D12VideoMotionEstimatorSearchBlockSize BlockSize;
		[NativeName(NativeNameType.Field, "Precision")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION")]
		public D3D12VideoMotionEstimatorVectorPrecision Precision;
		[NativeName(NativeNameType.Field, "SizeRange")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_SIZE_RANGE")]
		public D3D12VideoSizeRange SizeRange;
		[NativeName(NativeNameType.Field, "Protected")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Protected;
		[NativeName(NativeNameType.Field, "MotionVectorHeapMemoryPoolL0Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MotionVectorHeapMemoryPoolL0Size;
		[NativeName(NativeNameType.Field, "MotionVectorHeapMemoryPoolL1Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MotionVectorHeapMemoryPoolL1Size;
		[NativeName(NativeNameType.Field, "MotionEstimatorMemoryPoolL0Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MotionEstimatorMemoryPoolL0Size;
		[NativeName(NativeNameType.Field, "MotionEstimatorMemoryPoolL1Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MotionEstimatorMemoryPoolL1Size;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecodeProtectedResources
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Configuration")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODE_CONFIGURATION")]
		public D3D12VideoDecodeConfiguration Configuration;
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS")]
		public D3D12VideoProtectedResourceSupportFlags SupportFlags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoProcessProtectedResources
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS")]
		public D3D12VideoProtectedResourceSupportFlags SupportFlags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoMotionEstimatorProtectedResources
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS")]
		public D3D12VideoProtectedResourceSupportFlags SupportFlags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoDecoderHeapSize1
	{
		[NativeName(NativeNameType.Field, "VideoDecoderHeapDesc")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_DECODER_HEAP_DESC")]
		public D3D12VideoDecoderHeapDesc VideoDecoderHeapDesc;
		[NativeName(NativeNameType.Field, "Protected")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Protected;
		[NativeName(NativeNameType.Field, "MemoryPoolL0Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL0Size;
		[NativeName(NativeNameType.Field, "MemoryPoolL1Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL1Size;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoProcessorSize1
	{
		[NativeName(NativeNameType.Field, "NodeMask")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeMask;
		[NativeName(NativeNameType.Field, "pOutputStreamDesc")]
		[NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*")]
		public unsafe D3D12VideoProcessOutputStreamDesc* POutputStreamDesc;
		[NativeName(NativeNameType.Field, "NumInputStreamDescs")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NumInputStreamDescs;
		[NativeName(NativeNameType.Field, "pInputStreamDescs")]
		[NativeName(NativeNameType.Type, "const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*")]
		public unsafe D3D12VideoProcessInputStreamDesc* PInputStreamDescs;
		[NativeName(NativeNameType.Field, "Protected")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int Protected;
		[NativeName(NativeNameType.Field, "MemoryPoolL0Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL0Size;
		[NativeName(NativeNameType.Field, "MemoryPoolL1Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL1Size;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoExtensionCommandCount
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "CommandCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CommandCount;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_EXTENSION_COMMAND_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoExtensionCommandInfo
	{
		[NativeName(NativeNameType.Field, "CommandId")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid CommandId;
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* Name;
		[NativeName(NativeNameType.Field, "CommandListSupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_COMMAND_LIST_SUPPORT_FLAGS")]
		public D3D12CommandListSupportFlags CommandListSupportFlags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoExtensionCommands
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "CommandCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CommandCount;
		[NativeName(NativeNameType.Field, "pCommandInfos")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_EXTENSION_COMMAND_INFO*")]
		public unsafe D3D12VideoExtensionCommandInfo* PCommandInfos;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoExtensionCommandParameterCount
	{
		[NativeName(NativeNameType.Field, "CommandId")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid CommandId;
		[NativeName(NativeNameType.Field, "Stage")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE")]
		public D3D12VideoExtensionCommandParameterStage Stage;
		[NativeName(NativeNameType.Field, "ParameterCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ParameterCount;
		[NativeName(NativeNameType.Field, "ParameterPacking")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ParameterPacking;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoExtensionCommandParameterInfo
	{
		[NativeName(NativeNameType.Field, "Name")]
		[NativeName(NativeNameType.Type, "LPCWSTR")]
		public unsafe char* Name;
		[NativeName(NativeNameType.Field, "Type")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE")]
		public D3D12VideoExtensionCommandParameterType Type;
		[NativeName(NativeNameType.Field, "Flags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS")]
		public D3D12VideoExtensionCommandParameterFlags Flags;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoExtensionCommandParameters
	{
		[NativeName(NativeNameType.Field, "CommandId")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid CommandId;
		[NativeName(NativeNameType.Field, "Stage")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE")]
		public D3D12VideoExtensionCommandParameterStage Stage;
		[NativeName(NativeNameType.Field, "ParameterCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ParameterCount;
		[NativeName(NativeNameType.Field, "pParameterInfos")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO*")]
		public unsafe D3D12VideoExtensionCommandParameterInfo* PParameterInfos;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoExtensionCommandSupport
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "CommandId")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid CommandId;
		[NativeName(NativeNameType.Field, "pInputData")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PInputData;
		[NativeName(NativeNameType.Field, "InputDataSizeInBytes")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint InputDataSizeInBytes;
		[NativeName(NativeNameType.Field, "pOutputData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* POutputData;
		[NativeName(NativeNameType.Field, "OutputDataSizeInBytes")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint OutputDataSizeInBytes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoExtensionCommandSize
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "CommandId")]
		[NativeName(NativeNameType.Type, "GUID")]
		public Guid CommandId;
		[NativeName(NativeNameType.Field, "pCreationParameters")]
		[NativeName(NativeNameType.Type, "const void*")]
		public unsafe void* PCreationParameters;
		[NativeName(NativeNameType.Field, "CreationParametersSizeInBytes")]
		[NativeName(NativeNameType.Type, "SIZE_T")]
		public nuint CreationParametersSizeInBytes;
		[NativeName(NativeNameType.Field, "MemoryPoolL0Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL0Size;
		[NativeName(NativeNameType.Field, "MemoryPoolL1Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL1Size;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderCodec
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderProfileLevel
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "Profile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc Profile;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;
		[NativeName(NativeNameType.Field, "MinSupportedLevel")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVEL_SETTING")]
		public D3D12VideoEncoderLevelSetting MinSupportedLevel;
		[NativeName(NativeNameType.Field, "MaxSupportedLevel")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVEL_SETTING")]
		public D3D12VideoEncoderLevelSetting MaxSupportedLevel;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderPictureResolutionRatioDesc
	{
		[NativeName(NativeNameType.Field, "WidthRatio")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint WidthRatio;
		[NativeName(NativeNameType.Field, "HeightRatio")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint HeightRatio;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderOutputResolutionRatiosCount
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "ResolutionRatiosCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ResolutionRatiosCount;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderOutputResolution
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "ResolutionRatiosCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ResolutionRatiosCount;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;
		[NativeName(NativeNameType.Field, "MinResolutionSupported")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC")]
		public D3D12VideoEncoderPictureResolutionDesc MinResolutionSupported;
		[NativeName(NativeNameType.Field, "MaxResolutionSupported")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC")]
		public D3D12VideoEncoderPictureResolutionDesc MaxResolutionSupported;
		[NativeName(NativeNameType.Field, "ResolutionWidthMultipleRequirement")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ResolutionWidthMultipleRequirement;
		[NativeName(NativeNameType.Field, "ResolutionHeightMultipleRequirement")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ResolutionHeightMultipleRequirement;
		[NativeName(NativeNameType.Field, "pResolutionRatios")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC*")]
		public unsafe D3D12VideoEncoderPictureResolutionRatioDesc* PResolutionRatios;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderInputFormat
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "Profile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc Profile;
		[NativeName(NativeNameType.Field, "Format")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat Format;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderRateControlMode
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "RateControlMode")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE")]
		public D3D12VideoEncoderRateControlMode RateControlMode;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderIntraRefreshMode
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "Profile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc Profile;
		[NativeName(NativeNameType.Field, "Level")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVEL_SETTING")]
		public D3D12VideoEncoderLevelSetting Level;
		[NativeName(NativeNameType.Field, "IntraRefreshMode")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE")]
		public D3D12VideoEncoderIntraRefreshMode IntraRefreshMode;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderFrameSubregionLayoutMode
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "Profile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc Profile;
		[NativeName(NativeNameType.Field, "Level")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVEL_SETTING")]
		public D3D12VideoEncoderLevelSetting Level;
		[NativeName(NativeNameType.Field, "SubregionMode")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE")]
		public D3D12VideoEncoderFrameSubregionLayoutMode SubregionMode;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderHeapSize
	{
		[NativeName(NativeNameType.Field, "HeapDesc")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_HEAP_DESC")]
		public D3D12VideoEncoderHeapDesc HeapDesc;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;
		[NativeName(NativeNameType.Field, "MemoryPoolL0Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL0Size;
		[NativeName(NativeNameType.Field, "MemoryPoolL1Size")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong MemoryPoolL1Size;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCodecConfigurationSupportH264
	{
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS")]
		public D3D12VideoEncoderCodecConfigurationSupportH264Flags SupportFlags;
		[NativeName(NativeNameType.Field, "DisableDeblockingFilterSupportedModes")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS")]
		public D3D12VideoEncoderCodecConfigurationH264SlicesDeblockingModeFlags DisableDeblockingFilterSupportedModes;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCodecConfigurationSupportHevc
	{
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS")]
		public D3D12VideoEncoderCodecConfigurationSupportHevcFlags SupportFlags;
		[NativeName(NativeNameType.Field, "MinLumaCodingUnitSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE")]
		public D3D12VideoEncoderCodecConfigurationHevcCusize MinLumaCodingUnitSize;
		[NativeName(NativeNameType.Field, "MaxLumaCodingUnitSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE")]
		public D3D12VideoEncoderCodecConfigurationHevcCusize MaxLumaCodingUnitSize;
		[NativeName(NativeNameType.Field, "MinLumaTransformUnitSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE")]
		public D3D12VideoEncoderCodecConfigurationHevcTusize MinLumaTransformUnitSize;
		[NativeName(NativeNameType.Field, "MaxLumaTransformUnitSize")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE")]
		public D3D12VideoEncoderCodecConfigurationHevcTusize MaxLumaTransformUnitSize;
		[NativeName(NativeNameType.Field, "max_transform_hierarchy_depth_inter")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte MaxTransformHierarchyDepthInter;
		[NativeName(NativeNameType.Field, "max_transform_hierarchy_depth_intra")]
		[NativeName(NativeNameType.Type, "UCHAR")]
		public byte MaxTransformHierarchyDepthIntra;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCodecConfigurationSupport
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderCodecConfigurationSupportUnion
		{
			[NativeName(NativeNameType.Field, "pH264Support")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderCodecConfigurationSupportH264* PH264Support;
			[NativeName(NativeNameType.Field, "pHEVCSupport")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderCodecConfigurationSupportHevc* PHEVCSupport;


		}

		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderCodecConfigurationSupportUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderCodecConfigurationSupport
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "Profile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc Profile;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;
		[NativeName(NativeNameType.Field, "CodecSupportLimits")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT")]
		public D3D12VideoEncoderCodecConfigurationSupport CodecSupportLimits;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCodecPictureControlSupportH264
	{
		[NativeName(NativeNameType.Field, "MaxL0ReferencesForP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxL0ReferencesForP;
		[NativeName(NativeNameType.Field, "MaxL0ReferencesForB")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxL0ReferencesForB;
		[NativeName(NativeNameType.Field, "MaxL1ReferencesForB")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxL1ReferencesForB;
		[NativeName(NativeNameType.Field, "MaxLongTermReferences")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxLongTermReferences;
		[NativeName(NativeNameType.Field, "MaxDPBCapacity")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxDPBCapacity;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCodecPictureControlSupportHevc
	{
		[NativeName(NativeNameType.Field, "MaxL0ReferencesForP")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxL0ReferencesForP;
		[NativeName(NativeNameType.Field, "MaxL0ReferencesForB")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxL0ReferencesForB;
		[NativeName(NativeNameType.Field, "MaxL1ReferencesForB")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxL1ReferencesForB;
		[NativeName(NativeNameType.Field, "MaxLongTermReferences")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxLongTermReferences;
		[NativeName(NativeNameType.Field, "MaxDPBCapacity")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxDPBCapacity;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderCodecPictureControlSupport
	{
		[NativeName(NativeNameType.StructOrClass, "")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct D3D12VideoEncoderCodecPictureControlSupportUnion
		{
			[NativeName(NativeNameType.Field, "pH264Support")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderCodecPictureControlSupportH264* PH264Support;
			[NativeName(NativeNameType.Field, "pHEVCSupport")]
			[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC*")]
			[FieldOffset(0)]
			public unsafe D3D12VideoEncoderCodecPictureControlSupportHevc* PHEVCSupport;


		}

		[NativeName(NativeNameType.Field, "DataSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint DataSize;
		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public D3D12VideoEncoderCodecPictureControlSupportUnion Union;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderCodecPictureControlSupport
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "Profile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc Profile;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;
		[NativeName(NativeNameType.Field, "PictureSupport")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT")]
		public D3D12VideoEncoderCodecPictureControlSupport PictureSupport;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderResolutionSupportLimits
	{
		[NativeName(NativeNameType.Field, "MaxSubregionsNumber")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxSubregionsNumber;
		[NativeName(NativeNameType.Field, "MaxIntraRefreshFrameDuration")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxIntraRefreshFrameDuration;
		[NativeName(NativeNameType.Field, "SubregionBlockPixelsSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint SubregionBlockPixelsSize;
		[NativeName(NativeNameType.Field, "QPMapRegionPixelsSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint QPMapRegionPixelsSize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderSupport
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "InputFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat InputFormat;
		[NativeName(NativeNameType.Field, "CodecConfiguration")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION")]
		public D3D12VideoEncoderCodecConfiguration CodecConfiguration;
		[NativeName(NativeNameType.Field, "CodecGopSequence")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE")]
		public D3D12VideoEncoderSequenceGopStructure CodecGopSequence;
		[NativeName(NativeNameType.Field, "RateControl")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_RATE_CONTROL")]
		public D3D12VideoEncoderRateControl RateControl;
		[NativeName(NativeNameType.Field, "IntraRefresh")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE")]
		public D3D12VideoEncoderIntraRefreshMode IntraRefresh;
		[NativeName(NativeNameType.Field, "SubregionFrameEncoding")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE")]
		public D3D12VideoEncoderFrameSubregionLayoutMode SubregionFrameEncoding;
		[NativeName(NativeNameType.Field, "ResolutionsListCount")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint ResolutionsListCount;
		[NativeName(NativeNameType.Field, "pResolutionList")]
		[NativeName(NativeNameType.Type, "const D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC*")]
		public unsafe D3D12VideoEncoderPictureResolutionDesc* PResolutionList;
		[NativeName(NativeNameType.Field, "MaxReferenceFramesInDPB")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxReferenceFramesInDPB;
		[NativeName(NativeNameType.Field, "ValidationFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_VALIDATION_FLAGS")]
		public D3D12VideoEncoderValidationFlags ValidationFlags;
		[NativeName(NativeNameType.Field, "SupportFlags")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_SUPPORT_FLAGS")]
		public D3D12VideoEncoderSupportFlags SupportFlags;
		[NativeName(NativeNameType.Field, "SuggestedProfile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc SuggestedProfile;
		[NativeName(NativeNameType.Field, "SuggestedLevel")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_LEVEL_SETTING")]
		public D3D12VideoEncoderLevelSetting SuggestedLevel;
		[NativeName(NativeNameType.Field, "pResolutionDependentSupport")]
		[NativeName(NativeNameType.Type, "D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS*")]
		public unsafe D3D12FeatureDataVideoEncoderResolutionSupportLimits* PResolutionDependentSupport;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12FeatureDataVideoEncoderResourceRequirements
	{
		[NativeName(NativeNameType.Field, "NodeIndex")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint NodeIndex;
		[NativeName(NativeNameType.Field, "Codec")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_CODEC")]
		public D3D12VideoEncoderCodec Codec;
		[NativeName(NativeNameType.Field, "Profile")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PROFILE_DESC")]
		public D3D12VideoEncoderProfileDesc Profile;
		[NativeName(NativeNameType.Field, "InputFormat")]
		[NativeName(NativeNameType.Type, "DXGI_FORMAT")]
		public DxgiFormat InputFormat;
		[NativeName(NativeNameType.Field, "PictureTargetResolution")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC")]
		public D3D12VideoEncoderPictureResolutionDesc PictureTargetResolution;
		[NativeName(NativeNameType.Field, "IsSupported")]
		[NativeName(NativeNameType.Type, "BOOL")]
		public int IsSupported;
		[NativeName(NativeNameType.Field, "CompressedBitstreamBufferAccessAlignment")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint CompressedBitstreamBufferAccessAlignment;
		[NativeName(NativeNameType.Field, "EncoderMetadataBufferAccessAlignment")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint EncoderMetadataBufferAccessAlignment;
		[NativeName(NativeNameType.Field, "MaxEncoderOutputMetadataBufferSize")]
		[NativeName(NativeNameType.Type, "UINT")]
		public uint MaxEncoderOutputMetadataBufferSize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderFrameSubregionMetadata
	{
		[NativeName(NativeNameType.Field, "bSize")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong BSize;
		[NativeName(NativeNameType.Field, "bStartOffset")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong BStartOffset;
		[NativeName(NativeNameType.Field, "bHeaderSize")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong BHeaderSize;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderOutputMetadataStatistics
	{
		[NativeName(NativeNameType.Field, "AverageQP")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong AverageQP;
		[NativeName(NativeNameType.Field, "IntraCodingUnitsCount")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong IntraCodingUnitsCount;
		[NativeName(NativeNameType.Field, "InterCodingUnitsCount")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong InterCodingUnitsCount;
		[NativeName(NativeNameType.Field, "SkipCodingUnitsCount")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong SkipCodingUnitsCount;
		[NativeName(NativeNameType.Field, "AverageMotionEstimationXDirection")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong AverageMotionEstimationXDirection;
		[NativeName(NativeNameType.Field, "AverageMotionEstimationYDirection")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong AverageMotionEstimationYDirection;


	}

	[NativeName(NativeNameType.StructOrClass, "D3D12_VIDEO_ENCODER_OUTPUT_METADATA")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3D12VideoEncoderOutputMetadata
	{
		[NativeName(NativeNameType.Field, "EncodeErrorFlags")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong EncodeErrorFlags;
		[NativeName(NativeNameType.Field, "EncodeStats")]
		[NativeName(NativeNameType.Type, "D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS")]
		public D3D12VideoEncoderOutputMetadataStatistics EncodeStats;
		[NativeName(NativeNameType.Field, "EncodedBitstreamWrittenBytesCount")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong EncodedBitstreamWrittenBytesCount;
		[NativeName(NativeNameType.Field, "WrittenSubregionsCount")]
		[NativeName(NativeNameType.Type, "UINT64")]
		public ulong WrittenSubregionsCount;


	}

}
