// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace HexaEngine.D3DCommon
{
	public static unsafe class Extensions
	{
		public static void* GetBufferPointer(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			void* ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, void*>)(*handle->LpVtbl))(handle);
			return ret;
		}

		public static nuint GetBufferSize(this ComPtr<ID3D10Blob> comObj) 
		{
			ID3D10Blob* handle = comObj.Handle;
			nuint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, nuint>)(handle->LpVtbl[1]))(handle);
			return ret;
		}

		public static HResult RegisterDestructionCallback(this ComPtr<ID3DDestructionNotifier> comObj, PfnDestructionCallback callbackFn, void* pData, uint* pCallbackID) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, PfnDestructionCallback, void*, uint*, HResult>)(*handle->LpVtbl))(handle, callbackFn, pData, pCallbackID);
			return ret;
		}

		public static HResult RegisterDestructionCallback(this ComPtr<ID3DDestructionNotifier> comObj, PfnDestructionCallback callbackFn, void* pData, ref uint pCallbackID) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			fixed (uint* ppCallbackID = &pCallbackID)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, PfnDestructionCallback, void*, uint*, HResult>)(*handle->LpVtbl))(handle, callbackFn, pData, (uint*)ppCallbackID);
				return ret;
			}
		}

		public static HResult UnregisterDestructionCallback(this ComPtr<ID3DDestructionNotifier> comObj, uint callbackID) 
		{
			ID3DDestructionNotifier* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, uint, HResult>)(handle->LpVtbl[1]))(handle, callbackID);
			return ret;
		}

		public static HResult Open(this ComPtr<ID3DInclude> comObj, D3DIncludeType includeType, byte* pFileName, void* pParentData, void** ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, ppData, pBytes);
			return ret;
		}

		public static HResult Open(this ComPtr<ID3DInclude> comObj, D3DIncludeType includeType, byte* pFileName, void* pParentData, ref void* ppData, uint* pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (void** pppData = &ppData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, (void**)pppData, pBytes);
				return ret;
			}
		}

		public static HResult Open(this ComPtr<ID3DInclude> comObj, D3DIncludeType includeType, byte* pFileName, void* pParentData, void** ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (uint* ppBytes = &pBytes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, ppData, (uint*)ppBytes);
				return ret;
			}
		}

		public static HResult Open(this ComPtr<ID3DInclude> comObj, D3DIncludeType includeType, byte* pFileName, void* pParentData, ref void* ppData, ref uint pBytes) 
		{
			ID3DInclude* handle = comObj.Handle;
			fixed (void** pppData = &ppData)
			{
				fixed (uint* ppBytes = &pBytes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, HResult>)(*handle->LpVtbl))(handle, includeType, pFileName, pParentData, (void**)pppData, (uint*)ppBytes);
					return ret;
				}
			}
		}

		public static HResult Close(this ComPtr<ID3DInclude> comObj, void* pData) 
		{
			ID3DInclude* handle = comObj.Handle;
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, void*, HResult>)(handle->LpVtbl[1]))(handle, pData);
			return ret;
		}

	}
}
