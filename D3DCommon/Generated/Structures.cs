// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using HexaGen.Runtime.COM;

namespace HexaEngine.D3DCommon
{
	[Guid("8ba5fb08-5195-40e2-ac58-0d989c3a0102")]
	[NativeName("ID3D10Blob")]
	public partial struct ID3D10Blob : IComObject, IComObject<ID3D10Blob>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public static readonly Guid Guid = new("8ba5fb08-5195-40e2-ac58-0d989c3a0102");

		public unsafe ID3D10Blob (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe void* GetBufferPointer()
		{
			ID3D10Blob* ptr = (ID3D10Blob*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			void* ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, void*>)(*LpVtbl))(ptr);
			return ret;
		}

		public readonly unsafe nuint GetBufferSize()
		{
			ID3D10Blob* ptr = (ID3D10Blob*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			nuint ret = ((delegate* unmanaged[Stdcall]<ID3D10Blob*, nuint>)(LpVtbl[1]))(ptr);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3D10Blob value)
		{
			return Unsafe.As<ID3D10Blob, IUnknown>(ref value);
		}

	}

	[NativeName("ID3DDestructionNotifier")]
	public partial struct ID3DDestructionNotifier : IComObject, IComObject<ID3DDestructionNotifier>, IComObject<IUnknown>
	{
		public unsafe void** LpVtbl;

		public unsafe ID3DDestructionNotifier (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult RegisterDestructionCallback(PfnDestructionCallback callbackFn, void* pData, uint* pCallbackID)
		{
			ID3DDestructionNotifier* ptr = (ID3DDestructionNotifier*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, PfnDestructionCallback, void*, uint*, HResult>)(*LpVtbl))(ptr, callbackFn, pData, pCallbackID);
			return ret;
		}

		public readonly unsafe HResult RegisterDestructionCallback(PfnDestructionCallback callbackFn, void* pData, ref uint pCallbackID)
		{
			ID3DDestructionNotifier* ptr = (ID3DDestructionNotifier*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppCallbackID = &pCallbackID)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, PfnDestructionCallback, void*, uint*, HResult>)(*LpVtbl))(ptr, callbackFn, pData, (uint*)ppCallbackID);
				return ret;
			}
		}

		public readonly unsafe HResult UnregisterDestructionCallback(uint callbackID)
		{
			ID3DDestructionNotifier* ptr = (ID3DDestructionNotifier*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DDestructionNotifier*, uint, HResult>)(LpVtbl[1]))(ptr, callbackID);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

		public unsafe static implicit operator IUnknown (ID3DDestructionNotifier value)
		{
			return Unsafe.As<ID3DDestructionNotifier, IUnknown>(ref value);
		}

	}

	[NativeName("_D3D_SHADER_MACRO")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct D3DShaderMacro
	{
		[NativeName("Name")]
		public unsafe byte* Name;
		[NativeName("Definition")]
		public unsafe byte* Definition;


	}

	[NativeName("ID3DInclude")]
	public partial struct ID3DInclude : IComObject, IComObject<ID3DInclude>
	{
		public unsafe void** LpVtbl;

		public unsafe ID3DInclude (void** lpVtbl = null)
		{
			LpVtbl = lpVtbl;
		}

		public readonly unsafe HResult Open(D3DIncludeType includeType, byte* pFileName, void* pParentData, void** ppData, uint* pBytes)
		{
			ID3DInclude* ptr = (ID3DInclude*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, HResult>)(*LpVtbl))(ptr, includeType, pFileName, pParentData, ppData, pBytes);
			return ret;
		}

		public readonly unsafe HResult Open(D3DIncludeType includeType, byte* pFileName, void* pParentData, ref void* ppData, uint* pBytes)
		{
			ID3DInclude* ptr = (ID3DInclude*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppData = &ppData)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, HResult>)(*LpVtbl))(ptr, includeType, pFileName, pParentData, (void**)pppData, pBytes);
				return ret;
			}
		}

		public readonly unsafe HResult Open(D3DIncludeType includeType, byte* pFileName, void* pParentData, void** ppData, ref uint pBytes)
		{
			ID3DInclude* ptr = (ID3DInclude*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (uint* ppBytes = &pBytes)
			{
				HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, HResult>)(*LpVtbl))(ptr, includeType, pFileName, pParentData, ppData, (uint*)ppBytes);
				return ret;
			}
		}

		public readonly unsafe HResult Open(D3DIncludeType includeType, byte* pFileName, void* pParentData, ref void* ppData, ref uint pBytes)
		{
			ID3DInclude* ptr = (ID3DInclude*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			fixed (void** pppData = &ppData)
			{
				fixed (uint* ppBytes = &pBytes)
				{
					HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, D3DIncludeType, byte*, void*, void**, uint*, HResult>)(*LpVtbl))(ptr, includeType, pFileName, pParentData, (void**)pppData, (uint*)ppBytes);
					return ret;
				}
			}
		}

		public readonly unsafe HResult Close(void* pData)
		{
			ID3DInclude* ptr = (ID3DInclude*)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
			HResult ret = ((delegate* unmanaged[Stdcall]<ID3DInclude*, void*, HResult>)(LpVtbl[1]))(ptr, pData);
			return ret;
		}

		unsafe void*** IComObject.AsVtblPtr()
		{
			return (void***)Unsafe.AsPointer(ref Unsafe.AsRef(in this));
		}

	}

}
